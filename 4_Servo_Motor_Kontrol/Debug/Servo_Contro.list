
Servo_Contro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800499c  0800499c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800499c  0800499c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800499c  0800499c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080049a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000014  080049b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080049b8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c748  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b9d  00000000  00000000  0002c78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  0002ef80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cde2  00000000  00000000  0002fae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5f2  00000000  00000000  0004c8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b00b9  00000000  00000000  00056ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  00106ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004954 	.word	0x08004954

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08004954 	.word	0x08004954

080001d4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	if (adc_value[0] < 400 && adc_value[0] >= 0 && duty[0] > 20) {
 80001dc:	4b63      	ldr	r3, [pc, #396]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80001e4:	d20a      	bcs.n	80001fc <HAL_ADC_ConvCpltCallback+0x28>
 80001e6:	4b62      	ldr	r3, [pc, #392]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	2b14      	cmp	r3, #20
 80001ec:	d906      	bls.n	80001fc <HAL_ADC_ConvCpltCallback+0x28>
		duty[0]--;
 80001ee:	4b60      	ldr	r3, [pc, #384]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	4b5e      	ldr	r3, [pc, #376]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80001f8:	801a      	strh	r2, [r3, #0]
 80001fa:	e01f      	b.n	800023c <HAL_ADC_ConvCpltCallback+0x68>


	} else if (adc_value[0] < 700 && adc_value[0] > 450) {
 80001fc:	4b5b      	ldr	r3, [pc, #364]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000204:	d204      	bcs.n	8000210 <HAL_ADC_ConvCpltCallback+0x3c>
 8000206:	4b59      	ldr	r3, [pc, #356]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800020e:	d815      	bhi.n	800023c <HAL_ADC_ConvCpltCallback+0x68>

	} else if (adc_value[0] < 1100 && adc_value[0] > 750 && duty[0] < 100) {
 8000210:	4b56      	ldr	r3, [pc, #344]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	f240 424b 	movw	r2, #1099	; 0x44b
 8000218:	4293      	cmp	r3, r2
 800021a:	d80f      	bhi.n	800023c <HAL_ADC_ConvCpltCallback+0x68>
 800021c:	4b53      	ldr	r3, [pc, #332]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000224:	4293      	cmp	r3, r2
 8000226:	d909      	bls.n	800023c <HAL_ADC_ConvCpltCallback+0x68>
 8000228:	4b51      	ldr	r3, [pc, #324]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	2b63      	cmp	r3, #99	; 0x63
 800022e:	d805      	bhi.n	800023c <HAL_ADC_ConvCpltCallback+0x68>
		duty[0]++;
 8000230:	4b4f      	ldr	r3, [pc, #316]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	3301      	adds	r3, #1
 8000236:	b29a      	uxth	r2, r3
 8000238:	4b4d      	ldr	r3, [pc, #308]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 800023a:	801a      	strh	r2, [r3, #0]

	}
	if (adc_value[1] < 400 && adc_value[1] >= 0 && duty[1] > 20) {
 800023c:	4b4b      	ldr	r3, [pc, #300]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 800023e:	885b      	ldrh	r3, [r3, #2]
 8000240:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000244:	d20a      	bcs.n	800025c <HAL_ADC_ConvCpltCallback+0x88>
 8000246:	4b4a      	ldr	r3, [pc, #296]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000248:	885b      	ldrh	r3, [r3, #2]
 800024a:	2b14      	cmp	r3, #20
 800024c:	d906      	bls.n	800025c <HAL_ADC_ConvCpltCallback+0x88>
		duty[1]--;
 800024e:	4b48      	ldr	r3, [pc, #288]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000250:	885b      	ldrh	r3, [r3, #2]
 8000252:	3b01      	subs	r3, #1
 8000254:	b29a      	uxth	r2, r3
 8000256:	4b46      	ldr	r3, [pc, #280]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000258:	805a      	strh	r2, [r3, #2]
 800025a:	e01f      	b.n	800029c <HAL_ADC_ConvCpltCallback+0xc8>


	} else if (adc_value[1] < 700 && adc_value[1] > 450) {
 800025c:	4b43      	ldr	r3, [pc, #268]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 800025e:	885b      	ldrh	r3, [r3, #2]
 8000260:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000264:	d204      	bcs.n	8000270 <HAL_ADC_ConvCpltCallback+0x9c>
 8000266:	4b41      	ldr	r3, [pc, #260]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 8000268:	885b      	ldrh	r3, [r3, #2]
 800026a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800026e:	d815      	bhi.n	800029c <HAL_ADC_ConvCpltCallback+0xc8>

	} else if (adc_value[1] < 1100 && adc_value[1] > 750 && duty[1] < 100) {
 8000270:	4b3e      	ldr	r3, [pc, #248]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 8000272:	885b      	ldrh	r3, [r3, #2]
 8000274:	f240 424b 	movw	r2, #1099	; 0x44b
 8000278:	4293      	cmp	r3, r2
 800027a:	d80f      	bhi.n	800029c <HAL_ADC_ConvCpltCallback+0xc8>
 800027c:	4b3b      	ldr	r3, [pc, #236]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 800027e:	885b      	ldrh	r3, [r3, #2]
 8000280:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000284:	4293      	cmp	r3, r2
 8000286:	d909      	bls.n	800029c <HAL_ADC_ConvCpltCallback+0xc8>
 8000288:	4b39      	ldr	r3, [pc, #228]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 800028a:	885b      	ldrh	r3, [r3, #2]
 800028c:	2b63      	cmp	r3, #99	; 0x63
 800028e:	d805      	bhi.n	800029c <HAL_ADC_ConvCpltCallback+0xc8>
		duty[1]++;
 8000290:	4b37      	ldr	r3, [pc, #220]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000292:	885b      	ldrh	r3, [r3, #2]
 8000294:	3301      	adds	r3, #1
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b35      	ldr	r3, [pc, #212]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 800029a:	805a      	strh	r2, [r3, #2]

	}
	if (adc_value[2] < 400 && adc_value[2] >= 0 && duty[2] > 20) {
 800029c:	4b33      	ldr	r3, [pc, #204]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 800029e:	889b      	ldrh	r3, [r3, #4]
 80002a0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80002a4:	d20a      	bcs.n	80002bc <HAL_ADC_ConvCpltCallback+0xe8>
 80002a6:	4b32      	ldr	r3, [pc, #200]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80002a8:	889b      	ldrh	r3, [r3, #4]
 80002aa:	2b14      	cmp	r3, #20
 80002ac:	d906      	bls.n	80002bc <HAL_ADC_ConvCpltCallback+0xe8>
		duty[2]--;
 80002ae:	4b30      	ldr	r3, [pc, #192]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80002b0:	889b      	ldrh	r3, [r3, #4]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	4b2e      	ldr	r3, [pc, #184]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80002b8:	809a      	strh	r2, [r3, #4]
 80002ba:	e01f      	b.n	80002fc <HAL_ADC_ConvCpltCallback+0x128>


	} else if (adc_value[2] < 700 && adc_value[2] > 450) {
 80002bc:	4b2b      	ldr	r3, [pc, #172]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 80002be:	889b      	ldrh	r3, [r3, #4]
 80002c0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80002c4:	d204      	bcs.n	80002d0 <HAL_ADC_ConvCpltCallback+0xfc>
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 80002c8:	889b      	ldrh	r3, [r3, #4]
 80002ca:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80002ce:	d815      	bhi.n	80002fc <HAL_ADC_ConvCpltCallback+0x128>

	} else if (adc_value[2] < 1100 && adc_value[2] > 750 && duty[2] < 100) {
 80002d0:	4b26      	ldr	r3, [pc, #152]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 80002d2:	889b      	ldrh	r3, [r3, #4]
 80002d4:	f240 424b 	movw	r2, #1099	; 0x44b
 80002d8:	4293      	cmp	r3, r2
 80002da:	d80f      	bhi.n	80002fc <HAL_ADC_ConvCpltCallback+0x128>
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 80002de:	889b      	ldrh	r3, [r3, #4]
 80002e0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d909      	bls.n	80002fc <HAL_ADC_ConvCpltCallback+0x128>
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80002ea:	889b      	ldrh	r3, [r3, #4]
 80002ec:	2b63      	cmp	r3, #99	; 0x63
 80002ee:	d805      	bhi.n	80002fc <HAL_ADC_ConvCpltCallback+0x128>
		duty[2]++;
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80002f2:	889b      	ldrh	r3, [r3, #4]
 80002f4:	3301      	adds	r3, #1
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 80002fa:	809a      	strh	r2, [r3, #4]

	}
	if (adc_value[3] < 400 && adc_value[3] >= 0 && duty[3] > 20) {
 80002fc:	4b1b      	ldr	r3, [pc, #108]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 80002fe:	88db      	ldrh	r3, [r3, #6]
 8000300:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000304:	d20a      	bcs.n	800031c <HAL_ADC_ConvCpltCallback+0x148>
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000308:	88db      	ldrh	r3, [r3, #6]
 800030a:	2b14      	cmp	r3, #20
 800030c:	d906      	bls.n	800031c <HAL_ADC_ConvCpltCallback+0x148>
		duty[3]--;
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000310:	88db      	ldrh	r3, [r3, #6]
 8000312:	3b01      	subs	r3, #1
 8000314:	b29a      	uxth	r2, r3
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000318:	80da      	strh	r2, [r3, #6]
 800031a:	e020      	b.n	800035e <HAL_ADC_ConvCpltCallback+0x18a>


	} else if (adc_value[3] < 700 && adc_value[3] > 450) {
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 800031e:	88db      	ldrh	r3, [r3, #6]
 8000320:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000324:	d204      	bcs.n	8000330 <HAL_ADC_ConvCpltCallback+0x15c>
 8000326:	4b11      	ldr	r3, [pc, #68]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 8000328:	88db      	ldrh	r3, [r3, #6]
 800032a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800032e:	d816      	bhi.n	800035e <HAL_ADC_ConvCpltCallback+0x18a>

	} else if (adc_value[3] < 1100 && adc_value[3] > 750 && duty[3] < 100) {
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 8000332:	88db      	ldrh	r3, [r3, #6]
 8000334:	f240 424b 	movw	r2, #1099	; 0x44b
 8000338:	4293      	cmp	r3, r2
 800033a:	d810      	bhi.n	800035e <HAL_ADC_ConvCpltCallback+0x18a>
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <HAL_ADC_ConvCpltCallback+0x198>)
 800033e:	88db      	ldrh	r3, [r3, #6]
 8000340:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000344:	4293      	cmp	r3, r2
 8000346:	d90a      	bls.n	800035e <HAL_ADC_ConvCpltCallback+0x18a>
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 800034a:	88db      	ldrh	r3, [r3, #6]
 800034c:	2b63      	cmp	r3, #99	; 0x63
 800034e:	d806      	bhi.n	800035e <HAL_ADC_ConvCpltCallback+0x18a>
		duty[3]++;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000352:	88db      	ldrh	r3, [r3, #6]
 8000354:	3301      	adds	r3, #1
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_ADC_ConvCpltCallback+0x19c>)
 800035a:	80da      	strh	r2, [r3, #6]

	}

}
 800035c:	e7ff      	b.n	800035e <HAL_ADC_ConvCpltCallback+0x18a>
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000080 	.word	0x20000080
 8000370:	20000000 	.word	0x20000000

08000374 <Duty_value>:

void Duty_value(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	htim2.Instance->CCR1 = duty[0];
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <Duty_value+0x38>)
 800037a:	881a      	ldrh	r2, [r3, #0]
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <Duty_value+0x3c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	635a      	str	r2, [r3, #52]	; 0x34

	htim2.Instance->CCR2 = duty[1];
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <Duty_value+0x38>)
 8000384:	885a      	ldrh	r2, [r3, #2]
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <Duty_value+0x3c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	639a      	str	r2, [r3, #56]	; 0x38

	htim2.Instance->CCR3 = duty[2];
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <Duty_value+0x38>)
 800038e:	889a      	ldrh	r2, [r3, #4]
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <Duty_value+0x3c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	63da      	str	r2, [r3, #60]	; 0x3c

	htim2.Instance->CCR4 = duty[3];
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <Duty_value+0x38>)
 8000398:	88da      	ldrh	r2, [r3, #6]
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <Duty_value+0x3c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	641a      	str	r2, [r3, #64]	; 0x40

	}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000000 	.word	0x20000000
 80003b0:	2000008c 	.word	0x2000008c

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 fbdc 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f82a 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 f9c6 	bl	8000750 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c4:	f000 f9a6 	bl	8000714 <MX_DMA_Init>
  MX_TIM2_Init();
 80003c8:	f000 f90c 	bl	80005e4 <MX_TIM2_Init>
  MX_ADC2_Init();
 80003cc:	f000 f882 	bl	80004d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003d0:	2100      	movs	r1, #0
 80003d2:	480d      	ldr	r0, [pc, #52]	; (8000408 <main+0x54>)
 80003d4:	f003 fb70 	bl	8003ab8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003d8:	2104      	movs	r1, #4
 80003da:	480b      	ldr	r0, [pc, #44]	; (8000408 <main+0x54>)
 80003dc:	f003 fb6c 	bl	8003ab8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80003e0:	2108      	movs	r1, #8
 80003e2:	4809      	ldr	r0, [pc, #36]	; (8000408 <main+0x54>)
 80003e4:	f003 fb68 	bl	8003ab8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80003e8:	210c      	movs	r1, #12
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <main+0x54>)
 80003ec:	f003 fb64 	bl	8003ab8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_value, 4);
 80003f0:	2204      	movs	r2, #4
 80003f2:	4906      	ldr	r1, [pc, #24]	; (800040c <main+0x58>)
 80003f4:	4806      	ldr	r0, [pc, #24]	; (8000410 <main+0x5c>)
 80003f6:	f000 fe53 	bl	80010a0 <HAL_ADC_Start_DMA>
	 HAL_Delay(3000);	*/

 	 /* Min açı = 28 */
 	 /* Max açı = 100 */

	  Duty_value();
 80003fa:	f7ff ffbb 	bl	8000374 <Duty_value>
	  HAL_Delay(100);
 80003fe:	2064      	movs	r0, #100	; 0x64
 8000400:	f000 fc1e 	bl	8000c40 <HAL_Delay>
	  Duty_value();
 8000404:	e7f9      	b.n	80003fa <main+0x46>
 8000406:	bf00      	nop
 8000408:	2000008c 	.word	0x2000008c
 800040c:	20000080 	.word	0x20000080
 8000410:	20000030 	.word	0x20000030

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b0a6      	sub	sp, #152	; 0x98
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800041e:	2228      	movs	r2, #40	; 0x28
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f004 fa8e 	bl	8004944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000428:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2258      	movs	r2, #88	; 0x58
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f004 fa80 	bl	8004944 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000444:	2302      	movs	r3, #2
 8000446:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000448:	2301      	movs	r3, #1
 800044a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044c:	2310      	movs	r3, #16
 800044e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800045c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000460:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000472:	4618      	mov	r0, r3
 8000474:	f001 ffa6 	bl	80023c4 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800047e:	f000 f9df 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	230f      	movs	r3, #15
 8000484:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000486:	2302      	movs	r3, #2
 8000488:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000492:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000498:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800049c:	2102      	movs	r1, #2
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fea6 	bl	80031f0 <HAL_RCC_ClockConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004aa:	f000 f9c9 	bl	8000840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 80004ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 f87e 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004c6:	f000 f9bb 	bl	8000840 <Error_Handler>
  }
}
 80004ca:	bf00      	nop
 80004cc:	3798      	adds	r7, #152	; 0x98
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80004ea:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <MX_ADC2_Init+0x108>)
 80004ec:	4a3c      	ldr	r2, [pc, #240]	; (80005e0 <MX_ADC2_Init+0x10c>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f0:	4b3a      	ldr	r3, [pc, #232]	; (80005dc <MX_ADC2_Init+0x108>)
 80004f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004f6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80004f8:	4b38      	ldr	r3, [pc, #224]	; (80005dc <MX_ADC2_Init+0x108>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004fe:	4b37      	ldr	r3, [pc, #220]	; (80005dc <MX_ADC2_Init+0x108>)
 8000500:	2201      	movs	r2, #1
 8000502:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000504:	4b35      	ldr	r3, [pc, #212]	; (80005dc <MX_ADC2_Init+0x108>)
 8000506:	2201      	movs	r2, #1
 8000508:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b34      	ldr	r3, [pc, #208]	; (80005dc <MX_ADC2_Init+0x108>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <MX_ADC2_Init+0x108>)
 8000514:	2200      	movs	r2, #0
 8000516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <MX_ADC2_Init+0x108>)
 800051a:	2201      	movs	r2, #1
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051e:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <MX_ADC2_Init+0x108>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_ADC2_Init+0x108>)
 8000526:	2204      	movs	r2, #4
 8000528:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <MX_ADC2_Init+0x108>)
 800052c:	2201      	movs	r2, #1
 800052e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000532:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_ADC2_Init+0x108>)
 8000534:	2204      	movs	r2, #4
 8000536:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <MX_ADC2_Init+0x108>)
 800053a:	2200      	movs	r2, #0
 800053c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <MX_ADC2_Init+0x108>)
 8000540:	2200      	movs	r2, #0
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000544:	4825      	ldr	r0, [pc, #148]	; (80005dc <MX_ADC2_Init+0x108>)
 8000546:	f000 fbb1 	bl	8000cac <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000550:	f000 f976 	bl	8000840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000554:	2303      	movs	r3, #3
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000558:	2301      	movs	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000560:	2306      	movs	r3, #6
 8000562:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800056c:	463b      	mov	r3, r7
 800056e:	4619      	mov	r1, r3
 8000570:	481a      	ldr	r0, [pc, #104]	; (80005dc <MX_ADC2_Init+0x108>)
 8000572:	f000 feb1 	bl	80012d8 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800057c:	f000 f960 	bl	8000840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000580:	2304      	movs	r3, #4
 8000582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000584:	2302      	movs	r3, #2
 8000586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	4619      	mov	r1, r3
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_ADC2_Init+0x108>)
 800058e:	f000 fea3 	bl	80012d8 <HAL_ADC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000598:	f000 f952 	bl	8000840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800059c:	2305      	movs	r3, #5
 800059e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_ADC2_Init+0x108>)
 80005aa:	f000 fe95 	bl	80012d8 <HAL_ADC_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80005b4:	f000 f944 	bl	8000840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005b8:	2306      	movs	r3, #6
 80005ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005bc:	2304      	movs	r3, #4
 80005be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_ADC2_Init+0x108>)
 80005c6:	f000 fe87 	bl	80012d8 <HAL_ADC_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80005d0:	f000 f936 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000030 	.word	0x20000030
 80005e0:	50000100 	.word	0x50000100

080005e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08e      	sub	sp, #56	; 0x38
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000616:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <MX_TIM2_Init+0x12c>)
 8000618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 800061e:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <MX_TIM2_Init+0x12c>)
 8000620:	f240 529f 	movw	r2, #1439	; 0x59f
 8000624:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <MX_TIM2_Init+0x12c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800062c:	4b38      	ldr	r3, [pc, #224]	; (8000710 <MX_TIM2_Init+0x12c>)
 800062e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000634:	4b36      	ldr	r3, [pc, #216]	; (8000710 <MX_TIM2_Init+0x12c>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <MX_TIM2_Init+0x12c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000640:	4833      	ldr	r0, [pc, #204]	; (8000710 <MX_TIM2_Init+0x12c>)
 8000642:	f003 f9d9 	bl	80039f8 <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800064c:	f000 f8f8 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065a:	4619      	mov	r1, r3
 800065c:	482c      	ldr	r0, [pc, #176]	; (8000710 <MX_TIM2_Init+0x12c>)
 800065e:	f003 fba3 	bl	8003da8 <HAL_TIM_ConfigClockSource>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000668:	f000 f8ea 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800066c:	4828      	ldr	r0, [pc, #160]	; (8000710 <MX_TIM2_Init+0x12c>)
 800066e:	f003 f9ee 	bl	8003a4e <HAL_TIM_PWM_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 f8e2 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4821      	ldr	r0, [pc, #132]	; (8000710 <MX_TIM2_Init+0x12c>)
 800068c:	f004 f8aa 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000696:	f000 f8d3 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069a:	2360      	movs	r3, #96	; 0x60
 800069c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	4619      	mov	r1, r3
 80006b0:	4817      	ldr	r0, [pc, #92]	; (8000710 <MX_TIM2_Init+0x12c>)
 80006b2:	f003 fa61 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80006bc:	f000 f8c0 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	2204      	movs	r2, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <MX_TIM2_Init+0x12c>)
 80006c8:	f003 fa56 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80006d2:	f000 f8b5 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	2208      	movs	r2, #8
 80006da:	4619      	mov	r1, r3
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <MX_TIM2_Init+0x12c>)
 80006de:	f003 fa4b 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80006e8:	f000 f8aa 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	220c      	movs	r2, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <MX_TIM2_Init+0x12c>)
 80006f4:	f003 fa40 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80006fe:	f000 f89f 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000702:	4803      	ldr	r0, [pc, #12]	; (8000710 <MX_TIM2_Init+0x12c>)
 8000704:	f000 f96a 	bl	80009dc <HAL_TIM_MspPostInit>

}
 8000708:	bf00      	nop
 800070a:	3738      	adds	r7, #56	; 0x38
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000008c 	.word	0x2000008c

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_DMA_Init+0x38>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <MX_DMA_Init+0x38>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_DMA_Init+0x38>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2038      	movs	r0, #56	; 0x38
 8000738:	f001 fab9 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800073c:	2038      	movs	r0, #56	; 0x38
 800073e:	f001 fad2 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b33      	ldr	r3, [pc, #204]	; (8000834 <MX_GPIO_Init+0xe4>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a32      	ldr	r2, [pc, #200]	; (8000834 <MX_GPIO_Init+0xe4>)
 800076c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b30      	ldr	r3, [pc, #192]	; (8000834 <MX_GPIO_Init+0xe4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_GPIO_Init+0xe4>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <MX_GPIO_Init+0xe4>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_GPIO_Init+0xe4>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_GPIO_Init+0xe4>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a26      	ldr	r2, [pc, #152]	; (8000834 <MX_GPIO_Init+0xe4>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_GPIO_Init+0xe4>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0xe4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <MX_GPIO_Init+0xe4>)
 80007b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_GPIO_Init+0xe4>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f001 fde1 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0xe8>)
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4815      	ldr	r0, [pc, #84]	; (800083c <MX_GPIO_Init+0xec>)
 80007e8:	f001 fc4a 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ec:	230c      	movs	r3, #12
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fc:	2307      	movs	r3, #7
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f001 fc39 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f001 fc2a 	bl	8002080 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	10210000 	.word	0x10210000
 800083c:	48000800 	.word	0x48000800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000886:	2007      	movs	r0, #7
 8000888:	f001 fa06 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a35      	ldr	r2, [pc, #212]	; (800098c <HAL_ADC_MspInit+0xf4>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d164      	bne.n	8000984 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ba:	4b35      	ldr	r3, [pc, #212]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a34      	ldr	r2, [pc, #208]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b32      	ldr	r3, [pc, #200]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a2e      	ldr	r2, [pc, #184]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a28      	ldr	r2, [pc, #160]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <HAL_ADC_MspInit+0xf8>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000902:	2311      	movs	r3, #17
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	2303      	movs	r3, #3
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	481f      	ldr	r0, [pc, #124]	; (8000994 <HAL_ADC_MspInit+0xfc>)
 8000916:	f001 fbb3 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800091a:	23c0      	movs	r3, #192	; 0xc0
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091e:	2303      	movs	r3, #3
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f001 fba6 	bl	8002080 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_ADC_MspInit+0x100>)
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_ADC_MspInit+0x104>)
 8000938:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_ADC_MspInit+0x100>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_ADC_MspInit+0x100>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_ADC_MspInit+0x100>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_ADC_MspInit+0x100>)
 800094e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000952:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_ADC_MspInit+0x100>)
 8000956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800095a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_ADC_MspInit+0x100>)
 800095e:	2220      	movs	r2, #32
 8000960:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_ADC_MspInit+0x100>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <HAL_ADC_MspInit+0x100>)
 800096a:	f001 f9d6 	bl	8001d1a <HAL_DMA_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000974:	f7ff ff64 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_ADC_MspInit+0x100>)
 800097c:	639a      	str	r2, [r3, #56]	; 0x38
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_ADC_MspInit+0x100>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	50000100 	.word	0x50000100
 8000990:	40021000 	.word	0x40021000
 8000994:	48000800 	.word	0x48000800
 8000998:	200000cc 	.word	0x200000cc
 800099c:	40020408 	.word	0x40020408

080009a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b0:	d10b      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_TIM_Base_MspInit+0x38>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_TIM_Base_MspInit+0x38>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_TIM_Base_MspInit+0x38>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fc:	d139      	bne.n	8000a72 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_TIM_MspPostInit+0xa0>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_TIM_MspPostInit+0xa0>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_TIM_MspPostInit+0xa0>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_TIM_MspPostInit+0xa0>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <HAL_TIM_MspPostInit+0xa0>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_TIM_MspPostInit+0xa0>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f001 fb18 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a62:	2301      	movs	r3, #1
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <HAL_TIM_MspPostInit+0xa4>)
 8000a6e:	f001 fb07 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f892 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <DMA2_Channel1_IRQHandler+0x10>)
 8000ae6:	f001 f9be 	bl	8001e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000cc 	.word	0x200000cc

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <SystemInit+0x28>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <SystemInit+0x28>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SystemInit+0x28>)
 8000b0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b26:	e003      	b.n	8000b30 <LoopCopyDataInit>

08000b28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b2e:	3104      	adds	r1, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b38:	d3f6      	bcc.n	8000b28 <CopyDataInit>
	ldr	r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b3c:	e002      	b.n	8000b44 <LoopFillZerobss>

08000b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b40:	f842 3b04 	str.w	r3, [r2], #4

08000b44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <LoopForever+0x16>)
	cmp	r2, r3
 8000b46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b48:	d3f9      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b4a:	f7ff ffd3 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f003 fed5 	bl	80048fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f7ff fc2f 	bl	80003b4 <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b58:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b5c:	080049a4 	.word	0x080049a4
	ldr	r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b64:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000b68:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000b6c:	20000114 	.word	0x20000114

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x28>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x28>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f001 f887 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fe5e 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f89f 	bl	8001d02 <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f001 f867 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000010 	.word	0x20000010
 8000bfc:	2000000c 	.word	0x2000000c

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000010 	.word	0x20000010
 8000c24:	20000110 	.word	0x20000110

08000c28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000110 	.word	0x20000110

08000c40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_Delay+0x40>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000010 	.word	0x20000010

08000c84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09a      	sub	sp, #104	; 0x68
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e1e3      	b.n	8001094 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d176      	bne.n	8000dcc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d152      	bne.n	8000d8c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fdc9 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13b      	bne.n	8000d8c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 fe8f 	bl	8001a38 <ADC_Disable>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d12f      	bne.n	8000d8c <HAL_ADC_Init+0xe0>
 8000d2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d12b      	bne.n	8000d8c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d3c:	f023 0302 	bic.w	r3, r3, #2
 8000d40:	f043 0202 	orr.w	r2, r3, #2
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d56:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d66:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d68:	4b92      	ldr	r3, [pc, #584]	; (8000fb4 <HAL_ADC_Init+0x308>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a92      	ldr	r2, [pc, #584]	; (8000fb8 <HAL_ADC_Init+0x30c>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0c9a      	lsrs	r2, r3, #18
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d7e:	e002      	b.n	8000d86 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f9      	bne.n	8000d80 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000da8:	d110      	bne.n	8000dcc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f023 0312 	bic.w	r3, r3, #18
 8000db2:	f043 0210 	orr.w	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f040 8150 	bne.w	800107a <HAL_ADC_Init+0x3ce>
 8000dda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 814b 	bne.w	800107a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8143 	bne.w	800107a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000dfc:	f043 0202 	orr.w	r2, r3, #2
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e0c:	d004      	beq.n	8000e18 <HAL_ADC_Init+0x16c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a6a      	ldr	r2, [pc, #424]	; (8000fbc <HAL_ADC_Init+0x310>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d101      	bne.n	8000e1c <HAL_ADC_Init+0x170>
 8000e18:	4b69      	ldr	r3, [pc, #420]	; (8000fc0 <HAL_ADC_Init+0x314>)
 8000e1a:	e000      	b.n	8000e1e <HAL_ADC_Init+0x172>
 8000e1c:	4b69      	ldr	r3, [pc, #420]	; (8000fc4 <HAL_ADC_Init+0x318>)
 8000e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e28:	d102      	bne.n	8000e30 <HAL_ADC_Init+0x184>
 8000e2a:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <HAL_ADC_Init+0x310>)
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	e01a      	b.n	8000e66 <HAL_ADC_Init+0x1ba>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a61      	ldr	r2, [pc, #388]	; (8000fbc <HAL_ADC_Init+0x310>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d103      	bne.n	8000e42 <HAL_ADC_Init+0x196>
 8000e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e011      	b.n	8000e66 <HAL_ADC_Init+0x1ba>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a60      	ldr	r2, [pc, #384]	; (8000fc8 <HAL_ADC_Init+0x31c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <HAL_ADC_Init+0x1a6>
 8000e4c:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <HAL_ADC_Init+0x320>)
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e009      	b.n	8000e66 <HAL_ADC_Init+0x1ba>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a5d      	ldr	r2, [pc, #372]	; (8000fcc <HAL_ADC_Init+0x320>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d102      	bne.n	8000e62 <HAL_ADC_Init+0x1b6>
 8000e5c:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <HAL_ADC_Init+0x31c>)
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e001      	b.n	8000e66 <HAL_ADC_Init+0x1ba>
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d108      	bne.n	8000e86 <HAL_ADC_Init+0x1da>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_ADC_Init+0x1da>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_ADC_Init+0x1dc>
 8000e86:	2300      	movs	r3, #0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d11c      	bne.n	8000ec6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d010      	beq.n	8000eb4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d107      	bne.n	8000eae <HAL_ADC_Init+0x202>
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_Init+0x202>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_ADC_Init+0x204>
 8000eae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d108      	bne.n	8000ec6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ec4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7e5b      	ldrb	r3, [r3, #25]
 8000eca:	035b      	lsls	r3, r3, #13
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ed0:	2a01      	cmp	r2, #1
 8000ed2:	d002      	beq.n	8000eda <HAL_ADC_Init+0x22e>
 8000ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed8:	e000      	b.n	8000edc <HAL_ADC_Init+0x230>
 8000eda:	2200      	movs	r2, #0
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eec:	4313      	orrs	r3, r2
 8000eee:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d11b      	bne.n	8000f32 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7e5b      	ldrb	r3, [r3, #25]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	3b01      	subs	r3, #1
 8000f08:	045a      	lsls	r2, r3, #17
 8000f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f12:	663b      	str	r3, [r7, #96]	; 0x60
 8000f14:	e00d      	b.n	8000f32 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000f1e:	f043 0220 	orr.w	r2, r3, #32
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f043 0201 	orr.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d054      	beq.n	8000fe4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <HAL_ADC_Init+0x31c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d004      	beq.n	8000f4e <HAL_ADC_Init+0x2a2>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <HAL_ADC_Init+0x320>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d140      	bne.n	8000fd0 <HAL_ADC_Init+0x324>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000f56:	d02a      	beq.n	8000fae <HAL_ADC_Init+0x302>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f60:	d022      	beq.n	8000fa8 <HAL_ADC_Init+0x2fc>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000f6a:	d01a      	beq.n	8000fa2 <HAL_ADC_Init+0x2f6>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000f74:	d012      	beq.n	8000f9c <HAL_ADC_Init+0x2f0>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000f7e:	d00a      	beq.n	8000f96 <HAL_ADC_Init+0x2ea>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000f88:	d002      	beq.n	8000f90 <HAL_ADC_Init+0x2e4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	e023      	b.n	8000fd8 <HAL_ADC_Init+0x32c>
 8000f90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f94:	e020      	b.n	8000fd8 <HAL_ADC_Init+0x32c>
 8000f96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f9a:	e01d      	b.n	8000fd8 <HAL_ADC_Init+0x32c>
 8000f9c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fa0:	e01a      	b.n	8000fd8 <HAL_ADC_Init+0x32c>
 8000fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa6:	e017      	b.n	8000fd8 <HAL_ADC_Init+0x32c>
 8000fa8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000fac:	e014      	b.n	8000fd8 <HAL_ADC_Init+0x32c>
 8000fae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000fb2:	e011      	b.n	8000fd8 <HAL_ADC_Init+0x32c>
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	50000100 	.word	0x50000100
 8000fc0:	50000300 	.word	0x50000300
 8000fc4:	50000700 	.word	0x50000700
 8000fc8:	50000400 	.word	0x50000400
 8000fcc:	50000500 	.word	0x50000500
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d114      	bne.n	800101c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001000:	f023 0302 	bic.w	r3, r3, #2
 8001004:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7e1b      	ldrb	r3, [r3, #24]
 800100a:	039a      	lsls	r2, r3, #14
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4313      	orrs	r3, r2
 8001016:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001018:	4313      	orrs	r3, r2
 800101a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_ADC_Init+0x3f0>)
 8001024:	4013      	ands	r3, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800102c:	430b      	orrs	r3, r1
 800102e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d10c      	bne.n	8001052 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f023 010f 	bic.w	r1, r3, #15
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	631a      	str	r2, [r3, #48]	; 0x30
 8001050:	e007      	b.n	8001062 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 020f 	bic.w	r2, r2, #15
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f023 0303 	bic.w	r3, r3, #3
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	641a      	str	r2, [r3, #64]	; 0x40
 8001078:	e00a      	b.n	8001090 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f023 0312 	bic.w	r3, r3, #18
 8001082:	f043 0210 	orr.w	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800108a:	2301      	movs	r3, #1
 800108c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001090:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001094:	4618      	mov	r0, r3
 8001096:	3768      	adds	r7, #104	; 0x68
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	fff0c007 	.word	0xfff0c007

080010a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80f7 	bne.w	80012ae <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Start_DMA+0x2e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e0f2      	b.n	80012b4 <HAL_ADC_Start_DMA+0x214>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010de:	d004      	beq.n	80010ea <HAL_ADC_Start_DMA+0x4a>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a75      	ldr	r2, [pc, #468]	; (80012bc <HAL_ADC_Start_DMA+0x21c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d109      	bne.n	80010fe <HAL_ADC_Start_DMA+0x5e>
 80010ea:	4b75      	ldr	r3, [pc, #468]	; (80012c0 <HAL_ADC_Start_DMA+0x220>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	e008      	b.n	8001110 <HAL_ADC_Start_DMA+0x70>
 80010fe:	4b71      	ldr	r3, [pc, #452]	; (80012c4 <HAL_ADC_Start_DMA+0x224>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf0c      	ite	eq
 800110a:	2301      	moveq	r3, #1
 800110c:	2300      	movne	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80c5 	beq.w	80012a0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 fc30 	bl	800197c <ADC_Enable>
 800111c:	4603      	mov	r3, r0
 800111e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 80b7 	bne.w	8001296 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001144:	d004      	beq.n	8001150 <HAL_ADC_Start_DMA+0xb0>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a5c      	ldr	r2, [pc, #368]	; (80012bc <HAL_ADC_Start_DMA+0x21c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d106      	bne.n	800115e <HAL_ADC_Start_DMA+0xbe>
 8001150:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <HAL_ADC_Start_DMA+0x220>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2b00      	cmp	r3, #0
 800115a:	d010      	beq.n	800117e <HAL_ADC_Start_DMA+0xde>
 800115c:	e005      	b.n	800116a <HAL_ADC_Start_DMA+0xca>
 800115e:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <HAL_ADC_Start_DMA+0x224>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d009      	beq.n	800117e <HAL_ADC_Start_DMA+0xde>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001172:	d004      	beq.n	800117e <HAL_ADC_Start_DMA+0xde>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a53      	ldr	r2, [pc, #332]	; (80012c8 <HAL_ADC_Start_DMA+0x228>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d115      	bne.n	80011aa <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d036      	beq.n	8001206 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011a8:	e02d      	b.n	8001206 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011be:	d004      	beq.n	80011ca <HAL_ADC_Start_DMA+0x12a>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <HAL_ADC_Start_DMA+0x21c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10a      	bne.n	80011e0 <HAL_ADC_Start_DMA+0x140>
 80011ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf14      	ite	ne
 80011d8:	2301      	movne	r3, #1
 80011da:	2300      	moveq	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	e008      	b.n	80011f2 <HAL_ADC_Start_DMA+0x152>
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <HAL_ADC_Start_DMA+0x228>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001212:	d106      	bne.n	8001222 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f023 0206 	bic.w	r2, r3, #6
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	645a      	str	r2, [r3, #68]	; 0x44
 8001220:	e002      	b.n	8001228 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	4a25      	ldr	r2, [pc, #148]	; (80012cc <HAL_ADC_Start_DMA+0x22c>)
 8001236:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <HAL_ADC_Start_DMA+0x230>)
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <HAL_ADC_Start_DMA+0x234>)
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	221c      	movs	r2, #28
 800124e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3340      	adds	r3, #64	; 0x40
 800127a:	4619      	mov	r1, r3
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f000 fd92 	bl	8001da8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0204 	orr.w	r2, r2, #4
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	e00d      	b.n	80012b2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800129e:	e008      	b.n	80012b2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80012ac:	e001      	b.n	80012b2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012ae:	2302      	movs	r3, #2
 80012b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	50000100 	.word	0x50000100
 80012c0:	50000300 	.word	0x50000300
 80012c4:	50000700 	.word	0x50000700
 80012c8:	50000400 	.word	0x50000400
 80012cc:	080018b1 	.word	0x080018b1
 80012d0:	0800192b 	.word	0x0800192b
 80012d4:	08001947 	.word	0x08001947

080012d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b480      	push	{r7}
 80012da:	b09b      	sub	sp, #108	; 0x6c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_ConfigChannel+0x22>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e2cb      	b.n	8001892 <HAL_ADC_ConfigChannel+0x5ba>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	f040 82af 	bne.w	8001870 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b04      	cmp	r3, #4
 8001318:	d81c      	bhi.n	8001354 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	461a      	mov	r2, r3
 800132e:	231f      	movs	r3, #31
 8001330:	4093      	lsls	r3, r2
 8001332:	43db      	mvns	r3, r3
 8001334:	4019      	ands	r1, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
 8001352:	e063      	b.n	800141c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d81e      	bhi.n	800139a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	3b1e      	subs	r3, #30
 8001370:	221f      	movs	r2, #31
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	4019      	ands	r1, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	3b1e      	subs	r3, #30
 800138c:	fa00 f203 	lsl.w	r2, r0, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	635a      	str	r2, [r3, #52]	; 0x34
 8001398:	e040      	b.n	800141c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b0e      	cmp	r3, #14
 80013a0:	d81e      	bhi.n	80013e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	3b3c      	subs	r3, #60	; 0x3c
 80013b6:	221f      	movs	r2, #31
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	4019      	ands	r1, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	3b3c      	subs	r3, #60	; 0x3c
 80013d2:	fa00 f203 	lsl.w	r2, r0, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	639a      	str	r2, [r3, #56]	; 0x38
 80013de:	e01d      	b.n	800141c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	3b5a      	subs	r3, #90	; 0x5a
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4019      	ands	r1, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3b5a      	subs	r3, #90	; 0x5a
 8001410:	fa00 f203 	lsl.w	r2, r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80e5 	bne.w	80015f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d91c      	bls.n	800146e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6999      	ldr	r1, [r3, #24]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	3b1e      	subs	r3, #30
 8001446:	2207      	movs	r2, #7
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	4019      	ands	r1, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6898      	ldr	r0, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	3b1e      	subs	r3, #30
 8001460:	fa00 f203 	lsl.w	r2, r0, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	e019      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6959      	ldr	r1, [r3, #20]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	2207      	movs	r2, #7
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	4019      	ands	r1, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	6898      	ldr	r0, [r3, #8]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	3b01      	subs	r3, #1
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d84f      	bhi.n	8001564 <HAL_ADC_ConfigChannel+0x28c>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <HAL_ADC_ConfigChannel+0x1f4>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014ff 	.word	0x080014ff
 80014d4:	08001521 	.word	0x08001521
 80014d8:	08001543 	.word	0x08001543
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e2:	4b9f      	ldr	r3, [pc, #636]	; (8001760 <HAL_ADC_ConfigChannel+0x488>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	0691      	lsls	r1, r2, #26
 80014ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ee:	430a      	orrs	r2, r1
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014fc:	e07e      	b.n	80015fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001504:	4b96      	ldr	r3, [pc, #600]	; (8001760 <HAL_ADC_ConfigChannel+0x488>)
 8001506:	4013      	ands	r3, r2
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	0691      	lsls	r1, r2, #26
 800150e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001510:	430a      	orrs	r2, r1
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800151c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800151e:	e06d      	b.n	80015fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001526:	4b8e      	ldr	r3, [pc, #568]	; (8001760 <HAL_ADC_ConfigChannel+0x488>)
 8001528:	4013      	ands	r3, r2
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	0691      	lsls	r1, r2, #26
 8001530:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001532:	430a      	orrs	r2, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800153e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001540:	e05c      	b.n	80015fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001548:	4b85      	ldr	r3, [pc, #532]	; (8001760 <HAL_ADC_ConfigChannel+0x488>)
 800154a:	4013      	ands	r3, r2
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	0691      	lsls	r1, r2, #26
 8001552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001554:	430a      	orrs	r2, r1
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001560:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001562:	e04b      	b.n	80015fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	069b      	lsls	r3, r3, #26
 8001574:	429a      	cmp	r2, r3
 8001576:	d107      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001586:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800158e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	069b      	lsls	r3, r3, #26
 8001598:	429a      	cmp	r2, r3
 800159a:	d107      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	069b      	lsls	r3, r3, #26
 80015bc:	429a      	cmp	r2, r3
 80015be:	d107      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	069b      	lsls	r3, r3, #26
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d10a      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80015f4:	e001      	b.n	80015fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80015f6:	bf00      	nop
 80015f8:	e000      	b.n	80015fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80015fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <HAL_ADC_ConfigChannel+0x344>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_ADC_ConfigChannel+0x344>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_ADC_ConfigChannel+0x346>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8131 	bne.w	8001886 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d00f      	beq.n	800164c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	400a      	ands	r2, r1
 8001646:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800164a:	e049      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	409a      	lsls	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b09      	cmp	r3, #9
 800166c:	d91c      	bls.n	80016a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6999      	ldr	r1, [r3, #24]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	3b1b      	subs	r3, #27
 8001680:	2207      	movs	r2, #7
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	4019      	ands	r1, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6898      	ldr	r0, [r3, #8]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	3b1b      	subs	r3, #27
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	e01b      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6959      	ldr	r1, [r3, #20]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	2207      	movs	r2, #7
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4019      	ands	r1, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6898      	ldr	r0, [r3, #8]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	fa00 f203 	lsl.w	r2, r0, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_ConfigChannel+0x41c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_ADC_ConfigChannel+0x48c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x420>
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_ADC_ConfigChannel+0x490>)
 80016f6:	e000      	b.n	80016fa <HAL_ADC_ConfigChannel+0x422>
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_ADC_ConfigChannel+0x494>)
 80016fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b10      	cmp	r3, #16
 8001702:	d105      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800170c:	2b00      	cmp	r3, #0
 800170e:	d015      	beq.n	800173c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001714:	2b11      	cmp	r3, #17
 8001716:	d105      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001728:	2b12      	cmp	r3, #18
 800172a:	f040 80ac 	bne.w	8001886 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800172e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80a5 	bne.w	8001886 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001744:	d102      	bne.n	800174c <HAL_ADC_ConfigChannel+0x474>
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <HAL_ADC_ConfigChannel+0x48c>)
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e023      	b.n	8001794 <HAL_ADC_ConfigChannel+0x4bc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_ADC_ConfigChannel+0x48c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10c      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x498>
 8001756:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e01a      	b.n	8001794 <HAL_ADC_ConfigChannel+0x4bc>
 800175e:	bf00      	nop
 8001760:	83fff000 	.word	0x83fff000
 8001764:	50000100 	.word	0x50000100
 8001768:	50000300 	.word	0x50000300
 800176c:	50000700 	.word	0x50000700
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a4a      	ldr	r2, [pc, #296]	; (80018a0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d102      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x4a8>
 800177a:	4b4a      	ldr	r3, [pc, #296]	; (80018a4 <HAL_ADC_ConfigChannel+0x5cc>)
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e009      	b.n	8001794 <HAL_ADC_ConfigChannel+0x4bc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a47      	ldr	r2, [pc, #284]	; (80018a4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d102      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x4b8>
 800178a:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <HAL_ADC_ConfigChannel+0x5c8>)
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e001      	b.n	8001794 <HAL_ADC_ConfigChannel+0x4bc>
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x4dc>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x4dc>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_ADC_ConfigChannel+0x4de>
 80017b4:	2300      	movs	r3, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d150      	bne.n	800185c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017ba:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d010      	beq.n	80017e2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d107      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x504>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x504>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_ADC_ConfigChannel+0x506>
 80017dc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d13c      	bne.n	800185c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d11d      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x54e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f2:	d118      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <HAL_ADC_ConfigChannel+0x5d4>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9a      	lsrs	r2, r3, #18
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001816:	e002      	b.n	800181e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3b01      	subs	r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f9      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001824:	e02e      	b.n	8001884 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b11      	cmp	r3, #17
 800182c:	d10b      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x56e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001836:	d106      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001842:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001844:	e01e      	b.n	8001884 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b12      	cmp	r3, #18
 800184c:	d11a      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800184e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001858:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800185a:	e013      	b.n	8001884 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f043 0220 	orr.w	r2, r3, #32
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800186e:	e00a      	b.n	8001886 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001882:	e000      	b.n	8001886 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001884:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800188e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001892:	4618      	mov	r0, r3
 8001894:	376c      	adds	r7, #108	; 0x6c
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	50000400 	.word	0x50000400
 80018a4:	50000500 	.word	0x50000500
 80018a8:	20000008 	.word	0x20000008
 80018ac:	431bde83 	.word	0x431bde83

080018b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d126      	bne.n	8001918 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d115      	bne.n	8001910 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d111      	bne.n	8001910 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7fe fc5f 	bl	80001d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001916:	e004      	b.n	8001922 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7ff f9a3 	bl	8000c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f043 0204 	orr.w	r2, r3, #4
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff f993 	bl	8000c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <ADC_Enable+0x2c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <ADC_Enable+0x2c>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <ADC_Enable+0x2e>
 80019a8:	2300      	movs	r3, #0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d13c      	bne.n	8001a28 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <ADC_Enable+0xb8>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00d      	beq.n	80019d8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e028      	b.n	8001a2a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80019e8:	f7ff f91e 	bl	8000c28 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ee:	e014      	b.n	8001a1a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019f0:	f7ff f91a 	bl	8000c28 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d90d      	bls.n	8001a1a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f043 0210 	orr.w	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e007      	b.n	8001a2a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d1e3      	bne.n	80019f0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	8000003f 	.word	0x8000003f

08001a38 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <ADC_Disable+0x2c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <ADC_Disable+0x2c>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <ADC_Disable+0x2e>
 8001a64:	2300      	movs	r3, #0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d040      	beq.n	8001aec <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030d 	and.w	r3, r3, #13
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d10f      	bne.n	8001a98 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0202 	orr.w	r2, r2, #2
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a90:	f7ff f8ca 	bl	8000c28 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a96:	e022      	b.n	8001ade <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0210 	orr.w	r2, r3, #16
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e01c      	b.n	8001aee <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ab4:	f7ff f8b8 	bl	8000c28 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d90d      	bls.n	8001ade <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e007      	b.n	8001aee <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d0e3      	beq.n	8001ab4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e037      	b.n	8001da0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f940 	bl	8002008 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}  
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Start_IT+0x20>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e04a      	b.n	8001e5e <HAL_DMA_Start_IT+0xb6>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d13a      	bne.n	8001e50 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f8d4 	bl	8001fac <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 020e 	orr.w	r2, r2, #14
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 020a 	orr.w	r2, r2, #10
 8001e2c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0204 	bic.w	r2, r2, #4
 8001e3c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e005      	b.n	8001e5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2204      	movs	r2, #4
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d024      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x72>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01f      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0204 	bic.w	r2, r2, #4
 8001eb4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d06a      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ed6:	e065      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2202      	movs	r2, #2
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d02c      	beq.n	8001f42 <HAL_DMA_IRQHandler+0xdc>
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d027      	beq.n	8001f42 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 020a 	bic.w	r2, r2, #10
 8001f0e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	2102      	movs	r1, #2
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d035      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f40:	e030      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2208      	movs	r2, #8
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d028      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 020e 	bic.w	r2, r2, #14
 8001f6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
    }
  }
}  
 8001fa2:	e7ff      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x13e>
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d108      	bne.n	8001fec <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fea:	e007      	b.n	8001ffc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	60da      	str	r2, [r3, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <DMA_CalcBaseAndBitshift+0x60>)
 8002018:	429a      	cmp	r2, r3
 800201a:	d80f      	bhi.n	800203c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <DMA_CalcBaseAndBitshift+0x64>)
 8002024:	4413      	add	r3, r2
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <DMA_CalcBaseAndBitshift+0x68>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	009a      	lsls	r2, r3, #2
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <DMA_CalcBaseAndBitshift+0x6c>)
 8002038:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800203a:	e00e      	b.n	800205a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <DMA_CalcBaseAndBitshift+0x70>)
 8002044:	4413      	add	r3, r2
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <DMA_CalcBaseAndBitshift+0x68>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	009a      	lsls	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <DMA_CalcBaseAndBitshift+0x74>)
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40020407 	.word	0x40020407
 800206c:	bffdfff8 	.word	0xbffdfff8
 8002070:	cccccccd 	.word	0xcccccccd
 8002074:	40020000 	.word	0x40020000
 8002078:	bffdfbf8 	.word	0xbffdfbf8
 800207c:	40020400 	.word	0x40020400

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208e:	e160      	b.n	8002352 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8152 	beq.w	800234c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d00b      	beq.n	80020c8 <HAL_GPIO_Init+0x48>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d007      	beq.n	80020c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020bc:	2b11      	cmp	r3, #17
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b12      	cmp	r3, #18
 80020c6:	d130      	bne.n	800212a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fe:	2201      	movs	r2, #1
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	f003 0201 	and.w	r2, r3, #1
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0xea>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b12      	cmp	r3, #18
 8002168:	d123      	bne.n	80021b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	6939      	ldr	r1, [r7, #16]
 80021ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0203 	and.w	r2, r3, #3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80ac 	beq.w	800234c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f4:	4b5e      	ldr	r3, [pc, #376]	; (8002370 <HAL_GPIO_Init+0x2f0>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a5d      	ldr	r2, [pc, #372]	; (8002370 <HAL_GPIO_Init+0x2f0>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b5b      	ldr	r3, [pc, #364]	; (8002370 <HAL_GPIO_Init+0x2f0>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800220c:	4a59      	ldr	r2, [pc, #356]	; (8002374 <HAL_GPIO_Init+0x2f4>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002236:	d025      	beq.n	8002284 <HAL_GPIO_Init+0x204>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <HAL_GPIO_Init+0x2f8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d01f      	beq.n	8002280 <HAL_GPIO_Init+0x200>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a4e      	ldr	r2, [pc, #312]	; (800237c <HAL_GPIO_Init+0x2fc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d019      	beq.n	800227c <HAL_GPIO_Init+0x1fc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_GPIO_Init+0x300>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <HAL_GPIO_Init+0x1f8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_GPIO_Init+0x304>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00d      	beq.n	8002274 <HAL_GPIO_Init+0x1f4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a4b      	ldr	r2, [pc, #300]	; (8002388 <HAL_GPIO_Init+0x308>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <HAL_GPIO_Init+0x1f0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_GPIO_Init+0x30c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_GPIO_Init+0x1ec>
 8002268:	2306      	movs	r3, #6
 800226a:	e00c      	b.n	8002286 <HAL_GPIO_Init+0x206>
 800226c:	2307      	movs	r3, #7
 800226e:	e00a      	b.n	8002286 <HAL_GPIO_Init+0x206>
 8002270:	2305      	movs	r3, #5
 8002272:	e008      	b.n	8002286 <HAL_GPIO_Init+0x206>
 8002274:	2304      	movs	r3, #4
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x206>
 8002278:	2303      	movs	r3, #3
 800227a:	e004      	b.n	8002286 <HAL_GPIO_Init+0x206>
 800227c:	2302      	movs	r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x206>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_GPIO_Init+0x206>
 8002284:	2300      	movs	r3, #0
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	4093      	lsls	r3, r2
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002296:	4937      	ldr	r1, [pc, #220]	; (8002374 <HAL_GPIO_Init+0x2f4>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a4:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <HAL_GPIO_Init+0x310>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022c8:	4a31      	ldr	r2, [pc, #196]	; (8002390 <HAL_GPIO_Init+0x310>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_GPIO_Init+0x310>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022f2:	4a27      	ldr	r2, [pc, #156]	; (8002390 <HAL_GPIO_Init+0x310>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_GPIO_Init+0x310>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <HAL_GPIO_Init+0x310>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_GPIO_Init+0x310>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <HAL_GPIO_Init+0x310>)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f ae97 	bne.w	8002090 <HAL_GPIO_Init+0x10>
  }
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	48000400 	.word	0x48000400
 800237c:	48000800 	.word	0x48000800
 8002380:	48000c00 	.word	0x48000c00
 8002384:	48001000 	.word	0x48001000
 8002388:	48001400 	.word	0x48001400
 800238c:	48001800 	.word	0x48001800
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f000 bf01 	b.w	80031e0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8160 	beq.w	80026ae <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023ee:	4bae      	ldr	r3, [pc, #696]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00c      	beq.n	8002414 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fa:	4bab      	ldr	r3, [pc, #684]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	d159      	bne.n	80024ba <HAL_RCC_OscConfig+0xf6>
 8002406:	4ba8      	ldr	r3, [pc, #672]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002412:	d152      	bne.n	80024ba <HAL_RCC_OscConfig+0xf6>
 8002414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002418:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002428:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d102      	bne.n	8002446 <HAL_RCC_OscConfig+0x82>
 8002440:	4b99      	ldr	r3, [pc, #612]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e015      	b.n	8002472 <HAL_RCC_OscConfig+0xae>
 8002446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800245a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002462:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800246e:	4b8e      	ldr	r3, [pc, #568]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002476:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800247a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800247e:	fa92 f2a2 	rbit	r2, r2
 8002482:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002486:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8102 	beq.w	80026ac <HAL_RCC_OscConfig+0x2e8>
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80fc 	bne.w	80026ac <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f000 be93 	b.w	80031e0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d106      	bne.n	80024d4 <HAL_RCC_OscConfig+0x110>
 80024c6:	4b78      	ldr	r3, [pc, #480]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a77      	ldr	r2, [pc, #476]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e030      	b.n	8002536 <HAL_RCC_OscConfig+0x172>
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x134>
 80024de:	4b72      	ldr	r3, [pc, #456]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a71      	ldr	r2, [pc, #452]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6e      	ldr	r2, [pc, #440]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80024f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01e      	b.n	8002536 <HAL_RCC_OscConfig+0x172>
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002502:	d10c      	bne.n	800251e <HAL_RCC_OscConfig+0x15a>
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a67      	ldr	r2, [pc, #412]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 800250a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a64      	ldr	r2, [pc, #400]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e00b      	b.n	8002536 <HAL_RCC_OscConfig+0x172>
 800251e:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b5f      	ldr	r3, [pc, #380]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002534:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d059      	beq.n	80025f4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fb72 	bl	8000c28 <HAL_GetTick>
 8002544:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254a:	f7fe fb6d 	bl	8000c28 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d902      	bls.n	8002560 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	f000 be40 	b.w	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002564:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002574:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_RCC_OscConfig+0x1ce>
 800258c:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x1fa>
 8002592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002596:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80025c6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80025ca:	fa92 f2a2 	rbit	r2, r2
 80025ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80025d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f002 021f 	and.w	r2, r2, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ab      	beq.n	800254a <HAL_RCC_OscConfig+0x186>
 80025f2:	e05c      	b.n	80026ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fb18 	bl	8000c28 <HAL_GetTick>
 80025f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fe:	f7fe fb13 	bl	8000c28 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d902      	bls.n	8002614 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	f000 bde6 	b.w	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002628:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d102      	bne.n	8002646 <HAL_RCC_OscConfig+0x282>
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x2ae>
 8002646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800265a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002662:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_RCC_OscConfig+0x2e4>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002676:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800267a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800267e:	fa92 f2a2 	rbit	r2, r2
 8002682:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002686:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f042 0220 	orr.w	r2, r2, #32
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f002 021f 	and.w	r2, r2, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ab      	bne.n	80025fe <HAL_RCC_OscConfig+0x23a>
 80026a6:	e002      	b.n	80026ae <HAL_RCC_OscConfig+0x2ea>
 80026a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8170 	beq.w	800299e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026be:	4bd0      	ldr	r3, [pc, #832]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026ca:	4bcd      	ldr	r3, [pc, #820]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d16d      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3ee>
 80026d6:	4bca      	ldr	r3, [pc, #808]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	d166      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3ee>
 80026e4:	2302      	movs	r3, #2
 80026e6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80026f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <HAL_RCC_OscConfig+0x350>
 800270e:	4bbc      	ldr	r3, [pc, #752]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	e013      	b.n	800273c <HAL_RCC_OscConfig+0x378>
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002726:	2302      	movs	r3, #2
 8002728:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800272c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002738:	4bb1      	ldr	r3, [pc, #708]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002742:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002746:	fa92 f2a2 	rbit	r2, r2
 800274a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800274e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002752:	fab2 f282 	clz	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f042 0220 	orr.w	r2, r2, #32
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f002 021f 	and.w	r2, r2, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_RCC_OscConfig+0x3ba>
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d002      	beq.n	800277e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	f000 bd31 	b.w	80031e0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4ba0      	ldr	r3, [pc, #640]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	21f8      	movs	r1, #248	; 0xf8
 800278e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002796:	fa91 f1a1 	rbit	r1, r1
 800279a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800279e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027a2:	fab1 f181 	clz	r1, r1
 80027a6:	b2c9      	uxtb	r1, r1
 80027a8:	408b      	lsls	r3, r1
 80027aa:	4995      	ldr	r1, [pc, #596]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b0:	e0f5      	b.n	800299e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8085 	beq.w	80028c8 <HAL_RCC_OscConfig+0x504>
 80027be:	2301      	movs	r3, #1
 80027c0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80027d0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	461a      	mov	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7fe fa1d 	bl	8000c28 <HAL_GetTick>
 80027ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f4:	f7fe fa18 	bl	8000c28 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d902      	bls.n	800280a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	f000 bceb 	b.w	80031e0 <HAL_RCC_OscConfig+0xe1c>
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800281c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_RCC_OscConfig+0x476>
 8002834:	4b72      	ldr	r3, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e013      	b.n	8002862 <HAL_RCC_OscConfig+0x49e>
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800284c:	2302      	movs	r3, #2
 800284e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002852:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800285e:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2202      	movs	r2, #2
 8002864:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002868:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002874:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f002 021f 	and.w	r2, r2, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f202 	lsl.w	r2, r1, r2
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0af      	beq.n	80027f4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	21f8      	movs	r1, #248	; 0xf8
 80028a4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80028ac:	fa91 f1a1 	rbit	r1, r1
 80028b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80028b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028b8:	fab1 f181 	clz	r1, r1
 80028bc:	b2c9      	uxtb	r1, r1
 80028be:	408b      	lsls	r3, r1
 80028c0:	494f      	ldr	r1, [pc, #316]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
 80028c6:	e06a      	b.n	800299e <HAL_RCC_OscConfig+0x5da>
 80028c8:	2301      	movs	r3, #1
 80028ca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80028da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe f998 	bl	8000c28 <HAL_GetTick>
 80028f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe f993 	bl	8000c28 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	f000 bc66 	b.w	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002926:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x580>
 800293e:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e013      	b.n	800296c <HAL_RCC_OscConfig+0x5a8>
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800295c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0x63c>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	2202      	movs	r2, #2
 800296e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002972:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800297e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f042 0220 	orr.w	r2, r2, #32
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1af      	bne.n	80028fe <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80da 	beq.w	8002b62 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d069      	beq.n	8002a8c <HAL_RCC_OscConfig+0x6c8>
 80029b8:	2301      	movs	r3, #1
 80029ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80029ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_OscConfig+0x640>)
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	2301      	movs	r3, #1
 80029e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7fe f921 	bl	8000c28 <HAL_GetTick>
 80029e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e00d      	b.n	8002a08 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe f91c 	bl	8000c28 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d905      	bls.n	8002a08 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e3ef      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	10908120 	.word	0x10908120
 8002a08:	2302      	movs	r3, #2
 8002a0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a20:	2202      	movs	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f2a3 	rbit	r2, r3
 8002a2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a38:	2202      	movs	r2, #2
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4c:	4ba4      	ldr	r3, [pc, #656]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a54:	2102      	movs	r1, #2
 8002a56:	6019      	str	r1, [r3, #0]
 8002a58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f1a3 	rbit	r1, r3
 8002a62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a66:	6019      	str	r1, [r3, #0]
  return result;
 8002a68:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0b0      	beq.n	80029ec <HAL_RCC_OscConfig+0x628>
 8002a8a:	e06a      	b.n	8002b62 <HAL_RCC_OscConfig+0x79e>
 8002a8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002aa8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <HAL_RCC_OscConfig+0x920>)
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2300      	movs	r3, #0
 8002abc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe f8b3 	bl	8000c28 <HAL_GetTick>
 8002ac2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac6:	e009      	b.n	8002adc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe f8ae 	bl	8000c28 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e381      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002adc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	4b6e      	ldr	r3, [pc, #440]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	6019      	str	r1, [r3, #0]
 8002b30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	fa93 f1a3 	rbit	r1, r3
 8002b3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b3e:	6019      	str	r1, [r3, #0]
  return result;
 8002b40:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1b2      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8157 	beq.w	8002e20 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d112      	bne.n	8002baa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	4a55      	ldr	r2, [pc, #340]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	61d3      	str	r3, [r2, #28]
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <HAL_RCC_OscConfig+0x924>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11a      	bne.n	8002bec <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <HAL_RCC_OscConfig+0x924>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_RCC_OscConfig+0x924>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc2:	f7fe f831 	bl	8000c28 <HAL_GetTick>
 8002bc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	e009      	b.n	8002be0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe f82c 	bl	8000c28 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e2ff      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_OscConfig+0x924>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ef      	beq.n	8002bcc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x840>
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	e02f      	b.n	8002c64 <HAL_RCC_OscConfig+0x8a0>
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x864>
 8002c0e:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	4a33      	ldr	r2, [pc, #204]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	6213      	str	r3, [r2, #32]
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	6213      	str	r3, [r2, #32]
 8002c26:	e01d      	b.n	8002c64 <HAL_RCC_OscConfig+0x8a0>
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x888>
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6213      	str	r3, [r2, #32]
 8002c3e:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a27      	ldr	r2, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x8a0>
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06a      	beq.n	8002d44 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7fd ffdb 	bl	8000c28 <HAL_GetTick>
 8002c72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7fd ffd6 	bl	8000c28 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e2a7      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002c90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c94:	2202      	movs	r2, #2
 8002c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cac:	2202      	movs	r2, #2
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f2a3 	rbit	r2, r3
 8002cba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cbe:	601a      	str	r2, [r3, #0]
  return result;
 8002cc0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002cc4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x928>
 8002cda:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <HAL_RCC_OscConfig+0x91c>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	e013      	b.n	8002d08 <HAL_RCC_OscConfig+0x944>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	10908120 	.word	0x10908120
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	4bc0      	ldr	r3, [pc, #768]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	6011      	str	r1, [r2, #0]
 8002d10:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	fa92 f1a2 	rbit	r1, r2
 8002d1a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d1e:	6011      	str	r1, [r2, #0]
  return result;
 8002d20:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	fab2 f282 	clz	r2, r2
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f002 021f 	and.w	r2, r2, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d09a      	beq.n	8002c78 <HAL_RCC_OscConfig+0x8b4>
 8002d42:	e063      	b.n	8002e0c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7fd ff70 	bl	8000c28 <HAL_GetTick>
 8002d48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	e00b      	b.n	8002d66 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fd ff6b 	bl	8000c28 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e23c      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002d66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d94:	601a      	str	r2, [r3, #0]
  return result;
 8002d96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d102      	bne.n	8002db6 <HAL_RCC_OscConfig+0x9f2>
 8002db0:	4b95      	ldr	r3, [pc, #596]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	e00d      	b.n	8002dd2 <HAL_RCC_OscConfig+0xa0e>
 8002db6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dba:	2202      	movs	r2, #2
 8002dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	fa93 f2a3 	rbit	r2, r3
 8002dc8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	4b8e      	ldr	r3, [pc, #568]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	6011      	str	r1, [r2, #0]
 8002dda:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	fa92 f1a2 	rbit	r1, r2
 8002de4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002de8:	6011      	str	r1, [r2, #0]
  return result;
 8002dea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f002 021f 	and.w	r2, r2, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f202 	lsl.w	r2, r1, r2
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1a0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e0c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b7c      	ldr	r3, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a7b      	ldr	r2, [pc, #492]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 81d9 	beq.w	80031de <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2c:	4b76      	ldr	r3, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	f000 81a6 	beq.w	8003186 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f040 811e 	bne.w	8003082 <HAL_RCC_OscConfig+0xcbe>
 8002e46:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e5e:	601a      	str	r2, [r3, #0]
  return result;
 8002e60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	461a      	mov	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fd fed4 	bl	8000c28 <HAL_GetTick>
 8002e80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e84:	e009      	b.n	8002e9a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fd fecf 	bl	8000c28 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1a2      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002e9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002eb2:	601a      	str	r2, [r3, #0]
  return result;
 8002eb4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002eb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d102      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xb10>
 8002ece:	4b4e      	ldr	r3, [pc, #312]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	e01b      	b.n	8002f0c <HAL_RCC_OscConfig+0xb48>
 8002ed4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	fa93 f2a3 	rbit	r2, r3
 8002ee8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f14:	6011      	str	r1, [r2, #0]
 8002f16:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	fa92 f1a2 	rbit	r1, r2
 8002f20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f24:	6011      	str	r1, [r2, #0]
  return result;
 8002f26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0220 	orr.w	r2, r2, #32
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d19e      	bne.n	8002e86 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f48:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f023 020f 	bic.w	r2, r3, #15
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	492c      	ldr	r1, [pc, #176]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a19      	ldr	r1, [r3, #32]
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	4925      	ldr	r1, [pc, #148]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
 8002f78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f90:	601a      	str	r2, [r3, #0]
  return result;
 8002f92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f96:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fd fe3b 	bl	8000c28 <HAL_GetTick>
 8002fb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb6:	e009      	b.n	8002fcc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fd fe36 	bl	8000c28 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e109      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
 8002fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	fa93 f2a3 	rbit	r2, r3
 8002fe0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fe4:	601a      	str	r2, [r3, #0]
  return result;
 8002fe6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <HAL_RCC_OscConfig+0xc48>
 8003000:	4b01      	ldr	r3, [pc, #4]	; (8003008 <HAL_RCC_OscConfig+0xc44>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e01e      	b.n	8003044 <HAL_RCC_OscConfig+0xc80>
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800302a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0xe28>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003048:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800304c:	6011      	str	r1, [r2, #0]
 800304e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	fa92 f1a2 	rbit	r1, r2
 8003058:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800305c:	6011      	str	r1, [r2, #0]
  return result;
 800305e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f002 021f 	and.w	r2, r2, #31
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d09b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xbf4>
 8003080:	e0ad      	b.n	80031de <HAL_RCC_OscConfig+0xe1a>
 8003082:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003086:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800309a:	601a      	str	r2, [r3, #0]
  return result;
 800309c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fdb6 	bl	8000c28 <HAL_GetTick>
 80030bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fd fdb1 	bl	8000c28 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e084      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
 80030d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ee:	601a      	str	r2, [r3, #0]
  return result;
 80030f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_RCC_OscConfig+0xd4c>
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_RCC_OscConfig+0xe28>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	e01b      	b.n	8003148 <HAL_RCC_OscConfig+0xd84>
 8003110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f107 0320 	add.w	r3, r7, #32
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f107 031c 	add.w	r3, r7, #28
 800312e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f107 0318 	add.w	r3, r7, #24
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_OscConfig+0xe28>)
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f107 0214 	add.w	r2, r7, #20
 800314c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003150:	6011      	str	r1, [r2, #0]
 8003152:	f107 0214 	add.w	r2, r7, #20
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	fa92 f1a2 	rbit	r1, r2
 800315c:	f107 0210 	add.w	r2, r7, #16
 8003160:	6011      	str	r1, [r2, #0]
  return result;
 8003162:	f107 0210 	add.w	r2, r7, #16
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	fab2 f282 	clz	r2, r2
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f042 0220 	orr.w	r2, r2, #32
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	f002 021f 	and.w	r2, r2, #31
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f202 	lsl.w	r2, r1, r2
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d19e      	bne.n	80030c2 <HAL_RCC_OscConfig+0xcfe>
 8003184:	e02b      	b.n	80031de <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e025      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0xe28>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_RCC_OscConfig+0xe28>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80031a8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d111      	bne.n	80031da <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80031ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d108      	bne.n	80031da <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80031c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b09e      	sub	sp, #120	; 0x78
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e162      	b.n	80034ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b90      	ldr	r3, [pc, #576]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d910      	bls.n	8003238 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b8d      	ldr	r3, [pc, #564]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	498b      	ldr	r1, [pc, #556]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e14a      	b.n	80034ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b82      	ldr	r3, [pc, #520]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	497f      	ldr	r1, [pc, #508]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80dc 	beq.w	800341c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d13c      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xf6>
 800326c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003270:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_RCC_ClockConfig+0xa6>
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	e00f      	b.n	80032b6 <HAL_RCC_ClockConfig+0xc6>
 8003296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	667b      	str	r3, [r7, #100]	; 0x64
 80032a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a8:	663b      	str	r3, [r7, #96]	; 0x60
 80032aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b2:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80032bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032be:	fa92 f2a2 	rbit	r2, r2
 80032c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032c6:	fab2 f282 	clz	r2, r2
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f042 0220 	orr.w	r2, r2, #32
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f002 021f 	and.w	r2, r2, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d17b      	bne.n	80033da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0f3      	b.n	80034ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d13c      	bne.n	8003368 <HAL_RCC_ClockConfig+0x178>
 80032ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_RCC_ClockConfig+0x128>
 8003312:	4b4f      	ldr	r3, [pc, #316]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	e00f      	b.n	8003338 <HAL_RCC_ClockConfig+0x148>
 8003318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
 8003326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
 800332c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003334:	4b46      	ldr	r3, [pc, #280]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333c:	63ba      	str	r2, [r7, #56]	; 0x38
 800333e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003340:	fa92 f2a2 	rbit	r2, r2
 8003344:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003348:	fab2 f282 	clz	r2, r2
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f042 0220 	orr.w	r2, r2, #32
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f002 021f 	and.w	r2, r2, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d13a      	bne.n	80033da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b2      	b.n	80034ce <HAL_RCC_ClockConfig+0x2de>
 8003368:	2302      	movs	r3, #2
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_RCC_ClockConfig+0x1a0>
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e00d      	b.n	80033ac <HAL_RCC_ClockConfig+0x1bc>
 8003390:	2302      	movs	r3, #2
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	2302      	movs	r3, #2
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2202      	movs	r2, #2
 80033ae:	61ba      	str	r2, [r7, #24]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	617a      	str	r2, [r7, #20]
  return result;
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	fab2 f282 	clz	r2, r2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f042 0220 	orr.w	r2, r2, #32
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	f002 021f 	and.w	r2, r2, #31
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e079      	b.n	80034ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	491a      	ldr	r1, [pc, #104]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7fd fc1c 	bl	8000c28 <HAL_GetTick>
 80033f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fd fc18 	bl	8000c28 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e061      	b.n	80034ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_RCC_ClockConfig+0x260>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d214      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	4906      	ldr	r1, [pc, #24]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <HAL_RCC_ClockConfig+0x25c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e040      	b.n	80034ce <HAL_RCC_ClockConfig+0x2de>
 800344c:	40022000 	.word	0x40022000
 8003450:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	491a      	ldr	r1, [pc, #104]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4912      	ldr	r1, [pc, #72]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003492:	f000 f829 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8003496:	4601      	mov	r1, r0
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_RCC_ClockConfig+0x2e8>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a0:	22f0      	movs	r2, #240	; 0xf0
 80034a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	fa92 f2a2 	rbit	r2, r2
 80034aa:	60fa      	str	r2, [r7, #12]
  return result;
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	fab2 f282 	clz	r2, r2
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	40d3      	lsrs	r3, r2
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x2ec>)
 80034b8:	5cd3      	ldrb	r3, [r2, r3]
 80034ba:	fa21 f303 	lsr.w	r3, r1, r3
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <HAL_RCC_ClockConfig+0x2f0>)
 80034c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_RCC_ClockConfig+0x2f4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd fb6a 	bl	8000ba0 <HAL_InitTick>
  
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3778      	adds	r7, #120	; 0x78
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	0800496c 	.word	0x0800496c
 80034e0:	20000008 	.word	0x20000008
 80034e4:	2000000c 	.word	0x2000000c

080034e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b08b      	sub	sp, #44	; 0x2c
 80034ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x30>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x36>
 8003516:	e03f      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800351a:	623b      	str	r3, [r7, #32]
      break;
 800351c:	e03f      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003524:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003528:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	fa92 f2a2 	rbit	r2, r2
 8003530:	607a      	str	r2, [r7, #4]
  return result;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	fab2 f282 	clz	r2, r2
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	40d3      	lsrs	r3, r2
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	220f      	movs	r2, #15
 800354c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	fa92 f2a2 	rbit	r2, r2
 8003554:	60fa      	str	r2, [r7, #12]
  return result;
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	40d3      	lsrs	r3, r2
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003570:	4a0f      	ldr	r2, [pc, #60]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	fbb2 f2f3 	udiv	r2, r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e007      	b.n	8003592 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003582:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fbb2 f2f3 	udiv	r2, r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	623b      	str	r3, [r7, #32]
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800359a:	623b      	str	r3, [r7, #32]
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6a3b      	ldr	r3, [r7, #32]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	372c      	adds	r7, #44	; 0x2c
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40021000 	.word	0x40021000
 80035b0:	007a1200 	.word	0x007a1200
 80035b4:	0800497c 	.word	0x0800497c
 80035b8:	0800498c 	.word	0x0800498c

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b092      	sub	sp, #72	; 0x48
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80d7 	beq.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e0:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10e      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4a4a      	ldr	r2, [pc, #296]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	61d3      	str	r3, [r2, #28]
 80035f8:	4b48      	ldr	r3, [pc, #288]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b45      	ldr	r3, [pc, #276]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b42      	ldr	r3, [pc, #264]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a41      	ldr	r2, [pc, #260]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fd fb01 	bl	8000c28 <HAL_GetTick>
 8003626:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fd fafd 	bl	8000c28 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d901      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e1d6      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8084 	beq.w	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003664:	429a      	cmp	r2, r3
 8003666:	d07c      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	2301      	movs	r3, #1
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	461a      	mov	r2, r3
 80036b6:	2300      	movs	r3, #0
 80036b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d04b      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fd faad 	bl	8000c28 <HAL_GetTick>
 80036ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fd faa9 	bl	8000c28 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e180      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036e8:	2302      	movs	r3, #2
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	2302      	movs	r3, #2
 80036f6:	623b      	str	r3, [r7, #32]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003700:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d108      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003716:	4b01      	ldr	r3, [pc, #4]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	e00d      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	10908100 	.word	0x10908100
 8003728:	2302      	movs	r3, #2
 800372a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	4ba0      	ldr	r3, [pc, #640]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2202      	movs	r2, #2
 800373a:	613a      	str	r2, [r7, #16]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	fa92 f2a2 	rbit	r2, r2
 8003742:	60fa      	str	r2, [r7, #12]
  return result;
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	fab2 f282 	clz	r2, r2
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0b7      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003762:	4b95      	ldr	r3, [pc, #596]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4992      	ldr	r1, [pc, #584]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b8e      	ldr	r3, [pc, #568]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4a8d      	ldr	r2, [pc, #564]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003794:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f023 0203 	bic.w	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4985      	ldr	r1, [pc, #532]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b2:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	497e      	ldr	r1, [pc, #504]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d0:	4b79      	ldr	r3, [pc, #484]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	4976      	ldr	r1, [pc, #472]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ee:	4b72      	ldr	r3, [pc, #456]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	496f      	ldr	r1, [pc, #444]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800380c:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	4967      	ldr	r1, [pc, #412]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800382a:	4b63      	ldr	r3, [pc, #396]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f023 0220 	bic.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4960      	ldr	r1, [pc, #384]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003848:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	4958      	ldr	r1, [pc, #352]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003866:	4b54      	ldr	r3, [pc, #336]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	4951      	ldr	r1, [pc, #324]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003884:	4b4c      	ldr	r3, [pc, #304]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	4949      	ldr	r1, [pc, #292]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038a2:	4b45      	ldr	r3, [pc, #276]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4942      	ldr	r1, [pc, #264]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038c0:	4b3d      	ldr	r3, [pc, #244]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	493a      	ldr	r1, [pc, #232]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038de:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	4933      	ldr	r1, [pc, #204]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038fc:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	492b      	ldr	r1, [pc, #172]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800391a:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4924      	ldr	r1, [pc, #144]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003938:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	491c      	ldr	r1, [pc, #112]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003956:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	4915      	ldr	r1, [pc, #84]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	490d      	ldr	r1, [pc, #52]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	4906      	ldr	r1, [pc, #24]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00c      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039b0:	4b01      	ldr	r3, [pc, #4]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	e002      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c4:	490b      	ldr	r1, [pc, #44]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	4904      	ldr	r1, [pc, #16]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3748      	adds	r7, #72	; 0x48
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000

080039f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e01d      	b.n	8003a46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fc ffbe 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 fa70 	bl	8003f1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e01d      	b.n	8003a9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f815 	bl	8003aa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f000 fa45 	bl	8003f1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fe64 	bl	8004798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <HAL_TIM_PWM_Start+0xa4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d018      	beq.n	8003b0c <HAL_TIM_PWM_Start+0x54>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_TIM_PWM_Start+0xa8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_TIM_PWM_Start+0x54>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_TIM_PWM_Start+0xac>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_TIM_PWM_Start+0x54>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_TIM_PWM_Start+0xb0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_TIM_PWM_Start+0x54>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_TIM_PWM_Start+0xb4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_PWM_Start+0x54>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_TIM_PWM_Start+0xb8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIM_PWM_Start+0x58>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_TIM_PWM_Start+0x5a>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_TIM_PWM_Start+0xbc>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d00b      	beq.n	8003b50 <HAL_TIM_PWM_Start+0x98>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40013400 	.word	0x40013400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	40015000 	.word	0x40015000
 8003b74:	00010007 	.word	0x00010007

08003b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e105      	b.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b14      	cmp	r3, #20
 8003ba6:	f200 80f0 	bhi.w	8003d8a <HAL_TIM_PWM_ConfigChannel+0x212>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003d8b 	.word	0x08003d8b
 8003bb8:	08003d8b 	.word	0x08003d8b
 8003bbc:	08003d8b 	.word	0x08003d8b
 8003bc0:	08003c45 	.word	0x08003c45
 8003bc4:	08003d8b 	.word	0x08003d8b
 8003bc8:	08003d8b 	.word	0x08003d8b
 8003bcc:	08003d8b 	.word	0x08003d8b
 8003bd0:	08003c87 	.word	0x08003c87
 8003bd4:	08003d8b 	.word	0x08003d8b
 8003bd8:	08003d8b 	.word	0x08003d8b
 8003bdc:	08003d8b 	.word	0x08003d8b
 8003be0:	08003cc7 	.word	0x08003cc7
 8003be4:	08003d8b 	.word	0x08003d8b
 8003be8:	08003d8b 	.word	0x08003d8b
 8003bec:	08003d8b 	.word	0x08003d8b
 8003bf0:	08003d09 	.word	0x08003d09
 8003bf4:	08003d8b 	.word	0x08003d8b
 8003bf8:	08003d8b 	.word	0x08003d8b
 8003bfc:	08003d8b 	.word	0x08003d8b
 8003c00:	08003d49 	.word	0x08003d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fa24 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6999      	ldr	r1, [r3, #24]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	619a      	str	r2, [r3, #24]
      break;
 8003c42:	e0a3      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fa9e 	bl	800418c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	619a      	str	r2, [r3, #24]
      break;
 8003c84:	e082      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fb11 	bl	80042b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0208 	orr.w	r2, r2, #8
 8003ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0204 	bic.w	r2, r2, #4
 8003cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69d9      	ldr	r1, [r3, #28]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]
      break;
 8003cc4:	e062      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fb83 	bl	80043d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	021a      	lsls	r2, r3, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	61da      	str	r2, [r3, #28]
      break;
 8003d06:	e041      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fbd2 	bl	80044b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0208 	orr.w	r2, r2, #8
 8003d22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d46:	e021      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fc1c 	bl	800458c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d88:	e000      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003d8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIM_ConfigClockSource+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e0a8      	b.n	8003f12 <HAL_TIM_ConfigClockSource+0x16a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d067      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0x124>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d80b      	bhi.n	8003e18 <HAL_TIM_ConfigClockSource+0x70>
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d073      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0x144>
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d802      	bhi.n	8003e0e <HAL_TIM_ConfigClockSource+0x66>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d06f      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e0c:	e078      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d06c      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0x144>
 8003e12:	2b30      	cmp	r3, #48	; 0x30
 8003e14:	d06a      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003e16:	e073      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e18:	2b70      	cmp	r3, #112	; 0x70
 8003e1a:	d00d      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0x90>
 8003e1c:	2b70      	cmp	r3, #112	; 0x70
 8003e1e:	d804      	bhi.n	8003e2a <HAL_TIM_ConfigClockSource+0x82>
 8003e20:	2b50      	cmp	r3, #80	; 0x50
 8003e22:	d033      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0xe4>
 8003e24:	2b60      	cmp	r3, #96	; 0x60
 8003e26:	d041      	beq.n	8003eac <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003e28:	e06a      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d066      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x156>
 8003e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e34:	d017      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003e36:	e063      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f000 fc86 	bl	8004758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]
      break;
 8003e64:	e04c      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6899      	ldr	r1, [r3, #8]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f000 fc6f 	bl	8004758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e88:	609a      	str	r2, [r3, #8]
      break;
 8003e8a:	e039      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	f000 fbe3 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2150      	movs	r1, #80	; 0x50
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fc3c 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8003eaa:	e029      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f000 fc02 	bl	80046c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2160      	movs	r1, #96	; 0x60
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fc2c 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8003eca:	e019      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f000 fbc3 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fc1c 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8003eea:	e009      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 fc13 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8003efc:	e000      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a42      	ldr	r2, [pc, #264]	; (8004038 <TIM_Base_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d00f      	beq.n	8003f5c <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3f      	ldr	r2, [pc, #252]	; (800403c <TIM_Base_SetConfig+0x120>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00b      	beq.n	8003f5c <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3e      	ldr	r2, [pc, #248]	; (8004040 <TIM_Base_SetConfig+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d007      	beq.n	8003f5c <TIM_Base_SetConfig+0x40>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a3d      	ldr	r2, [pc, #244]	; (8004044 <TIM_Base_SetConfig+0x128>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_Base_SetConfig+0x40>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <TIM_Base_SetConfig+0x12c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d108      	bne.n	8003f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a31      	ldr	r2, [pc, #196]	; (8004038 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d01b      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2e      	ldr	r2, [pc, #184]	; (800403c <TIM_Base_SetConfig+0x120>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d017      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <TIM_Base_SetConfig+0x124>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <TIM_Base_SetConfig+0x128>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a2c      	ldr	r2, [pc, #176]	; (800404c <TIM_Base_SetConfig+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2b      	ldr	r2, [pc, #172]	; (8004050 <TIM_Base_SetConfig+0x134>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	; (8004054 <TIM_Base_SetConfig+0x138>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0x9a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a25      	ldr	r2, [pc, #148]	; (8004048 <TIM_Base_SetConfig+0x12c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a12      	ldr	r2, [pc, #72]	; (8004038 <TIM_Base_SetConfig+0x11c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <TIM_Base_SetConfig+0x100>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a13      	ldr	r2, [pc, #76]	; (8004044 <TIM_Base_SetConfig+0x128>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00f      	beq.n	800401c <TIM_Base_SetConfig+0x100>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a13      	ldr	r2, [pc, #76]	; (800404c <TIM_Base_SetConfig+0x130>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00b      	beq.n	800401c <TIM_Base_SetConfig+0x100>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <TIM_Base_SetConfig+0x134>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d007      	beq.n	800401c <TIM_Base_SetConfig+0x100>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a11      	ldr	r2, [pc, #68]	; (8004054 <TIM_Base_SetConfig+0x138>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0x100>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <TIM_Base_SetConfig+0x12c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	615a      	str	r2, [r3, #20]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40013400 	.word	0x40013400
 8004048:	40015000 	.word	0x40015000
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400
 8004054:	40014800 	.word	0x40014800

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0303 	bic.w	r3, r3, #3
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 0302 	bic.w	r3, r3, #2
 80040a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a30      	ldr	r2, [pc, #192]	; (8004174 <TIM_OC1_SetConfig+0x11c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <TIM_OC1_SetConfig+0x88>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a2f      	ldr	r2, [pc, #188]	; (8004178 <TIM_OC1_SetConfig+0x120>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00f      	beq.n	80040e0 <TIM_OC1_SetConfig+0x88>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a2e      	ldr	r2, [pc, #184]	; (800417c <TIM_OC1_SetConfig+0x124>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_OC1_SetConfig+0x88>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <TIM_OC1_SetConfig+0x128>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_OC1_SetConfig+0x88>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a2c      	ldr	r2, [pc, #176]	; (8004184 <TIM_OC1_SetConfig+0x12c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_OC1_SetConfig+0x88>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a2b      	ldr	r2, [pc, #172]	; (8004188 <TIM_OC1_SetConfig+0x130>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10c      	bne.n	80040fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0308 	bic.w	r3, r3, #8
 80040e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <TIM_OC1_SetConfig+0x11c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <TIM_OC1_SetConfig+0xd2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <TIM_OC1_SetConfig+0x120>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_OC1_SetConfig+0xd2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <TIM_OC1_SetConfig+0x124>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_OC1_SetConfig+0xd2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <TIM_OC1_SetConfig+0x128>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_OC1_SetConfig+0xd2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <TIM_OC1_SetConfig+0x12c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_OC1_SetConfig+0xd2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <TIM_OC1_SetConfig+0x130>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d111      	bne.n	800414e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	621a      	str	r2, [r3, #32]
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800
 8004188:	40015000 	.word	0x40015000

0800418c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0210 	bic.w	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a2c      	ldr	r2, [pc, #176]	; (800429c <TIM_OC2_SetConfig+0x110>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_OC2_SetConfig+0x74>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <TIM_OC2_SetConfig+0x114>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_OC2_SetConfig+0x74>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <TIM_OC2_SetConfig+0x118>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10d      	bne.n	800421c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <TIM_OC2_SetConfig+0x110>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <TIM_OC2_SetConfig+0xc0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <TIM_OC2_SetConfig+0x114>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_OC2_SetConfig+0xc0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <TIM_OC2_SetConfig+0x11c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_OC2_SetConfig+0xc0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <TIM_OC2_SetConfig+0x120>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_OC2_SetConfig+0xc0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <TIM_OC2_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC2_SetConfig+0xc0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <TIM_OC2_SetConfig+0x118>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d113      	bne.n	8004274 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004252:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40013400 	.word	0x40013400
 80042a4:	40015000 	.word	0x40015000
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2b      	ldr	r2, [pc, #172]	; (80043c0 <TIM_OC3_SetConfig+0x10c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_OC3_SetConfig+0x72>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <TIM_OC3_SetConfig+0x110>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC3_SetConfig+0x72>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <TIM_OC3_SetConfig+0x114>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10d      	bne.n	8004342 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004340:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <TIM_OC3_SetConfig+0x10c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <TIM_OC3_SetConfig+0xbe>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <TIM_OC3_SetConfig+0x110>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00f      	beq.n	8004372 <TIM_OC3_SetConfig+0xbe>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <TIM_OC3_SetConfig+0x118>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_OC3_SetConfig+0xbe>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <TIM_OC3_SetConfig+0x11c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_OC3_SetConfig+0xbe>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <TIM_OC3_SetConfig+0x120>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC3_SetConfig+0xbe>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <TIM_OC3_SetConfig+0x114>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d113      	bne.n	800439a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40013400 	.word	0x40013400
 80043c8:	40015000 	.word	0x40015000
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800

080043d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	031b      	lsls	r3, r3, #12
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a1a      	ldr	r2, [pc, #104]	; (80044a0 <TIM_OC4_SetConfig+0xc8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <TIM_OC4_SetConfig+0x8c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a19      	ldr	r2, [pc, #100]	; (80044a4 <TIM_OC4_SetConfig+0xcc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_OC4_SetConfig+0x8c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <TIM_OC4_SetConfig+0xd0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_OC4_SetConfig+0x8c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a17      	ldr	r2, [pc, #92]	; (80044ac <TIM_OC4_SetConfig+0xd4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_OC4_SetConfig+0x8c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <TIM_OC4_SetConfig+0xd8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_OC4_SetConfig+0x8c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <TIM_OC4_SetConfig+0xdc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d109      	bne.n	8004478 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40013400 	.word	0x40013400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800
 80044b4:	40015000 	.word	0x40015000

080044b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <TIM_OC5_SetConfig+0xbc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <TIM_OC5_SetConfig+0x82>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a18      	ldr	r2, [pc, #96]	; (8004578 <TIM_OC5_SetConfig+0xc0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00f      	beq.n	800453a <TIM_OC5_SetConfig+0x82>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <TIM_OC5_SetConfig+0xc4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00b      	beq.n	800453a <TIM_OC5_SetConfig+0x82>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <TIM_OC5_SetConfig+0xc8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <TIM_OC5_SetConfig+0x82>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <TIM_OC5_SetConfig+0xcc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d003      	beq.n	800453a <TIM_OC5_SetConfig+0x82>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a14      	ldr	r2, [pc, #80]	; (8004588 <TIM_OC5_SetConfig+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d109      	bne.n	800454e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800
 8004588:	40015000 	.word	0x40015000

0800458c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	051b      	lsls	r3, r3, #20
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1a      	ldr	r2, [pc, #104]	; (800464c <TIM_OC6_SetConfig+0xc0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <TIM_OC6_SetConfig+0x84>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <TIM_OC6_SetConfig+0xc4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00f      	beq.n	8004610 <TIM_OC6_SetConfig+0x84>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <TIM_OC6_SetConfig+0xc8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_OC6_SetConfig+0x84>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <TIM_OC6_SetConfig+0xcc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_OC6_SetConfig+0x84>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <TIM_OC6_SetConfig+0xd0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_OC6_SetConfig+0x84>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a15      	ldr	r2, [pc, #84]	; (8004660 <TIM_OC6_SetConfig+0xd4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800
 8004660:	40015000 	.word	0x40015000

08004664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0201 	bic.w	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800468e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 030a 	bic.w	r3, r3, #10
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b087      	sub	sp, #28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0210 	bic.w	r2, r3, #16
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	031b      	lsls	r3, r3, #12
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	f043 0307 	orr.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	431a      	orrs	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2201      	movs	r2, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e06d      	b.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a30      	ldr	r2, [pc, #192]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2f      	ldr	r2, [pc, #188]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2d      	ldr	r2, [pc, #180]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004840:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01d      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d018      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00e      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a11      	ldr	r2, [pc, #68]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10c      	bne.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40013400 	.word	0x40013400
 80048ec:	40015000 	.word	0x40015000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40014000 	.word	0x40014000

080048fc <__libc_init_array>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4e0d      	ldr	r6, [pc, #52]	; (8004934 <__libc_init_array+0x38>)
 8004900:	4c0d      	ldr	r4, [pc, #52]	; (8004938 <__libc_init_array+0x3c>)
 8004902:	1ba4      	subs	r4, r4, r6
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	2500      	movs	r5, #0
 8004908:	42a5      	cmp	r5, r4
 800490a:	d109      	bne.n	8004920 <__libc_init_array+0x24>
 800490c:	4e0b      	ldr	r6, [pc, #44]	; (800493c <__libc_init_array+0x40>)
 800490e:	4c0c      	ldr	r4, [pc, #48]	; (8004940 <__libc_init_array+0x44>)
 8004910:	f000 f820 	bl	8004954 <_init>
 8004914:	1ba4      	subs	r4, r4, r6
 8004916:	10a4      	asrs	r4, r4, #2
 8004918:	2500      	movs	r5, #0
 800491a:	42a5      	cmp	r5, r4
 800491c:	d105      	bne.n	800492a <__libc_init_array+0x2e>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004924:	4798      	blx	r3
 8004926:	3501      	adds	r5, #1
 8004928:	e7ee      	b.n	8004908 <__libc_init_array+0xc>
 800492a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800492e:	4798      	blx	r3
 8004930:	3501      	adds	r5, #1
 8004932:	e7f2      	b.n	800491a <__libc_init_array+0x1e>
 8004934:	0800499c 	.word	0x0800499c
 8004938:	0800499c 	.word	0x0800499c
 800493c:	0800499c 	.word	0x0800499c
 8004940:	080049a0 	.word	0x080049a0

08004944 <memset>:
 8004944:	4402      	add	r2, r0
 8004946:	4603      	mov	r3, r0
 8004948:	4293      	cmp	r3, r2
 800494a:	d100      	bne.n	800494e <memset+0xa>
 800494c:	4770      	bx	lr
 800494e:	f803 1b01 	strb.w	r1, [r3], #1
 8004952:	e7f9      	b.n	8004948 <memset+0x4>

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
