
Usart_Bluetooth_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e68  08002e68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e68  08002e68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e68  08002e68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08002e7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002e7c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e79  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012aa  00000000  00000000  00026eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  00028160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000598  00000000  00000000  000287a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b666  00000000  00000000  00028d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000606a  00000000  00000000  0004439e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2776  00000000  00000000  0004a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ecb7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001830  00000000  00000000  000ecbfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e00 	.word	0x08002e00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002e00 	.word	0x08002e00

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa42 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f86e 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8fa 	bl	80003d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8c8 	bl	8000378 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_UART_Receive(&huart2, (uint8_t*)rx_data, 50, 500);
 80001e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001ec:	2232      	movs	r2, #50	; 0x32
 80001ee:	492d      	ldr	r1, [pc, #180]	; (80002a4 <main+0xd0>)
 80001f0:	482d      	ldr	r0, [pc, #180]	; (80002a8 <main+0xd4>)
 80001f2:	f002 f990 	bl	8002516 <HAL_UART_Receive>
		if (rx_data[0] == 'o' && rx_data[1] == 'n')
 80001f6:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <main+0xd0>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b6f      	cmp	r3, #111	; 0x6f
 80001fc:	d125      	bne.n	800024a <main+0x76>
 80001fe:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <main+0xd0>)
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	2b6e      	cmp	r3, #110	; 0x6e
 8000204:	d121      	bne.n	800024a <main+0x76>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020e:	f000 fd1f 	bl	8000c50 <HAL_GPIO_WritePin>
			if (led_state != true) {
 8000212:	4b26      	ldr	r3, [pc, #152]	; (80002ac <main+0xd8>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	f083 0301 	eor.w	r3, r3, #1
 800021a:	b2db      	uxtb	r3, r3
 800021c:	2b00      	cmp	r3, #0
 800021e:	d040      	beq.n	80002a2 <main+0xce>
				HAL_UART_Transmit(&huart2, (uint8_t*) tx_buffer,sprintf(tx_buffer, "Led Yandi."), 500);
 8000220:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <main+0xdc>)
 8000222:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <main+0xe0>)
 8000224:	cb03      	ldmia	r3!, {r0, r1}
 8000226:	6010      	str	r0, [r2, #0]
 8000228:	6051      	str	r1, [r2, #4]
 800022a:	8819      	ldrh	r1, [r3, #0]
 800022c:	789b      	ldrb	r3, [r3, #2]
 800022e:	8111      	strh	r1, [r2, #8]
 8000230:	7293      	strb	r3, [r2, #10]
 8000232:	230a      	movs	r3, #10
 8000234:	b29a      	uxth	r2, r3
 8000236:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800023a:	491d      	ldr	r1, [pc, #116]	; (80002b0 <main+0xdc>)
 800023c:	481a      	ldr	r0, [pc, #104]	; (80002a8 <main+0xd4>)
 800023e:	f002 f8d7 	bl	80023f0 <HAL_UART_Transmit>
				led_state = true;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <main+0xd8>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
			if (led_state != true) {
 8000248:	e02b      	b.n	80002a2 <main+0xce>
			}
		}

		else if (rx_data[0] == 'o' && rx_data[1] == 'f' && rx_data[2] == 'f') {
 800024a:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <main+0xd0>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b6f      	cmp	r3, #111	; 0x6f
 8000250:	d1ca      	bne.n	80001e8 <main+0x14>
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <main+0xd0>)
 8000254:	785b      	ldrb	r3, [r3, #1]
 8000256:	2b66      	cmp	r3, #102	; 0x66
 8000258:	d1c6      	bne.n	80001e8 <main+0x14>
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <main+0xd0>)
 800025c:	789b      	ldrb	r3, [r3, #2]
 800025e:	2b66      	cmp	r3, #102	; 0x66
 8000260:	d1c2      	bne.n	80001e8 <main+0x14>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2120      	movs	r1, #32
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f000 fcf1 	bl	8000c50 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 800026e:	200a      	movs	r0, #10
 8000270:	f000 fa5c 	bl	800072c <HAL_Delay>
			if (led_state != false) {
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <main+0xd8>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0b5      	beq.n	80001e8 <main+0x14>
				HAL_UART_Transmit(&huart2, (uint8_t*) tx_buffer,sprintf(tx_buffer, "Led Sondu."), 100);
 800027c:	4a0c      	ldr	r2, [pc, #48]	; (80002b0 <main+0xdc>)
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <main+0xe4>)
 8000280:	cb03      	ldmia	r3!, {r0, r1}
 8000282:	6010      	str	r0, [r2, #0]
 8000284:	6051      	str	r1, [r2, #4]
 8000286:	8819      	ldrh	r1, [r3, #0]
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	8111      	strh	r1, [r2, #8]
 800028c:	7293      	strb	r3, [r2, #10]
 800028e:	230a      	movs	r3, #10
 8000290:	b29a      	uxth	r2, r3
 8000292:	2364      	movs	r3, #100	; 0x64
 8000294:	4906      	ldr	r1, [pc, #24]	; (80002b0 <main+0xdc>)
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <main+0xd4>)
 8000298:	f002 f8aa 	bl	80023f0 <HAL_UART_Transmit>
				led_state = false;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <main+0xd8>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(&huart2, (uint8_t*)rx_data, 50, 500);
 80002a2:	e7a1      	b.n	80001e8 <main+0x14>
 80002a4:	20000060 	.word	0x20000060
 80002a8:	20000094 	.word	0x20000094
 80002ac:	20000028 	.word	0x20000028
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	08002e18 	.word	0x08002e18
 80002b8:	08002e24 	.word	0x08002e24

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b0a6      	sub	sp, #152	; 0x98
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fd90 	bl	8002df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2258      	movs	r2, #88	; 0x58
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fd82 	bl	8002df0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	2302      	movs	r3, #2
 80002ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f4:	2310      	movs	r3, #16
 80002f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000308:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fcb0 	bl	8000c80 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000326:	f000 f8bf 	bl	80004a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2302      	movs	r3, #2
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000340:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fbb0 	bl	8001aac <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000352:	f000 f8a9 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000356:	2302      	movs	r3, #2
 8000358:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fdd9 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800036c:	f000 f89c 	bl	80004a8 <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3798      	adds	r7, #152	; 0x98
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 800037e:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <MX_USART2_UART_Init+0x5c>)
 8000380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 8000384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003bc:	f001 ffca 	bl	8002354 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003c6:	f000 f86f 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000094 	.word	0x20000094
 80003d4:	40004400 	.word	0x40004400

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <MX_GPIO_Init+0xc4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a2a      	ldr	r2, [pc, #168]	; (800049c <MX_GPIO_Init+0xc4>)
 80003f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b28      	ldr	r3, [pc, #160]	; (800049c <MX_GPIO_Init+0xc4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <MX_GPIO_Init+0xc4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a24      	ldr	r2, [pc, #144]	; (800049c <MX_GPIO_Init+0xc4>)
 800040c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <MX_GPIO_Init+0xc4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <MX_GPIO_Init+0xc4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <MX_GPIO_Init+0xc4>)
 8000424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <MX_GPIO_Init+0xc4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <MX_GPIO_Init+0xc4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a18      	ldr	r2, [pc, #96]	; (800049c <MX_GPIO_Init+0xc4>)
 800043c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <MX_GPIO_Init+0xc4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f000 fbfb 	bl	8000c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800045a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_GPIO_Init+0xc8>)
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	480d      	ldr	r0, [pc, #52]	; (80004a4 <MX_GPIO_Init+0xcc>)
 8000470:	f000 fa64 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000474:	2320      	movs	r3, #32
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4619      	mov	r1, r3
 800048a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048e:	f000 fa55 	bl	800093c <HAL_GPIO_Init>

}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	; 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	10210000 	.word	0x10210000
 80004a4:	48000800 	.word	0x48000800

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <HAL_MspInit+0x44>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_MspInit+0x44>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_MspInit+0x44>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <HAL_MspInit+0x44>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_MspInit+0x44>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ee:	2007      	movs	r0, #7
 80004f0:	f000 f9f0 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a17      	ldr	r2, [pc, #92]	; (800057c <HAL_UART_MspInit+0x7c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d128      	bne.n	8000574 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <HAL_UART_MspInit+0x80>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a16      	ldr	r2, [pc, #88]	; (8000580 <HAL_UART_MspInit+0x80>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_UART_MspInit+0x80>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_UART_MspInit+0x80>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a10      	ldr	r2, [pc, #64]	; (8000580 <HAL_UART_MspInit+0x80>)
 8000540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_UART_MspInit+0x80>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000552:	230c      	movs	r3, #12
 8000554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000562:	2307      	movs	r3, #7
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f000 f9e4 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	; 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40004400 	.word	0x40004400
 8000580:	40021000 	.word	0x40021000

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f888 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <SystemInit+0x28>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <SystemInit+0x28>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <SystemInit+0x28>)
 80005f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005fa:	609a      	str	r2, [r3, #8]
#endif
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800060c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000644 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000610:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000612:	e003      	b.n	800061c <LoopCopyDataInit>

08000614 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000616:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000618:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800061a:	3104      	adds	r1, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <LoopForever+0xa>)
	ldr	r3, =_edata
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000620:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000622:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000624:	d3f6      	bcc.n	8000614 <CopyDataInit>
	ldr	r2, =_sbss
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000628:	e002      	b.n	8000630 <LoopFillZerobss>

0800062a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800062a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800062c:	f842 3b04 	str.w	r3, [r2], #4

08000630 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <LoopForever+0x16>)
	cmp	r2, r3
 8000632:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000634:	d3f9      	bcc.n	800062a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000636:	f7ff ffd3 	bl	80005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063a:	f002 fbb5 	bl	8002da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800063e:	f7ff fdc9 	bl	80001d4 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000644:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000648:	08002e70 	.word	0x08002e70
	ldr	r0, =_sdata
 800064c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000650:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000658:	20000118 	.word	0x20000118

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f92f 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f808 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff ff1c 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x54>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x58>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f939 	bl	8000922 <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f000 f90f 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_InitTick+0x5c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_IncTick+0x20>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_IncTick+0x24>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_IncTick+0x24>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008
 8000710:	20000114 	.word	0x20000114

08000714 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;  
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <HAL_GetTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000114 	.word	0x20000114

0800072c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000734:	f7ff ffee 	bl	8000714 <HAL_GetTick>
 8000738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000744:	d005      	beq.n	8000752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_Delay+0x40>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4413      	add	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000752:	bf00      	nop
 8000754:	f7ff ffde 	bl	8000714 <HAL_GetTick>
 8000758:	4602      	mov	r2, r0
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	429a      	cmp	r2, r3
 8000762:	d8f7      	bhi.n	8000754 <HAL_Delay+0x28>
  {
  }
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000008 	.word	0x20000008

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff8e 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff47 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff5c 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff8e 	bl	8000828 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5d 	bl	80007d4 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffb0 	bl	8000890 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e160      	b.n	8000c0e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8152 	beq.w	8000c08 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d00b      	beq.n	8000984 <HAL_GPIO_Init+0x48>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d007      	beq.n	8000984 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	2b11      	cmp	r3, #17
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b12      	cmp	r3, #18
 8000982:	d130      	bne.n	80009e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ba:	2201      	movs	r2, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	f003 0201 	and.w	r2, r3, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0xea>
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b12      	cmp	r3, #18
 8000a24:	d123      	bne.n	8000a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	f003 0307 	and.w	r3, r3, #7
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	6939      	ldr	r1, [r7, #16]
 8000a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0203 	and.w	r2, r3, #3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 80ac 	beq.w	8000c08 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a5d      	ldr	r2, [pc, #372]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac8:	4a59      	ldr	r2, [pc, #356]	; (8000c30 <HAL_GPIO_Init+0x2f4>)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	3302      	adds	r3, #2
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f003 0303 	and.w	r3, r3, #3
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	220f      	movs	r2, #15
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000af2:	d025      	beq.n	8000b40 <HAL_GPIO_Init+0x204>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a4f      	ldr	r2, [pc, #316]	; (8000c34 <HAL_GPIO_Init+0x2f8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d01f      	beq.n	8000b3c <HAL_GPIO_Init+0x200>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a4e      	ldr	r2, [pc, #312]	; (8000c38 <HAL_GPIO_Init+0x2fc>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d019      	beq.n	8000b38 <HAL_GPIO_Init+0x1fc>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a4d      	ldr	r2, [pc, #308]	; (8000c3c <HAL_GPIO_Init+0x300>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d013      	beq.n	8000b34 <HAL_GPIO_Init+0x1f8>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <HAL_GPIO_Init+0x304>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d00d      	beq.n	8000b30 <HAL_GPIO_Init+0x1f4>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <HAL_GPIO_Init+0x308>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0x1f0>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <HAL_GPIO_Init+0x30c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d101      	bne.n	8000b28 <HAL_GPIO_Init+0x1ec>
 8000b24:	2306      	movs	r3, #6
 8000b26:	e00c      	b.n	8000b42 <HAL_GPIO_Init+0x206>
 8000b28:	2307      	movs	r3, #7
 8000b2a:	e00a      	b.n	8000b42 <HAL_GPIO_Init+0x206>
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	e008      	b.n	8000b42 <HAL_GPIO_Init+0x206>
 8000b30:	2304      	movs	r3, #4
 8000b32:	e006      	b.n	8000b42 <HAL_GPIO_Init+0x206>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e004      	b.n	8000b42 <HAL_GPIO_Init+0x206>
 8000b38:	2302      	movs	r3, #2
 8000b3a:	e002      	b.n	8000b42 <HAL_GPIO_Init+0x206>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e000      	b.n	8000b42 <HAL_GPIO_Init+0x206>
 8000b40:	2300      	movs	r3, #0
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	f002 0203 	and.w	r2, r2, #3
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b52:	4937      	ldr	r1, [pc, #220]	; (8000c30 <HAL_GPIO_Init+0x2f4>)
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	3302      	adds	r3, #2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b60:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b84:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bae:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <HAL_GPIO_Init+0x310>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	fa22 f303 	lsr.w	r3, r2, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f47f ae97 	bne.w	800094c <HAL_GPIO_Init+0x10>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	48000400 	.word	0x48000400
 8000c38:	48000800 	.word	0x48000800
 8000c3c:	48000c00 	.word	0x48000c00
 8000c40:	48001000 	.word	0x48001000
 8000c44:	48001400 	.word	0x48001400
 8000c48:	48001800 	.word	0x48001800
 8000c4c:	40010400 	.word	0x40010400

08000c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c60:	787b      	ldrb	r3, [r7, #1]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c6c:	e002      	b.n	8000c74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f000 bf01 	b.w	8001a9c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 8160 	beq.w	8000f6a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000caa:	4bae      	ldr	r3, [pc, #696]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d00c      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb6:	4bab      	ldr	r3, [pc, #684]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b08      	cmp	r3, #8
 8000cc0:	d159      	bne.n	8000d76 <HAL_RCC_OscConfig+0xf6>
 8000cc2:	4ba8      	ldr	r3, [pc, #672]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cce:	d152      	bne.n	8000d76 <HAL_RCC_OscConfig+0xf6>
 8000cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000cdc:	fa93 f3a3 	rbit	r3, r3
 8000ce0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ce4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	fab3 f383 	clz	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d102      	bne.n	8000d02 <HAL_RCC_OscConfig+0x82>
 8000cfc:	4b99      	ldr	r3, [pc, #612]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0xae>
 8000d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d0e:	fa93 f3a3 	rbit	r3, r3
 8000d12:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d1e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d2a:	4b8e      	ldr	r3, [pc, #568]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d32:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d36:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d42:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	f002 021f 	and.w	r2, r2, #31
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8102 	beq.w	8000f68 <HAL_RCC_OscConfig+0x2e8>
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 80fc 	bne.w	8000f68 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f000 be93 	b.w	8001a9c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d80:	d106      	bne.n	8000d90 <HAL_RCC_OscConfig+0x110>
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e030      	b.n	8000df2 <HAL_RCC_OscConfig+0x172>
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x134>
 8000d9a:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a71      	ldr	r2, [pc, #452]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a6e      	ldr	r2, [pc, #440]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e01e      	b.n	8000df2 <HAL_RCC_OscConfig+0x172>
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbe:	d10c      	bne.n	8000dda <HAL_RCC_OscConfig+0x15a>
 8000dc0:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a67      	ldr	r2, [pc, #412]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b65      	ldr	r3, [pc, #404]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a64      	ldr	r2, [pc, #400]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e00b      	b.n	8000df2 <HAL_RCC_OscConfig+0x172>
 8000dda:	4b62      	ldr	r3, [pc, #392]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a61      	ldr	r2, [pc, #388]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a5e      	ldr	r2, [pc, #376]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d059      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fc8a 	bl	8000714 <HAL_GetTick>
 8000e00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e04:	e00a      	b.n	8000e1c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fc85 	bl	8000714 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d902      	bls.n	8000e1c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f000 be40 	b.w	8001a9c <HAL_RCC_OscConfig+0xe1c>
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_OscConfig+0x1ce>
 8000e48:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	e015      	b.n	8000e7a <HAL_RCC_OscConfig+0x1fa>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e66:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e76:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e7e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000e82:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000e86:	fa92 f2a2 	rbit	r2, r2
 8000e8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000e8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e92:	fab2 f282 	clz	r2, r2
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0ab      	beq.n	8000e06 <HAL_RCC_OscConfig+0x186>
 8000eae:	e05c      	b.n	8000f6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc30 	bl	8000714 <HAL_GetTick>
 8000eb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb8:	e00a      	b.n	8000ed0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eba:	f7ff fc2b 	bl	8000714 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	d902      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f000 bde6 	b.w	8001a9c <HAL_RCC_OscConfig+0xe1c>
 8000ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000edc:	fa93 f3a3 	rbit	r3, r3
 8000ee0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000ee4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee8:	fab3 f383 	clz	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_OscConfig+0x282>
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	e015      	b.n	8000f2e <HAL_RCC_OscConfig+0x2ae>
 8000f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f06:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_RCC_OscConfig+0x2e4>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f32:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f36:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f3a:	fa92 f2a2 	rbit	r2, r2
 8000f3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000f42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f46:	fab2 f282 	clz	r2, r2
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	f042 0220 	orr.w	r2, r2, #32
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	f002 021f 	and.w	r2, r2, #31
 8000f56:	2101      	movs	r1, #1
 8000f58:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1ab      	bne.n	8000eba <HAL_RCC_OscConfig+0x23a>
 8000f62:	e002      	b.n	8000f6a <HAL_RCC_OscConfig+0x2ea>
 8000f64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 8170 	beq.w	800125a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f7a:	4bd0      	ldr	r3, [pc, #832]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00c      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f86:	4bcd      	ldr	r3, [pc, #820]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d16d      	bne.n	800106e <HAL_RCC_OscConfig+0x3ee>
 8000f92:	4bca      	ldr	r3, [pc, #808]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f9e:	d166      	bne.n	800106e <HAL_RCC_OscConfig+0x3ee>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000fb2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d102      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x350>
 8000fca:	4bbc      	ldr	r3, [pc, #752]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	e013      	b.n	8000ff8 <HAL_RCC_OscConfig+0x378>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fe8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ff4:	4bb1      	ldr	r3, [pc, #708]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000ffe:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001002:	fa92 f2a2 	rbit	r2, r2
 8001006:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800100a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800100e:	fab2 f282 	clz	r2, r2
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	f042 0220 	orr.w	r2, r2, #32
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	f002 021f 	and.w	r2, r2, #31
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <HAL_RCC_OscConfig+0x3ba>
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d002      	beq.n	800103a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	f000 bd31 	b.w	8001a9c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103a:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	21f8      	movs	r1, #248	; 0xf8
 800104a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001052:	fa91 f1a1 	rbit	r1, r1
 8001056:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800105a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800105e:	fab1 f181 	clz	r1, r1
 8001062:	b2c9      	uxtb	r1, r1
 8001064:	408b      	lsls	r3, r1
 8001066:	4995      	ldr	r1, [pc, #596]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106c:	e0f5      	b.n	800125a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 8085 	beq.w	8001184 <HAL_RCC_OscConfig+0x504>
 800107a:	2301      	movs	r3, #1
 800107c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800108c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800109a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	461a      	mov	r2, r3
 80010a2:	2301      	movs	r3, #1
 80010a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fb35 	bl	8000714 <HAL_GetTick>
 80010aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ae:	e00a      	b.n	80010c6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b0:	f7ff fb30 	bl	8000714 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d902      	bls.n	80010c6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	f000 bceb 	b.w	8001a9c <HAL_RCC_OscConfig+0xe1c>
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80010d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d102      	bne.n	80010f6 <HAL_RCC_OscConfig+0x476>
 80010f0:	4b72      	ldr	r3, [pc, #456]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	e013      	b.n	800111e <HAL_RCC_OscConfig+0x49e>
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800110e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800111a:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	2202      	movs	r2, #2
 8001120:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001124:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001128:	fa92 f2a2 	rbit	r2, r2
 800112c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001130:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001134:	fab2 f282 	clz	r2, r2
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	f042 0220 	orr.w	r2, r2, #32
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	f002 021f 	and.w	r2, r2, #31
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0af      	beq.n	80010b0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	21f8      	movs	r1, #248	; 0xf8
 8001160:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001168:	fa91 f1a1 	rbit	r1, r1
 800116c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001170:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001174:	fab1 f181 	clz	r1, r1
 8001178:	b2c9      	uxtb	r1, r1
 800117a:	408b      	lsls	r3, r1
 800117c:	494f      	ldr	r1, [pc, #316]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
 8001182:	e06a      	b.n	800125a <HAL_RCC_OscConfig+0x5da>
 8001184:	2301      	movs	r3, #1
 8001186:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001196:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	461a      	mov	r2, r3
 80011ac:	2300      	movs	r3, #0
 80011ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fab0 	bl	8000714 <HAL_GetTick>
 80011b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff faab 	bl	8000714 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d902      	bls.n	80011d0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f000 bc66 	b.w	8001a9c <HAL_RCC_OscConfig+0xe1c>
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80011e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	095b      	lsrs	r3, r3, #5
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <HAL_RCC_OscConfig+0x580>
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	e013      	b.n	8001228 <HAL_RCC_OscConfig+0x5a8>
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001218:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_RCC_OscConfig+0x63c>)
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	2202      	movs	r2, #2
 800122a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800122e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001232:	fa92 f2a2 	rbit	r2, r2
 8001236:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800123a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800123e:	fab2 f282 	clz	r2, r2
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f042 0220 	orr.w	r2, r2, #32
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	f002 021f 	and.w	r2, r2, #31
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	4013      	ands	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1af      	bne.n	80011ba <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80da 	beq.w	800141e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d069      	beq.n	8001348 <HAL_RCC_OscConfig+0x6c8>
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001286:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_OscConfig+0x640>)
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	461a      	mov	r2, r3
 800129a:	2301      	movs	r3, #1
 800129c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fa39 	bl	8000714 <HAL_GetTick>
 80012a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e00d      	b.n	80012c4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fa34 	bl	8000714 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d905      	bls.n	80012c4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e3ef      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	10908120 	.word	0x10908120
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012ce:	fa93 f2a3 	rbit	r2, r3
 80012d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80012dc:	2202      	movs	r2, #2
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	fa93 f2a3 	rbit	r2, r3
 80012ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012f4:	2202      	movs	r2, #2
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001306:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001308:	4ba4      	ldr	r3, [pc, #656]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 800130a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001310:	2102      	movs	r1, #2
 8001312:	6019      	str	r1, [r3, #0]
 8001314:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	fa93 f1a3 	rbit	r1, r3
 800131e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001322:	6019      	str	r1, [r3, #0]
  return result;
 8001324:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0b0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x628>
 8001346:	e06a      	b.n	800141e <HAL_RCC_OscConfig+0x79e>
 8001348:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fa93 f2a3 	rbit	r2, r3
 800135a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800135e:	601a      	str	r2, [r3, #0]
  return result;
 8001360:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001364:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4b8c      	ldr	r3, [pc, #560]	; (80015a0 <HAL_RCC_OscConfig+0x920>)
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	461a      	mov	r2, r3
 8001376:	2300      	movs	r3, #0
 8001378:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff f9cb 	bl	8000714 <HAL_GetTick>
 800137e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	e009      	b.n	8001398 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff f9c6 	bl	8000714 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e381      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
 8001398:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800139c:	2202      	movs	r2, #2
 800139e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	fa93 f2a3 	rbit	r2, r3
 80013aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b4:	2202      	movs	r2, #2
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fa93 f2a3 	rbit	r2, r3
 80013c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fa93 f2a3 	rbit	r2, r3
 80013da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e8:	2102      	movs	r1, #2
 80013ea:	6019      	str	r1, [r3, #0]
 80013ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f1a3 	rbit	r1, r3
 80013f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013fa:	6019      	str	r1, [r3, #0]
  return result;
 80013fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fab3 f383 	clz	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1b2      	bne.n	8001384 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8157 	beq.w	80016dc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001434:	4b59      	ldr	r3, [pc, #356]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d112      	bne.n	8001466 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	61d3      	str	r3, [r2, #28]
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001460:	2301      	movs	r3, #1
 8001462:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <HAL_RCC_OscConfig+0x924>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d11a      	bne.n	80014a8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x924>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <HAL_RCC_OscConfig+0x924>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff f949 	bl	8000714 <HAL_GetTick>
 8001482:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	e009      	b.n	800149c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001488:	f7ff f944 	bl	8000714 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b64      	cmp	r3, #100	; 0x64
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e2ff      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x924>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0ef      	beq.n	8001488 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x840>
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a39      	ldr	r2, [pc, #228]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	e02f      	b.n	8001520 <HAL_RCC_OscConfig+0x8a0>
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x864>
 80014ca:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a33      	ldr	r2, [pc, #204]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a30      	ldr	r2, [pc, #192]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0x8a0>
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x888>
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a2a      	ldr	r2, [pc, #168]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6213      	str	r3, [r2, #32]
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a27      	ldr	r2, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6213      	str	r3, [r2, #32]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0x8a0>
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a23      	ldr	r2, [pc, #140]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d06a      	beq.n	8001600 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff f8f3 	bl	8000714 <HAL_GetTick>
 800152e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff f8ee 	bl	8000714 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e2a7      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
 800154c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001550:	2202      	movs	r2, #2
 8001552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800157a:	601a      	str	r2, [r3, #0]
  return result;
 800157c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001580:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_OscConfig+0x928>
 8001596:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_RCC_OscConfig+0x91c>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	e013      	b.n	80015c4 <HAL_RCC_OscConfig+0x944>
 800159c:	40021000 	.word	0x40021000
 80015a0:	10908120 	.word	0x10908120
 80015a4:	40007000 	.word	0x40007000
 80015a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4bc0      	ldr	r3, [pc, #768]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015c8:	2102      	movs	r1, #2
 80015ca:	6011      	str	r1, [r2, #0]
 80015cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	fa92 f1a2 	rbit	r1, r2
 80015d6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015da:	6011      	str	r1, [r2, #0]
  return result;
 80015dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f002 021f 	and.w	r2, r2, #31
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d09a      	beq.n	8001534 <HAL_RCC_OscConfig+0x8b4>
 80015fe:	e063      	b.n	80016c8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff f888 	bl	8000714 <HAL_GetTick>
 8001604:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	e00b      	b.n	8001622 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff f883 	bl	8000714 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e23c      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
 8001622:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001626:	2202      	movs	r2, #2
 8001628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	fa93 f2a3 	rbit	r2, r3
 8001634:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800163e:	2202      	movs	r2, #2
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	fa93 f2a3 	rbit	r2, r3
 800164c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001650:	601a      	str	r2, [r3, #0]
  return result;
 8001652:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001656:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d102      	bne.n	8001672 <HAL_RCC_OscConfig+0x9f2>
 800166c:	4b95      	ldr	r3, [pc, #596]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	e00d      	b.n	800168e <HAL_RCC_OscConfig+0xa0e>
 8001672:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001676:	2202      	movs	r2, #2
 8001678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001692:	2102      	movs	r1, #2
 8001694:	6011      	str	r1, [r2, #0]
 8001696:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	fa92 f1a2 	rbit	r1, r2
 80016a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016a4:	6011      	str	r1, [r2, #0]
  return result;
 80016a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	fab2 f282 	clz	r2, r2
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	f002 021f 	and.w	r2, r2, #31
 80016bc:	2101      	movs	r1, #1
 80016be:	fa01 f202 	lsl.w	r2, r1, r2
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1a0      	bne.n	800160a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016c8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	4a7b      	ldr	r2, [pc, #492]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80016d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 81d9 	beq.w	8001a9a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	f000 81a6 	beq.w	8001a42 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 811e 	bne.w	800193e <HAL_RCC_OscConfig+0xcbe>
 8001702:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001706:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f2a3 	rbit	r2, r3
 8001716:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800171a:	601a      	str	r2, [r3, #0]
  return result;
 800171c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001720:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800172c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	461a      	mov	r2, r3
 8001734:	2300      	movs	r3, #0
 8001736:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7fe ffec 	bl	8000714 <HAL_GetTick>
 800173c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	e009      	b.n	8001756 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001742:	f7fe ffe7 	bl	8000714 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1a2      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
 8001756:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800175a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800175e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fa93 f2a3 	rbit	r2, r3
 800176a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800176e:	601a      	str	r2, [r3, #0]
  return result;
 8001770:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0xb10>
 800178a:	4b4e      	ldr	r3, [pc, #312]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0xb48>
 8001790:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017d0:	6011      	str	r1, [r2, #0]
 80017d2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	fa92 f1a2 	rbit	r1, r2
 80017dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017e0:	6011      	str	r1, [r2, #0]
  return result;
 80017e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f042 0220 	orr.w	r2, r2, #32
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	f002 021f 	and.w	r2, r2, #31
 80017f8:	2101      	movs	r1, #1
 80017fa:	fa01 f202 	lsl.w	r2, r1, r2
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d19e      	bne.n	8001742 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f023 020f 	bic.w	r2, r3, #15
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	492c      	ldr	r1, [pc, #176]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 8001814:	4313      	orrs	r3, r2
 8001816:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a19      	ldr	r1, [r3, #32]
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	430b      	orrs	r3, r1
 800182e:	4925      	ldr	r1, [pc, #148]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
 8001834:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800184c:	601a      	str	r2, [r3, #0]
  return result;
 800184e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001852:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	461a      	mov	r2, r3
 8001866:	2301      	movs	r3, #1
 8001868:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7fe ff53 	bl	8000714 <HAL_GetTick>
 800186e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001872:	e009      	b.n	8001888 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7fe ff4e 	bl	8000714 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e109      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
 8001888:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800188c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a0:	601a      	str	r2, [r3, #0]
  return result;
 80018a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0xc48>
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	e01e      	b.n	8001900 <HAL_RCC_OscConfig+0xc80>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0xe28>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001908:	6011      	str	r1, [r2, #0]
 800190a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fa92 f1a2 	rbit	r1, r2
 8001914:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001918:	6011      	str	r1, [r2, #0]
  return result;
 800191a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d09b      	beq.n	8001874 <HAL_RCC_OscConfig+0xbf4>
 800193c:	e0ad      	b.n	8001a9a <HAL_RCC_OscConfig+0xe1a>
 800193e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001942:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001956:	601a      	str	r2, [r3, #0]
  return result;
 8001958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001968:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	461a      	mov	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7fe fece 	bl	8000714 <HAL_GetTick>
 8001978:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	e009      	b.n	8001992 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197e:	f7fe fec9 	bl	8000714 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e084      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019aa:	601a      	str	r2, [r3, #0]
  return result;
 80019ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_OscConfig+0xd4c>
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <HAL_RCC_OscConfig+0xe28>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0xd84>
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_RCC_OscConfig+0xe28>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f107 0214 	add.w	r2, r7, #20
 8001a08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a0c:	6011      	str	r1, [r2, #0]
 8001a0e:	f107 0214 	add.w	r2, r7, #20
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	fa92 f1a2 	rbit	r1, r2
 8001a18:	f107 0210 	add.w	r2, r7, #16
 8001a1c:	6011      	str	r1, [r2, #0]
  return result;
 8001a1e:	f107 0210 	add.w	r2, r7, #16
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	fab2 f282 	clz	r2, r2
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f042 0220 	orr.w	r2, r2, #32
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f002 021f 	and.w	r2, r2, #31
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d19e      	bne.n	800197e <HAL_RCC_OscConfig+0xcfe>
 8001a40:	e02b      	b.n	8001a9a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e025      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0xe28>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_RCC_OscConfig+0xe28>)
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a64:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d111      	bne.n	8001a96 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d108      	bne.n	8001a96 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a88:	f003 020f 	and.w	r2, r3, #15
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09e      	sub	sp, #120	; 0x78
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e162      	b.n	8001d8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b90      	ldr	r3, [pc, #576]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d910      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0207 	bic.w	r2, r3, #7
 8001ada:	498b      	ldr	r1, [pc, #556]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e14a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	497f      	ldr	r1, [pc, #508]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 80dc 	beq.w	8001cd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d13c      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xf6>
 8001b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d102      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xa6>
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	e00f      	b.n	8001b72 <HAL_RCC_ClockConfig+0xc6>
 8001b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b64:	663b      	str	r3, [r7, #96]	; 0x60
 8001b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b76:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b7a:	fa92 f2a2 	rbit	r2, r2
 8001b7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f042 0220 	orr.w	r2, r2, #32
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f002 021f 	and.w	r2, r2, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d17b      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0f3      	b.n	8001d8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d13c      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x178>
 8001baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x128>
 8001bce:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e00f      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
 8001bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	647b      	str	r3, [r7, #68]	; 0x44
 8001be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
 8001be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf0:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bfc:	fa92 f2a2 	rbit	r2, r2
 8001c00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c04:	fab2 f282 	clz	r2, r2
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	f042 0220 	orr.w	r2, r2, #32
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f002 021f 	and.w	r2, r2, #31
 8001c14:	2101      	movs	r1, #1
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d13a      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0b2      	b.n	8001d8a <HAL_RCC_ClockConfig+0x2de>
 8001c24:	2302      	movs	r3, #2
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x1a0>
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e00d      	b.n	8001c68 <HAL_RCC_ClockConfig+0x1bc>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	2302      	movs	r3, #2
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	2202      	movs	r2, #2
 8001c6a:	61ba      	str	r2, [r7, #24]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	fa92 f2a2 	rbit	r2, r2
 8001c72:	617a      	str	r2, [r7, #20]
  return result;
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	fab2 f282 	clz	r2, r2
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f002 021f 	and.w	r2, r2, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e079      	b.n	8001d8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	491a      	ldr	r1, [pc, #104]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7fe fd34 	bl	8000714 <HAL_GetTick>
 8001cac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7fe fd30 	bl	8000714 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e061      	b.n	8001d8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d214      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4906      	ldr	r1, [pc, #24]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e040      	b.n	8001d8a <HAL_RCC_ClockConfig+0x2de>
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_ClockConfig+0x2e8>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	491a      	ldr	r1, [pc, #104]	; (8001d94 <HAL_RCC_ClockConfig+0x2e8>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_RCC_ClockConfig+0x2e8>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4912      	ldr	r1, [pc, #72]	; (8001d94 <HAL_RCC_ClockConfig+0x2e8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d4e:	f000 f829 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d52:	4601      	mov	r1, r0
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_ClockConfig+0x2e8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5c:	22f0      	movs	r2, #240	; 0xf0
 8001d5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	60fa      	str	r2, [r7, #12]
  return result;
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	40d3      	lsrs	r3, r2
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x2ec>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_RCC_ClockConfig+0x2f0>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_RCC_ClockConfig+0x2f4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fc82 	bl	800068c <HAL_InitTick>
  
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3778      	adds	r7, #120	; 0x78
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08002e30 	.word	0x08002e30
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x36>
 8001dd2:	e03f      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dd6:	623b      	str	r3, [r7, #32]
      break;
 8001dd8:	e03f      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001de0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001de4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	fa92 f2a2 	rbit	r2, r2
 8001dec:	607a      	str	r2, [r7, #4]
  return result;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	fab2 f282 	clz	r2, r2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	40d3      	lsrs	r3, r2
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	220f      	movs	r2, #15
 8001e08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	fa92 f2a2 	rbit	r2, r2
 8001e10:	60fa      	str	r2, [r7, #12]
  return result;
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	fab2 f282 	clz	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	40d3      	lsrs	r3, r2
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e2c:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3c:	e007      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	623b      	str	r3, [r7, #32]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e56:	623b      	str	r3, [r7, #32]
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	372c      	adds	r7, #44	; 0x2c
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	007a1200 	.word	0x007a1200
 8001e70:	08002e48 	.word	0x08002e48
 8001e74:	08002e58 	.word	0x08002e58

08001e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e96:	f7ff ffef 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ea4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ea8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	fa92 f2a2 	rbit	r2, r2
 8001eb0:	603a      	str	r2, [r7, #0]
  return result;
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	fab2 f282 	clz	r2, r2
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	40d3      	lsrs	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08002e40 	.word	0x08002e40

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001eda:	f7ff ffcd 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001ede:	4601      	mov	r1, r0
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ee8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001eec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	603a      	str	r2, [r7, #0]
  return result;
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	40d3      	lsrs	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08002e40 	.word	0x08002e40

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b092      	sub	sp, #72	; 0x48
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80d7 	beq.w	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10e      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f52:	61d3      	str	r3, [r2, #28]
 8001f54:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a41      	ldr	r2, [pc, #260]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fbc9 	bl	8000714 <HAL_GetTick>
 8001f82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe fbc5 	bl	8000714 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	; 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1d6      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b38      	ldr	r3, [pc, #224]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8084 	beq.w	80020be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d07c      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	461a      	mov	r2, r3
 8001fee:	2301      	movs	r3, #1
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	461a      	mov	r2, r3
 8002012:	2300      	movs	r3, #0
 8002014:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002016:	4a18      	ldr	r2, [pc, #96]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800201c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d04b      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fb75 	bl	8000714 <HAL_GetTick>
 800202a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fb71 	bl	8000714 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e180      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002044:	2302      	movs	r3, #2
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	2302      	movs	r3, #2
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	61fb      	str	r3, [r7, #28]
  return result;
 800205c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d108      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002072:	4b01      	ldr	r3, [pc, #4]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	e00d      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	10908100 	.word	0x10908100
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	4ba0      	ldr	r3, [pc, #640]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2202      	movs	r2, #2
 8002096:	613a      	str	r2, [r7, #16]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	fa92 f2a2 	rbit	r2, r2
 800209e:	60fa      	str	r2, [r7, #12]
  return result;
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0b7      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020be:	4b95      	ldr	r3, [pc, #596]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4992      	ldr	r1, [pc, #584]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4a8d      	ldr	r2, [pc, #564]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f0:	4b88      	ldr	r3, [pc, #544]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f023 0203 	bic.w	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4985      	ldr	r1, [pc, #532]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210e:	4b81      	ldr	r3, [pc, #516]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	497e      	ldr	r1, [pc, #504]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800211c:	4313      	orrs	r3, r2
 800211e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800212c:	4b79      	ldr	r3, [pc, #484]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4976      	ldr	r1, [pc, #472]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f023 0210 	bic.w	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	496f      	ldr	r1, [pc, #444]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002158:	4313      	orrs	r3, r2
 800215a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	4967      	ldr	r1, [pc, #412]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002186:	4b63      	ldr	r3, [pc, #396]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f023 0220 	bic.w	r2, r3, #32
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4960      	ldr	r1, [pc, #384]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002194:	4313      	orrs	r3, r2
 8002196:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021a4:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	4958      	ldr	r1, [pc, #352]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4951      	ldr	r1, [pc, #324]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e0:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4949      	ldr	r1, [pc, #292]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4942      	ldr	r1, [pc, #264]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800221c:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	493a      	ldr	r1, [pc, #232]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	4933      	ldr	r1, [pc, #204]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	492b      	ldr	r1, [pc, #172]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4924      	ldr	r1, [pc, #144]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	491c      	ldr	r1, [pc, #112]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	4915      	ldr	r1, [pc, #84]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	490d      	ldr	r1, [pc, #52]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fa:	4906      	ldr	r1, [pc, #24]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800230c:	4b01      	ldr	r3, [pc, #4]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	e002      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	490b      	ldr	r1, [pc, #44]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002322:	4313      	orrs	r3, r2
 8002324:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002340:	4313      	orrs	r3, r2
 8002342:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3748      	adds	r7, #72	; 0x48
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e040      	b.n	80023e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe f8c2 	bl	8000500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2224      	movs	r2, #36	; 0x24
 8002380:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f98c 	bl	80026b0 <UART_SetConfig>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e022      	b.n	80023e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fb9a 	bl	8002ae4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fc21 	bl	8002c28 <UART_CheckIdleState>
 80023e6:	4603      	mov	r3, r0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002404:	2b20      	cmp	r3, #32
 8002406:	f040 8081 	bne.w	800250c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_UART_Transmit+0x26>
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e079      	b.n	800250e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_UART_Transmit+0x38>
 8002424:	2302      	movs	r3, #2
 8002426:	e072      	b.n	800250e <HAL_UART_Transmit+0x11e>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	; 0x21
 800243a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800243c:	f7fe f96a 	bl	8000714 <HAL_GetTick>
 8002440:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	88fa      	ldrh	r2, [r7, #6]
 800244e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245a:	d108      	bne.n	800246e <HAL_UART_Transmit+0x7e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d104      	bne.n	800246e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	e003      	b.n	8002476 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002476:	e02d      	b.n	80024d4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2200      	movs	r2, #0
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fc15 	bl	8002cb2 <UART_WaitOnFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e03d      	b.n	800250e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	881a      	ldrh	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a4:	b292      	uxth	r2, r2
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3302      	adds	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e008      	b.n	80024c2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b292      	uxth	r2, r2
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	3301      	adds	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1cb      	bne.n	8002478 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2140      	movs	r1, #64	; 0x40
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fbe1 	bl	8002cb2 <UART_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e009      	b.n	800250e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b08a      	sub	sp, #40	; 0x28
 800251a:	af02      	add	r7, sp, #8
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252a:	2b20      	cmp	r3, #32
 800252c:	f040 80bb 	bne.w	80026a6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_UART_Receive+0x26>
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0b3      	b.n	80026a8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_UART_Receive+0x38>
 800254a:	2302      	movs	r3, #2
 800254c:	e0ac      	b.n	80026a8 <HAL_UART_Receive+0x192>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2222      	movs	r2, #34	; 0x22
 8002560:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002562:	f7fe f8d7 	bl	8000714 <HAL_GetTick>
 8002566:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002580:	d10e      	bne.n	80025a0 <HAL_UART_Receive+0x8a>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_UART_Receive+0x80>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002594:	e02d      	b.n	80025f2 <HAL_UART_Receive+0xdc>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	22ff      	movs	r2, #255	; 0xff
 800259a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800259e:	e028      	b.n	80025f2 <HAL_UART_Receive+0xdc>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_UART_Receive+0xae>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_UART_Receive+0xa4>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	22ff      	movs	r2, #255	; 0xff
 80025b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025b8:	e01b      	b.n	80025f2 <HAL_UART_Receive+0xdc>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	227f      	movs	r2, #127	; 0x7f
 80025be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025c2:	e016      	b.n	80025f2 <HAL_UART_Receive+0xdc>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025cc:	d10d      	bne.n	80025ea <HAL_UART_Receive+0xd4>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <HAL_UART_Receive+0xca>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	227f      	movs	r2, #127	; 0x7f
 80025da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025de:	e008      	b.n	80025f2 <HAL_UART_Receive+0xdc>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	223f      	movs	r2, #63	; 0x3f
 80025e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025e8:	e003      	b.n	80025f2 <HAL_UART_Receive+0xdc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80025f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002602:	d108      	bne.n	8002616 <HAL_UART_Receive+0x100>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e003      	b.n	800261e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800261e:	e033      	b.n	8002688 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2200      	movs	r2, #0
 8002628:	2120      	movs	r1, #32
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fb41 	bl	8002cb2 <UART_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e036      	b.n	80026a8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10c      	bne.n	800265a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002646:	b29a      	uxth	r2, r3
 8002648:	8a7b      	ldrh	r3, [r7, #18]
 800264a:	4013      	ands	r3, r2
 800264c:	b29a      	uxth	r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	3302      	adds	r3, #2
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e00d      	b.n	8002676 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002660:	b29b      	uxth	r3, r3
 8002662:	b2da      	uxtb	r2, r3
 8002664:	8a7b      	ldrh	r3, [r7, #18]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4013      	ands	r3, r2
 800266a:	b2da      	uxtb	r2, r3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1c5      	bne.n	8002620 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
  }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4bac      	ldr	r3, [pc, #688]	; (8002990 <UART_SetConfig+0x2e0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	6939      	ldr	r1, [r7, #16]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a9a      	ldr	r2, [pc, #616]	; (8002994 <UART_SetConfig+0x2e4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d121      	bne.n	8002774 <UART_SetConfig+0xc4>
 8002730:	4b99      	ldr	r3, [pc, #612]	; (8002998 <UART_SetConfig+0x2e8>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b03      	cmp	r3, #3
 800273a:	d817      	bhi.n	800276c <UART_SetConfig+0xbc>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <UART_SetConfig+0x94>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002755 	.word	0x08002755
 8002748:	08002761 	.word	0x08002761
 800274c:	08002767 	.word	0x08002767
 8002750:	0800275b 	.word	0x0800275b
 8002754:	2301      	movs	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e0b2      	b.n	80028c0 <UART_SetConfig+0x210>
 800275a:	2302      	movs	r3, #2
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e0af      	b.n	80028c0 <UART_SetConfig+0x210>
 8002760:	2304      	movs	r3, #4
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e0ac      	b.n	80028c0 <UART_SetConfig+0x210>
 8002766:	2308      	movs	r3, #8
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e0a9      	b.n	80028c0 <UART_SetConfig+0x210>
 800276c:	2310      	movs	r3, #16
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	bf00      	nop
 8002772:	e0a5      	b.n	80028c0 <UART_SetConfig+0x210>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a88      	ldr	r2, [pc, #544]	; (800299c <UART_SetConfig+0x2ec>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d123      	bne.n	80027c6 <UART_SetConfig+0x116>
 800277e:	4b86      	ldr	r3, [pc, #536]	; (8002998 <UART_SetConfig+0x2e8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d012      	beq.n	80027b2 <UART_SetConfig+0x102>
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d802      	bhi.n	8002798 <UART_SetConfig+0xe8>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <UART_SetConfig+0xf6>
 8002796:	e012      	b.n	80027be <UART_SetConfig+0x10e>
 8002798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800279c:	d00c      	beq.n	80027b8 <UART_SetConfig+0x108>
 800279e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027a2:	d003      	beq.n	80027ac <UART_SetConfig+0xfc>
 80027a4:	e00b      	b.n	80027be <UART_SetConfig+0x10e>
 80027a6:	2300      	movs	r3, #0
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e089      	b.n	80028c0 <UART_SetConfig+0x210>
 80027ac:	2302      	movs	r3, #2
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e086      	b.n	80028c0 <UART_SetConfig+0x210>
 80027b2:	2304      	movs	r3, #4
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e083      	b.n	80028c0 <UART_SetConfig+0x210>
 80027b8:	2308      	movs	r3, #8
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e080      	b.n	80028c0 <UART_SetConfig+0x210>
 80027be:	2310      	movs	r3, #16
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	bf00      	nop
 80027c4:	e07c      	b.n	80028c0 <UART_SetConfig+0x210>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a75      	ldr	r2, [pc, #468]	; (80029a0 <UART_SetConfig+0x2f0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d123      	bne.n	8002818 <UART_SetConfig+0x168>
 80027d0:	4b71      	ldr	r3, [pc, #452]	; (8002998 <UART_SetConfig+0x2e8>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80027d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027dc:	d012      	beq.n	8002804 <UART_SetConfig+0x154>
 80027de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027e2:	d802      	bhi.n	80027ea <UART_SetConfig+0x13a>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <UART_SetConfig+0x148>
 80027e8:	e012      	b.n	8002810 <UART_SetConfig+0x160>
 80027ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027ee:	d00c      	beq.n	800280a <UART_SetConfig+0x15a>
 80027f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027f4:	d003      	beq.n	80027fe <UART_SetConfig+0x14e>
 80027f6:	e00b      	b.n	8002810 <UART_SetConfig+0x160>
 80027f8:	2300      	movs	r3, #0
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	e060      	b.n	80028c0 <UART_SetConfig+0x210>
 80027fe:	2302      	movs	r3, #2
 8002800:	77fb      	strb	r3, [r7, #31]
 8002802:	e05d      	b.n	80028c0 <UART_SetConfig+0x210>
 8002804:	2304      	movs	r3, #4
 8002806:	77fb      	strb	r3, [r7, #31]
 8002808:	e05a      	b.n	80028c0 <UART_SetConfig+0x210>
 800280a:	2308      	movs	r3, #8
 800280c:	77fb      	strb	r3, [r7, #31]
 800280e:	e057      	b.n	80028c0 <UART_SetConfig+0x210>
 8002810:	2310      	movs	r3, #16
 8002812:	77fb      	strb	r3, [r7, #31]
 8002814:	bf00      	nop
 8002816:	e053      	b.n	80028c0 <UART_SetConfig+0x210>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a61      	ldr	r2, [pc, #388]	; (80029a4 <UART_SetConfig+0x2f4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d123      	bne.n	800286a <UART_SetConfig+0x1ba>
 8002822:	4b5d      	ldr	r3, [pc, #372]	; (8002998 <UART_SetConfig+0x2e8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800282a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282e:	d012      	beq.n	8002856 <UART_SetConfig+0x1a6>
 8002830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002834:	d802      	bhi.n	800283c <UART_SetConfig+0x18c>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <UART_SetConfig+0x19a>
 800283a:	e012      	b.n	8002862 <UART_SetConfig+0x1b2>
 800283c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002840:	d00c      	beq.n	800285c <UART_SetConfig+0x1ac>
 8002842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002846:	d003      	beq.n	8002850 <UART_SetConfig+0x1a0>
 8002848:	e00b      	b.n	8002862 <UART_SetConfig+0x1b2>
 800284a:	2300      	movs	r3, #0
 800284c:	77fb      	strb	r3, [r7, #31]
 800284e:	e037      	b.n	80028c0 <UART_SetConfig+0x210>
 8002850:	2302      	movs	r3, #2
 8002852:	77fb      	strb	r3, [r7, #31]
 8002854:	e034      	b.n	80028c0 <UART_SetConfig+0x210>
 8002856:	2304      	movs	r3, #4
 8002858:	77fb      	strb	r3, [r7, #31]
 800285a:	e031      	b.n	80028c0 <UART_SetConfig+0x210>
 800285c:	2308      	movs	r3, #8
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	e02e      	b.n	80028c0 <UART_SetConfig+0x210>
 8002862:	2310      	movs	r3, #16
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	bf00      	nop
 8002868:	e02a      	b.n	80028c0 <UART_SetConfig+0x210>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a4e      	ldr	r2, [pc, #312]	; (80029a8 <UART_SetConfig+0x2f8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d123      	bne.n	80028bc <UART_SetConfig+0x20c>
 8002874:	4b48      	ldr	r3, [pc, #288]	; (8002998 <UART_SetConfig+0x2e8>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800287c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002880:	d012      	beq.n	80028a8 <UART_SetConfig+0x1f8>
 8002882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002886:	d802      	bhi.n	800288e <UART_SetConfig+0x1de>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <UART_SetConfig+0x1ec>
 800288c:	e012      	b.n	80028b4 <UART_SetConfig+0x204>
 800288e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002892:	d00c      	beq.n	80028ae <UART_SetConfig+0x1fe>
 8002894:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002898:	d003      	beq.n	80028a2 <UART_SetConfig+0x1f2>
 800289a:	e00b      	b.n	80028b4 <UART_SetConfig+0x204>
 800289c:	2300      	movs	r3, #0
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	e00e      	b.n	80028c0 <UART_SetConfig+0x210>
 80028a2:	2302      	movs	r3, #2
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e00b      	b.n	80028c0 <UART_SetConfig+0x210>
 80028a8:	2304      	movs	r3, #4
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e008      	b.n	80028c0 <UART_SetConfig+0x210>
 80028ae:	2308      	movs	r3, #8
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e005      	b.n	80028c0 <UART_SetConfig+0x210>
 80028b4:	2310      	movs	r3, #16
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	bf00      	nop
 80028ba:	e001      	b.n	80028c0 <UART_SetConfig+0x210>
 80028bc:	2310      	movs	r3, #16
 80028be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c8:	f040 8090 	bne.w	80029ec <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d86c      	bhi.n	80029ac <UART_SetConfig+0x2fc>
 80028d2:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <UART_SetConfig+0x228>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	080028fd 	.word	0x080028fd
 80028dc:	0800291d 	.word	0x0800291d
 80028e0:	0800293d 	.word	0x0800293d
 80028e4:	080029ad 	.word	0x080029ad
 80028e8:	08002959 	.word	0x08002959
 80028ec:	080029ad 	.word	0x080029ad
 80028f0:	080029ad 	.word	0x080029ad
 80028f4:	080029ad 	.word	0x080029ad
 80028f8:	08002979 	.word	0x08002979
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028fc:	f7ff fac8 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8002900:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	005a      	lsls	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	441a      	add	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	b29b      	uxth	r3, r3
 8002918:	61bb      	str	r3, [r7, #24]
        break;
 800291a:	e04a      	b.n	80029b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800291c:	f7ff fada 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 8002920:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	005a      	lsls	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	b29b      	uxth	r3, r3
 8002938:	61bb      	str	r3, [r7, #24]
        break;
 800293a:	e03a      	b.n	80029b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002946:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6852      	ldr	r2, [r2, #4]
 800294e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	61bb      	str	r3, [r7, #24]
        break;
 8002956:	e02c      	b.n	80029b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002958:	f7ff fa24 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 800295c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	005a      	lsls	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	61bb      	str	r3, [r7, #24]
        break;
 8002976:	e01c      	b.n	80029b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	b29b      	uxth	r3, r3
 800298c:	61bb      	str	r3, [r7, #24]
        break;
 800298e:	e010      	b.n	80029b2 <UART_SetConfig+0x302>
 8002990:	efff69f3 	.word	0xefff69f3
 8002994:	40013800 	.word	0x40013800
 8002998:	40021000 	.word	0x40021000
 800299c:	40004400 	.word	0x40004400
 80029a0:	40004800 	.word	0x40004800
 80029a4:	40004c00 	.word	0x40004c00
 80029a8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	75fb      	strb	r3, [r7, #23]
        break;
 80029b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d916      	bls.n	80029e6 <UART_SetConfig+0x336>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029be:	d212      	bcs.n	80029e6 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f023 030f 	bic.w	r3, r3, #15
 80029c8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	4313      	orrs	r3, r2
 80029da:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	897a      	ldrh	r2, [r7, #10]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	e072      	b.n	8002acc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
 80029ea:	e06f      	b.n	8002acc <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80029ec:	7ffb      	ldrb	r3, [r7, #31]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d85b      	bhi.n	8002aaa <UART_SetConfig+0x3fa>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <UART_SetConfig+0x348>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a1d 	.word	0x08002a1d
 80029fc:	08002a3b 	.word	0x08002a3b
 8002a00:	08002a59 	.word	0x08002a59
 8002a04:	08002aab 	.word	0x08002aab
 8002a08:	08002a75 	.word	0x08002a75
 8002a0c:	08002aab 	.word	0x08002aab
 8002a10:	08002aab 	.word	0x08002aab
 8002a14:	08002aab 	.word	0x08002aab
 8002a18:	08002a93 	.word	0x08002a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f7ff fa38 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8002a20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	085a      	lsrs	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	61bb      	str	r3, [r7, #24]
        break;
 8002a38:	e03a      	b.n	8002ab0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a3a:	f7ff fa4b 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 8002a3e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	085a      	lsrs	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	441a      	add	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	61bb      	str	r3, [r7, #24]
        break;
 8002a56:	e02b      	b.n	8002ab0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002a62:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6852      	ldr	r2, [r2, #4]
 8002a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	61bb      	str	r3, [r7, #24]
        break;
 8002a72:	e01d      	b.n	8002ab0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a74:	f7ff f996 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8002a78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	085a      	lsrs	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	441a      	add	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	61bb      	str	r3, [r7, #24]
        break;
 8002a90:	e00e      	b.n	8002ab0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	61bb      	str	r3, [r7, #24]
        break;
 8002aa8:	e002      	b.n	8002ab0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
        break;
 8002aae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	d908      	bls.n	8002ac8 <UART_SetConfig+0x418>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d204      	bcs.n	8002ac8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	e001      	b.n	8002acc <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop

08002ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01a      	beq.n	8002bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be2:	d10a      	bne.n	8002bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c36:	f7fd fd6d 	bl	8000714 <HAL_GetTick>
 8002c3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d10e      	bne.n	8002c68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f82a 	bl	8002cb2 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e020      	b.n	8002caa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d10e      	bne.n	8002c94 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f814 	bl	8002cb2 <UART_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e00a      	b.n	8002caa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc2:	e05d      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d059      	beq.n	8002d80 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ccc:	f7fd fd22 	bl	8000714 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11b      	bne.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cf0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e042      	b.n	8002da0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d02b      	beq.n	8002d80 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d36:	d123      	bne.n	8002d80 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d40:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e00f      	b.n	8002da0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d092      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <__libc_init_array>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	4e0d      	ldr	r6, [pc, #52]	; (8002de0 <__libc_init_array+0x38>)
 8002dac:	4c0d      	ldr	r4, [pc, #52]	; (8002de4 <__libc_init_array+0x3c>)
 8002dae:	1ba4      	subs	r4, r4, r6
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	2500      	movs	r5, #0
 8002db4:	42a5      	cmp	r5, r4
 8002db6:	d109      	bne.n	8002dcc <__libc_init_array+0x24>
 8002db8:	4e0b      	ldr	r6, [pc, #44]	; (8002de8 <__libc_init_array+0x40>)
 8002dba:	4c0c      	ldr	r4, [pc, #48]	; (8002dec <__libc_init_array+0x44>)
 8002dbc:	f000 f820 	bl	8002e00 <_init>
 8002dc0:	1ba4      	subs	r4, r4, r6
 8002dc2:	10a4      	asrs	r4, r4, #2
 8002dc4:	2500      	movs	r5, #0
 8002dc6:	42a5      	cmp	r5, r4
 8002dc8:	d105      	bne.n	8002dd6 <__libc_init_array+0x2e>
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dd0:	4798      	blx	r3
 8002dd2:	3501      	adds	r5, #1
 8002dd4:	e7ee      	b.n	8002db4 <__libc_init_array+0xc>
 8002dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dda:	4798      	blx	r3
 8002ddc:	3501      	adds	r5, #1
 8002dde:	e7f2      	b.n	8002dc6 <__libc_init_array+0x1e>
 8002de0:	08002e68 	.word	0x08002e68
 8002de4:	08002e68 	.word	0x08002e68
 8002de8:	08002e68 	.word	0x08002e68
 8002dec:	08002e6c 	.word	0x08002e6c

08002df0 <memset>:
 8002df0:	4402      	add	r2, r0
 8002df2:	4603      	mov	r3, r0
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d100      	bne.n	8002dfa <memset+0xa>
 8002df8:	4770      	bx	lr
 8002dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dfe:	e7f9      	b.n	8002df4 <memset+0x4>

08002e00 <_init>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	bf00      	nop
 8002e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e06:	bc08      	pop	{r3}
 8002e08:	469e      	mov	lr, r3
 8002e0a:	4770      	bx	lr

08002e0c <_fini>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr
