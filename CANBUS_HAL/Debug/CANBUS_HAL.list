
CANBUS_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b4c  08002b4c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b54  08002b54  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000014  08002b70  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002b70  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089b3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001729  00000000  00000000  000289f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  0002a120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000740  00000000  00000000  0002a928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002100c  00000000  00000000  0002b068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070a8  00000000  00000000  0004c074  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c92a2  00000000  00000000  0005311c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c3be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002028  00000000  00000000  0011c43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b04 	.word	0x08002b04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08002b04 	.word	0x08002b04

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <CAN_Init>:
uint8_t TxData[] = {'H','E','L','L','O'};

char msg[50];

void CAN_Init(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	  TxHeader.DLC = 5;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <CAN_Init+0x34>)
 800051a:	2205      	movs	r2, #5
 800051c:	611a      	str	r2, [r3, #16]
	  TxHeader.ExtId = 0;
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <CAN_Init+0x34>)
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
	  TxHeader.IDE = CAN_ID_STD;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <CAN_Init+0x34>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <CAN_Init+0x34>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
	  TxHeader.StdId = 0x446;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <CAN_Init+0x34>)
 8000532:	f240 4246 	movw	r2, #1094	; 0x446
 8000536:	601a      	str	r2, [r3, #0]
	  TxHeader.TransmitGlobalTime = DISABLE;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <CAN_Init+0x34>)
 800053a:	2200      	movs	r2, #0
 800053c:	751a      	strb	r2, [r3, #20]
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	200000d0 	.word	0x200000d0

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fa92 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f848 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f938 	bl	80007cc <MX_GPIO_Init>
  MX_CAN1_Init();
 800055c:	f000 f8b6 	bl	80006cc <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000560:	f000 f90a 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000564:	4819      	ldr	r0, [pc, #100]	; (80005cc <main+0x80>)
 8000566:	f000 fcd5 	bl	8000f14 <HAL_CAN_Start>
  CAN_Init();
 800056a:	f7ff ffd3 	bl	8000514 <CAN_Init>

  if(	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <main+0x84>)
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <main+0x88>)
 8000572:	4919      	ldr	r1, [pc, #100]	; (80005d8 <main+0x8c>)
 8000574:	4815      	ldr	r0, [pc, #84]	; (80005cc <main+0x80>)
 8000576:	f000 fd11 	bl	8000f9c <HAL_CAN_AddTxMessage>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <main+0x38>
  {
	  Error_Handler();
 8000580:	f000 f94c 	bl	800081c <Error_Handler>
  }

  while( HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));
 8000584:	bf00      	nop
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <main+0x84>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	480f      	ldr	r0, [pc, #60]	; (80005cc <main+0x80>)
 800058e:	f000 fde0 	bl	8001152 <HAL_CAN_IsTxMessagePending>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f6      	bne.n	8000586 <main+0x3a>

  sprintf(msg,"Message Transmitted\r\n");
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <main+0x90>)
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <main+0x94>)
 800059c:	4615      	mov	r5, r2
 800059e:	461c      	mov	r4, r3
 80005a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005a2:	6028      	str	r0, [r5, #0]
 80005a4:	6069      	str	r1, [r5, #4]
 80005a6:	60aa      	str	r2, [r5, #8]
 80005a8:	60eb      	str	r3, [r5, #12]
 80005aa:	6820      	ldr	r0, [r4, #0]
 80005ac:	6128      	str	r0, [r5, #16]
 80005ae:	88a3      	ldrh	r3, [r4, #4]
 80005b0:	82ab      	strh	r3, [r5, #20]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x90>)
 80005b4:	f7ff fe26 	bl	8000204 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	4906      	ldr	r1, [pc, #24]	; (80005dc <main+0x90>)
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <main+0x98>)
 80005c4:	f001 fe13 	bl	80021ee <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x7c>
 80005ca:	bf00      	nop
 80005cc:	200000a8 	.word	0x200000a8
 80005d0:	20000030 	.word	0x20000030
 80005d4:	20000000 	.word	0x20000000
 80005d8:	200000d0 	.word	0x200000d0
 80005dc:	20000034 	.word	0x20000034
 80005e0:	08002b1c 	.word	0x08002b1c
 80005e4:	20000068 	.word	0x20000068

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fa7c 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <SystemClock_Config+0xdc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a2b      	ldr	r2, [pc, #172]	; (80006c4 <SystemClock_Config+0xdc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <SystemClock_Config+0xdc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <SystemClock_Config+0xe0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a25      	ldr	r2, [pc, #148]	; (80006c8 <SystemClock_Config+0xe0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <SystemClock_Config+0xe0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800065c:	23b4      	movs	r3, #180	; 0xb4
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fb15 	bl	8001ca0 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f000 f8ce 	bl	800081c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000680:	f001 f804 	bl	800168c <HAL_PWREx_EnableOverDrive>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800068a:	f000 f8c7 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 f83d 	bl	800172c <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b8:	f000 f8b0 	bl	800081c <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_CAN1_Init+0xa4>)
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <MX_CAN1_Init+0xa8>)
 80006d6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_CAN1_Init+0xa4>)
 80006da:	220f      	movs	r2, #15
 80006dc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80006de:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_CAN1_Init+0xa4>)
 80006e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_CAN1_Init+0xa4>)
 80006e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_CAN1_Init+0xa4>)
 80006f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_CAN1_Init+0xa4>)
 80006f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006fc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_CAN1_Init+0xa4>)
 8000700:	2200      	movs	r2, #0
 8000702:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_CAN1_Init+0xa4>)
 8000706:	2200      	movs	r2, #0
 8000708:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_CAN1_Init+0xa4>)
 800070c:	2200      	movs	r2, #0
 800070e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_CAN1_Init+0xa4>)
 8000712:	2201      	movs	r2, #1
 8000714:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_CAN1_Init+0xa4>)
 8000718:	2200      	movs	r2, #0
 800071a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_CAN1_Init+0xa4>)
 800071e:	2200      	movs	r2, #0
 8000720:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000722:	4813      	ldr	r0, [pc, #76]	; (8000770 <MX_CAN1_Init+0xa4>)
 8000724:	f000 fa1a 	bl	8000b5c <HAL_CAN_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_CAN1_Init+0x66>
  {
    Error_Handler();
 800072e:	f000 f875 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000736:	2312      	movs	r3, #18
 8000738:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x103<<5;
 800073e:	f242 0360 	movw	r3, #8288	; 0x2060
 8000742:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800075a:	2314      	movs	r3, #20
 800075c:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4803      	ldr	r0, [pc, #12]	; (8000770 <MX_CAN1_Init+0xa4>)
 8000764:	f000 faf6 	bl	8000d54 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000a8 	.word	0x200000a8
 8000774:	40006400 	.word	0x40006400

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 fcd0 	bl	8002154 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f82f 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000068 	.word	0x20000068
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <MX_GPIO_Init+0x4c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_GPIO_Init+0x4c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x4c>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	2007      	movs	r0, #7
 800086c:	f000 fd48 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_CAN_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_CAN_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_CAN_MspInit+0x88>)
 80008a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_CAN_MspInit+0x88>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_CAN_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_CAN_MspInit+0x88>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_CAN_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008e8:	2309      	movs	r3, #9
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_CAN_MspInit+0x8c>)
 80008f4:	f000 fd38 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40006400 	.word	0x40006400
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12b      	bne.n	8000986 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000966:	230c      	movs	r3, #12
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000976:	2307      	movs	r3, #7
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_UART_MspInit+0x8c>)
 8000982:	f000 fcf1 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f894 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <SystemInit+0x28>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <SystemInit+0x28>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x28>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a2a:	e003      	b.n	8000a34 <LoopCopyDataInit>

08000a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a32:	3104      	adds	r1, #4

08000a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a3c:	d3f6      	bcc.n	8000a2c <CopyDataInit>
  ldr  r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a40:	e002      	b.n	8000a48 <LoopFillZerobss>

08000a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a44:	f842 3b04 	str.w	r3, [r2], #4

08000a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a4c:	d3f9      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd3 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 f82b 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd79 	bl	800054c <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a60:	08002b5c 	.word	0x08002b5c
  ldr  r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a68:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000a6c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000a70:	20000108 	.word	0x20000108

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 fc2d 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff febe 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fc37 	bl	800134e <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 fc0d 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000010 	.word	0x20000010
 8000b18:	2000000c 	.word	0x2000000c

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	20000104 	.word	0x20000104

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000104 	.word	0x20000104

08000b5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e0ed      	b.n	8000d4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fe7e 	bl	800087c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0202 	bic.w	r2, r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b90:	f7ff ffd8 	bl	8000b44 <HAL_GetTick>
 8000b94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b96:	e012      	b.n	8000bbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b98:	f7ff ffd4 	bl	8000b44 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b0a      	cmp	r3, #10
 8000ba4:	d90b      	bls.n	8000bbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e0c5      	b.n	8000d4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1e5      	bne.n	8000b98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bdc:	f7ff ffb2 	bl	8000b44 <HAL_GetTick>
 8000be0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000be2:	e012      	b.n	8000c0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000be4:	f7ff ffae 	bl	8000b44 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b0a      	cmp	r3, #10
 8000bf0:	d90b      	bls.n	8000c0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2205      	movs	r2, #5
 8000c02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e09f      	b.n	8000d4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0e5      	beq.n	8000be4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e1b      	ldrb	r3, [r3, #24]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7e5b      	ldrb	r3, [r3, #25]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7e9b      	ldrb	r3, [r3, #26]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d108      	bne.n	8000c86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0220 	orr.w	r2, r2, #32
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e007      	b.n	8000c96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0220 	bic.w	r2, r2, #32
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7edb      	ldrb	r3, [r3, #27]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d108      	bne.n	8000cb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0210 	bic.w	r2, r2, #16
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0210 	orr.w	r2, r2, #16
 8000cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7f1b      	ldrb	r3, [r3, #28]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d108      	bne.n	8000cda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0208 	orr.w	r2, r2, #8
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e007      	b.n	8000cea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0208 	bic.w	r2, r2, #8
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7f5b      	ldrb	r3, [r3, #29]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d108      	bne.n	8000d04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f042 0204 	orr.w	r2, r2, #4
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e007      	b.n	8000d14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0204 	bic.w	r2, r2, #4
 8000d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	ea42 0103 	orr.w	r1, r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d6a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d6c:	7cfb      	ldrb	r3, [r7, #19]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d003      	beq.n	8000d7a <HAL_CAN_ConfigFilter+0x26>
 8000d72:	7cfb      	ldrb	r3, [r7, #19]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	f040 80be 	bne.w	8000ef6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000d7a:	4b65      	ldr	r3, [pc, #404]	; (8000f10 <HAL_CAN_ConfigFilter+0x1bc>)
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d84:	f043 0201 	orr.w	r2, r3, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	431a      	orrs	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	2201      	movs	r2, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	401a      	ands	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d123      	bne.n	8000e24 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dfe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3248      	adds	r2, #72	; 0x48
 8000e04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e1a:	6979      	ldr	r1, [r7, #20]
 8000e1c:	3348      	adds	r3, #72	; 0x48
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d122      	bne.n	8000e72 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3248      	adds	r2, #72	; 0x48
 8000e52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e68:	6979      	ldr	r1, [r7, #20]
 8000e6a:	3348      	adds	r3, #72	; 0x48
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d109      	bne.n	8000e8e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	401a      	ands	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e8c:	e007      	b.n	8000e9e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000eb8:	e007      	b.n	8000eca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d107      	bne.n	8000ee2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ee8:	f023 0201 	bic.w	r2, r3, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e006      	b.n	8000f04 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
  }
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40006400 	.word	0x40006400

08000f14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d12e      	bne.n	8000f86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0201 	bic.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f40:	f7ff fe00 	bl	8000b44 <HAL_GetTick>
 8000f44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f46:	e012      	b.n	8000f6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f48:	f7ff fdfc 	bl	8000b44 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b0a      	cmp	r3, #10
 8000f54:	d90b      	bls.n	8000f6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2205      	movs	r2, #5
 8000f66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e012      	b.n	8000f94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1e5      	bne.n	8000f48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e006      	b.n	8000f94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
  }
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d003      	beq.n	8000fc8 <HAL_CAN_AddTxMessage+0x2c>
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	f040 80b8 	bne.w	8001138 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10a      	bne.n	8000fe8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d105      	bne.n	8000fe8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80a0 	beq.w	8001128 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	0e1b      	lsrs	r3, r3, #24
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d907      	bls.n	8001008 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e09e      	b.n	8001146 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001008:	2201      	movs	r2, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	409a      	lsls	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10d      	bne.n	8001036 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001024:	68f9      	ldr	r1, [r7, #12]
 8001026:	6809      	ldr	r1, [r1, #0]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3318      	adds	r3, #24
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	440b      	add	r3, r1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e00f      	b.n	8001056 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001040:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800104a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3318      	adds	r3, #24
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	440b      	add	r3, r1
 8001054:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3318      	adds	r3, #24
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	440b      	add	r3, r1
 8001066:	3304      	adds	r3, #4
 8001068:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	7d1b      	ldrb	r3, [r3, #20]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d111      	bne.n	8001096 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3318      	adds	r3, #24
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	3304      	adds	r3, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	6811      	ldr	r1, [r2, #0]
 8001086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3318      	adds	r3, #24
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	440b      	add	r3, r1
 8001092:	3304      	adds	r3, #4
 8001094:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3307      	adds	r3, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	061a      	lsls	r2, r3, #24
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3306      	adds	r3, #6
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	041b      	lsls	r3, r3, #16
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3305      	adds	r3, #5
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	4313      	orrs	r3, r2
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	3204      	adds	r2, #4
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	4610      	mov	r0, r2
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	ea43 0200 	orr.w	r2, r3, r0
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	440b      	add	r3, r1
 80010c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3303      	adds	r3, #3
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	061a      	lsls	r2, r3, #24
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3302      	adds	r3, #2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4313      	orrs	r3, r2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	4610      	mov	r0, r2
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	6811      	ldr	r1, [r2, #0]
 80010f4:	ea43 0200 	orr.w	r2, r3, r0
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	440b      	add	r3, r1
 80010fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001102:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3318      	adds	r3, #24
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	4413      	add	r3, r2
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	6811      	ldr	r1, [r2, #0]
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3318      	adds	r3, #24
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	440b      	add	r3, r1
 8001122:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	e00e      	b.n	8001146 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e006      	b.n	8001146 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d002      	beq.n	8001174 <HAL_CAN_IsTxMessagePending+0x22>
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d10b      	bne.n	800118c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	069b      	lsls	r3, r3, #26
 800117e:	401a      	ands	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	069b      	lsls	r3, r3, #26
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001188:	2301      	movs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff47 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff5c 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffb0 	bl	80012bc <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e165      	b.n	8001650 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8154 	bne.w	800164a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d00b      	beq.n	80013c2 <HAL_GPIO_Init+0x5a>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b6:	2b11      	cmp	r3, #17
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d130      	bne.n	8001424 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0xfc>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80ae 	beq.w	800164a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a5b      	ldr	r2, [pc, #364]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_GPIO_Init+0x300>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_GPIO_Init+0x304>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_GPIO_Init+0x308>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_Init+0x216>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_GPIO_Init+0x30c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_Init+0x212>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4b      	ldr	r2, [pc, #300]	; (8001678 <HAL_GPIO_Init+0x310>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4a      	ldr	r2, [pc, #296]	; (800167c <HAL_GPIO_Init+0x314>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x20a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a49      	ldr	r2, [pc, #292]	; (8001680 <HAL_GPIO_Init+0x318>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x206>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a48      	ldr	r2, [pc, #288]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x202>
 8001566:	2306      	movs	r3, #6
 8001568:	e00c      	b.n	8001584 <HAL_GPIO_Init+0x21c>
 800156a:	2307      	movs	r3, #7
 800156c:	e00a      	b.n	8001584 <HAL_GPIO_Init+0x21c>
 800156e:	2305      	movs	r3, #5
 8001570:	e008      	b.n	8001584 <HAL_GPIO_Init+0x21c>
 8001572:	2304      	movs	r3, #4
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x21c>
 8001576:	2303      	movs	r3, #3
 8001578:	e004      	b.n	8001584 <HAL_GPIO_Init+0x21c>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x21c>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x21c>
 8001582:	2300      	movs	r3, #0
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001594:	4934      	ldr	r1, [pc, #208]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a2:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c6:	4a30      	ldr	r2, [pc, #192]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_GPIO_Init+0x320>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_GPIO_Init+0x320>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_GPIO_Init+0x320>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3301      	adds	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	2b0f      	cmp	r3, #15
 8001654:	f67f ae96 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001658:	bf00      	nop
 800165a:	3724      	adds	r7, #36	; 0x24
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40023800 	.word	0x40023800
 8001668:	40013800 	.word	0x40013800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	40020800 	.word	0x40020800
 8001678:	40020c00 	.word	0x40020c00
 800167c:	40021000 	.word	0x40021000
 8001680:	40021400 	.word	0x40021400
 8001684:	40021800 	.word	0x40021800
 8001688:	40013c00 	.word	0x40013c00

0800168c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_PWREx_EnableOverDrive+0x90>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_PWREx_EnableOverDrive+0x90>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_PWREx_EnableOverDrive+0x90>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_PWREx_EnableOverDrive+0x94>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff fa44 	bl	8000b44 <HAL_GetTick>
 80016bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016be:	e009      	b.n	80016d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016c0:	f7ff fa40 	bl	8000b44 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ce:	d901      	bls.n	80016d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e01f      	b.n	8001714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_PWREx_EnableOverDrive+0x98>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d1ee      	bne.n	80016c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e8:	f7ff fa2c 	bl	8000b44 <HAL_GetTick>
 80016ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016ee:	e009      	b.n	8001704 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016f0:	f7ff fa28 	bl	8000b44 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016fe:	d901      	bls.n	8001704 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e007      	b.n	8001714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_PWREx_EnableOverDrive+0x98>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001710:	d1ee      	bne.n	80016f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	420e0040 	.word	0x420e0040
 8001724:	40007000 	.word	0x40007000
 8001728:	420e0044 	.word	0x420e0044

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff f992 	bl	8000b44 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff f98e 	bl	8000b44 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f855 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 80018b6:	4601      	mov	r1, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	fa21 f303 	lsr.w	r3, r1, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f8f2 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08002b34 	.word	0x08002b34
 80018f0:	20000008 	.word	0x20000008
 80018f4:	2000000c 	.word	0x2000000c

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4601      	mov	r1, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08002b44 	.word	0x08002b44

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffdc 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08002b44 	.word	0x08002b44

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197a:	4bc6      	ldr	r3, [pc, #792]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b0c      	cmp	r3, #12
 8001984:	f200 817e 	bhi.w	8001c84 <HAL_RCC_GetSysClockFreq+0x324>
 8001988:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_RCC_GetSysClockFreq+0x30>)
 800198a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198e:	bf00      	nop
 8001990:	080019c5 	.word	0x080019c5
 8001994:	08001c85 	.word	0x08001c85
 8001998:	08001c85 	.word	0x08001c85
 800199c:	08001c85 	.word	0x08001c85
 80019a0:	080019cb 	.word	0x080019cb
 80019a4:	08001c85 	.word	0x08001c85
 80019a8:	08001c85 	.word	0x08001c85
 80019ac:	08001c85 	.word	0x08001c85
 80019b0:	080019d1 	.word	0x080019d1
 80019b4:	08001c85 	.word	0x08001c85
 80019b8:	08001c85 	.word	0x08001c85
 80019bc:	08001c85 	.word	0x08001c85
 80019c0:	08001b2d 	.word	0x08001b2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c4:	4bb4      	ldr	r3, [pc, #720]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x338>)
 80019c6:	613b      	str	r3, [r7, #16]
       break;
 80019c8:	e15f      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ca:	4bb4      	ldr	r3, [pc, #720]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x33c>)
 80019cc:	613b      	str	r3, [r7, #16]
      break;
 80019ce:	e15c      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4bb0      	ldr	r3, [pc, #704]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	4bae      	ldr	r3, [pc, #696]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04a      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4bab      	ldr	r3, [pc, #684]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	f04f 0400 	mov.w	r4, #0
 80019f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	ea03 0501 	and.w	r5, r3, r1
 80019fc:	ea04 0602 	and.w	r6, r4, r2
 8001a00:	4629      	mov	r1, r5
 8001a02:	4632      	mov	r2, r6
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f04f 0400 	mov.w	r4, #0
 8001a0c:	0154      	lsls	r4, r2, #5
 8001a0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a12:	014b      	lsls	r3, r1, #5
 8001a14:	4619      	mov	r1, r3
 8001a16:	4622      	mov	r2, r4
 8001a18:	1b49      	subs	r1, r1, r5
 8001a1a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	f04f 0400 	mov.w	r4, #0
 8001a26:	0194      	lsls	r4, r2, #6
 8001a28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a2c:	018b      	lsls	r3, r1, #6
 8001a2e:	1a5b      	subs	r3, r3, r1
 8001a30:	eb64 0402 	sbc.w	r4, r4, r2
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	00e2      	lsls	r2, r4, #3
 8001a3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a42:	00d9      	lsls	r1, r3, #3
 8001a44:	460b      	mov	r3, r1
 8001a46:	4614      	mov	r4, r2
 8001a48:	195b      	adds	r3, r3, r5
 8001a4a:	eb44 0406 	adc.w	r4, r4, r6
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	0262      	lsls	r2, r4, #9
 8001a58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a5c:	0259      	lsls	r1, r3, #9
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4614      	mov	r4, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	4621      	mov	r1, r4
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f04f 0400 	mov.w	r4, #0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	f7fe fbd0 	bl	8000214 <__aeabi_uldivmod>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e049      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7c:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	f04f 0400 	mov.w	r4, #0
 8001a86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	ea03 0501 	and.w	r5, r3, r1
 8001a92:	ea04 0602 	and.w	r6, r4, r2
 8001a96:	4629      	mov	r1, r5
 8001a98:	4632      	mov	r2, r6
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f04f 0400 	mov.w	r4, #0
 8001aa2:	0154      	lsls	r4, r2, #5
 8001aa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aa8:	014b      	lsls	r3, r1, #5
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4622      	mov	r2, r4
 8001aae:	1b49      	subs	r1, r1, r5
 8001ab0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	f04f 0400 	mov.w	r4, #0
 8001abc:	0194      	lsls	r4, r2, #6
 8001abe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	1a5b      	subs	r3, r3, r1
 8001ac6:	eb64 0402 	sbc.w	r4, r4, r2
 8001aca:	f04f 0100 	mov.w	r1, #0
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	00e2      	lsls	r2, r4, #3
 8001ad4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ad8:	00d9      	lsls	r1, r3, #3
 8001ada:	460b      	mov	r3, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	195b      	adds	r3, r3, r5
 8001ae0:	eb44 0406 	adc.w	r4, r4, r6
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	02a2      	lsls	r2, r4, #10
 8001aee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001af2:	0299      	lsls	r1, r3, #10
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	4621      	mov	r1, r4
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f04f 0400 	mov.w	r4, #0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4623      	mov	r3, r4
 8001b06:	f7fe fb85 	bl	8000214 <__aeabi_uldivmod>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b10:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	613b      	str	r3, [r7, #16]
      break;
 8001b2a:	e0ae      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b34:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b36:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04a      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b42:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	f04f 0400 	mov.w	r4, #0
 8001b4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	ea03 0501 	and.w	r5, r3, r1
 8001b58:	ea04 0602 	and.w	r6, r4, r2
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4632      	mov	r2, r6
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	0154      	lsls	r4, r2, #5
 8001b6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b6e:	014b      	lsls	r3, r1, #5
 8001b70:	4619      	mov	r1, r3
 8001b72:	4622      	mov	r2, r4
 8001b74:	1b49      	subs	r1, r1, r5
 8001b76:	eb62 0206 	sbc.w	r2, r2, r6
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	f04f 0400 	mov.w	r4, #0
 8001b82:	0194      	lsls	r4, r2, #6
 8001b84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b88:	018b      	lsls	r3, r1, #6
 8001b8a:	1a5b      	subs	r3, r3, r1
 8001b8c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b90:	f04f 0100 	mov.w	r1, #0
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	00e2      	lsls	r2, r4, #3
 8001b9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b9e:	00d9      	lsls	r1, r3, #3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	195b      	adds	r3, r3, r5
 8001ba6:	eb44 0406 	adc.w	r4, r4, r6
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	0262      	lsls	r2, r4, #9
 8001bb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001bb8:	0259      	lsls	r1, r3, #9
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f04f 0400 	mov.w	r4, #0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	f7fe fb22 	bl	8000214 <__aeabi_uldivmod>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e049      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	f04f 0400 	mov.w	r4, #0
 8001be2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	ea03 0501 	and.w	r5, r3, r1
 8001bee:	ea04 0602 	and.w	r6, r4, r2
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	4632      	mov	r2, r6
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	0154      	lsls	r4, r2, #5
 8001c00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c04:	014b      	lsls	r3, r1, #5
 8001c06:	4619      	mov	r1, r3
 8001c08:	4622      	mov	r2, r4
 8001c0a:	1b49      	subs	r1, r1, r5
 8001c0c:	eb62 0206 	sbc.w	r2, r2, r6
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f04f 0400 	mov.w	r4, #0
 8001c18:	0194      	lsls	r4, r2, #6
 8001c1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c1e:	018b      	lsls	r3, r1, #6
 8001c20:	1a5b      	subs	r3, r3, r1
 8001c22:	eb64 0402 	sbc.w	r4, r4, r2
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	00e2      	lsls	r2, r4, #3
 8001c30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c34:	00d9      	lsls	r1, r3, #3
 8001c36:	460b      	mov	r3, r1
 8001c38:	4614      	mov	r4, r2
 8001c3a:	195b      	adds	r3, r3, r5
 8001c3c:	eb44 0406 	adc.w	r4, r4, r6
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	02a2      	lsls	r2, r4, #10
 8001c4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c4e:	0299      	lsls	r1, r3, #10
 8001c50:	460b      	mov	r3, r1
 8001c52:	4614      	mov	r4, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	4621      	mov	r1, r4
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f04f 0400 	mov.w	r4, #0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe fad7 	bl	8000214 <__aeabi_uldivmod>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0f1b      	lsrs	r3, r3, #28
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	613b      	str	r3, [r7, #16]
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x338>)
 8001c86:	613b      	str	r3, [r7, #16]
      break;
 8001c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8a:	693b      	ldr	r3, [r7, #16]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	00f42400 	.word	0x00f42400
 8001c9c:	007a1200 	.word	0x007a1200

08001ca0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 8083 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cba:	4b95      	ldr	r3, [pc, #596]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cc6:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cd2:	4b8f      	ldr	r3, [pc, #572]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cde:	d00c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce0:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d112      	bne.n	8001d12 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf8:	d10b      	bne.n	8001d12 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfa:	4b85      	ldr	r3, [pc, #532]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d05b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x11e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d157      	bne.n	8001dbe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e216      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x8a>
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e01d      	b.n	8001d66 <HAL_RCC_OscConfig+0xc6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0xae>
 8001d34:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a75      	ldr	r2, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a72      	ldr	r2, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0xc6>
 8001d4e:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6f      	ldr	r2, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6c      	ldr	r2, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d013      	beq.n	8001d96 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fee9 	bl	8000b44 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d76:	f7fe fee5 	bl	8000b44 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1db      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0xd6>
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7fe fed5 	bl	8000b44 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fed1 	bl	8000b44 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1c7      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0xfe>
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d06f      	beq.n	8001eac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dcc:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d017      	beq.n	8001e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dd8:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001de4:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d11c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfc:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x180>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e18f      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4938      	ldr	r1, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e34:	e03a      	b.n	8001eac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe fe7e 	bl	8000b44 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fe7a 	bl	8000b44 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e170      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4925      	ldr	r1, [pc, #148]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
 8001e7e:	e015      	b.n	8001eac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7fe fe5d 	bl	8000b44 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7fe fe59 	bl	8000b44 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e14f      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d037      	beq.n	8001f28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_RCC_OscConfig+0x278>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fe3d 	bl	8000b44 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ece:	f7fe fe39 	bl	8000b44 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e12f      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x22e>
 8001eec:	e01c      	b.n	8001f28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_OscConfig+0x278>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7fe fe26 	bl	8000b44 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efa:	e00f      	b.n	8001f1c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efc:	f7fe fe22 	bl	8000b44 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d908      	bls.n	8001f1c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e118      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	42470000 	.word	0x42470000
 8001f18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b8a      	ldr	r3, [pc, #552]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e9      	bne.n	8001efc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8097 	beq.w	8002064 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b83      	ldr	r3, [pc, #524]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b7c      	ldr	r3, [pc, #496]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fde1 	bl	8000b44 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe fddd 	bl	8000b44 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0d3      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b6c      	ldr	r3, [pc, #432]	; (800214c <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x31a>
 8001fac:	4b66      	ldr	r3, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x354>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x33c>
 8001fc2:	4b61      	ldr	r3, [pc, #388]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	4a60      	ldr	r2, [pc, #384]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fce:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x354>
 8001fdc:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a59      	ldr	r2, [pc, #356]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	4b57      	ldr	r3, [pc, #348]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a56      	ldr	r2, [pc, #344]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8001fee:	f023 0304 	bic.w	r3, r3, #4
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d015      	beq.n	8002028 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fda2 	bl	8000b44 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fd9e 	bl	8000b44 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e092      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ee      	beq.n	8002004 <HAL_RCC_OscConfig+0x364>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7fe fd8c 	bl	8000b44 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7fe fd88 	bl	8000b44 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e07c      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002046:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ee      	bne.n	8002030 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d068      	beq.n	800213e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d060      	beq.n	800213a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d145      	bne.n	800210c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_RCC_OscConfig+0x4b0>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fd5d 	bl	8000b44 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe fd59 	bl	8000b44 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e04f      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	019b      	lsls	r3, r3, #6
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	071b      	lsls	r3, r3, #28
 80020d8:	491b      	ldr	r1, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_RCC_OscConfig+0x4b0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe fd2e 	bl	8000b44 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe fd2a 	bl	8000b44 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e020      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x44c>
 800210a:	e018      	b.n	800213e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_RCC_OscConfig+0x4b0>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7fe fd17 	bl	8000b44 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fd13 	bl	8000b44 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e009      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x4a8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x47a>
 8002138:	e001      	b.n	800213e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060

08002154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e03f      	b.n	80021e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fbc6 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f90b 	bl	80023b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b088      	sub	sp, #32
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	f040 8083 	bne.w	8002316 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_UART_Transmit+0x2e>
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e07b      	b.n	8002318 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_UART_Transmit+0x40>
 800222a:	2302      	movs	r3, #2
 800222c:	e074      	b.n	8002318 <HAL_UART_Transmit+0x12a>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2221      	movs	r2, #33	; 0x21
 8002240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002244:	f7fe fc7e 	bl	8000b44 <HAL_GetTick>
 8002248:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800225e:	e042      	b.n	80022e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002276:	d122      	bne.n	80022be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2200      	movs	r2, #0
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f84c 	bl	8002320 <UART_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e042      	b.n	8002318 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3302      	adds	r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	e017      	b.n	80022e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	e013      	b.n	80022e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f829 	bl	8002320 <UART_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e01f      	b.n	8002318 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1b7      	bne.n	8002260 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f810 	bl	8002320 <UART_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e006      	b.n	8002318 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
  }
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002330:	e02c      	b.n	800238c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d028      	beq.n	800238c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <UART_WaitOnFlagUntilTimeout+0x30>
 8002340:	f7fe fc00 	bl	8000b44 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	429a      	cmp	r2, r3
 800234e:	d21d      	bcs.n	800238c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800235e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e00f      	b.n	80023ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d0c3      	beq.n	8002332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023f6:	f023 030c 	bic.w	r3, r3, #12
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	430b      	orrs	r3, r1
 8002402:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002422:	f040 818b 	bne.w	800273c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4ac1      	ldr	r2, [pc, #772]	; (8002730 <UART_SetConfig+0x37c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d005      	beq.n	800243c <UART_SetConfig+0x88>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4abf      	ldr	r2, [pc, #764]	; (8002734 <UART_SetConfig+0x380>)
 8002436:	4293      	cmp	r3, r2
 8002438:	f040 80bd 	bne.w	80025b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800243c:	f7ff fa7c 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8002440:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	461d      	mov	r5, r3
 8002446:	f04f 0600 	mov.w	r6, #0
 800244a:	46a8      	mov	r8, r5
 800244c:	46b1      	mov	r9, r6
 800244e:	eb18 0308 	adds.w	r3, r8, r8
 8002452:	eb49 0409 	adc.w	r4, r9, r9
 8002456:	4698      	mov	r8, r3
 8002458:	46a1      	mov	r9, r4
 800245a:	eb18 0805 	adds.w	r8, r8, r5
 800245e:	eb49 0906 	adc.w	r9, r9, r6
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800246e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002472:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002476:	4688      	mov	r8, r1
 8002478:	4691      	mov	r9, r2
 800247a:	eb18 0005 	adds.w	r0, r8, r5
 800247e:	eb49 0106 	adc.w	r1, r9, r6
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	461d      	mov	r5, r3
 8002488:	f04f 0600 	mov.w	r6, #0
 800248c:	196b      	adds	r3, r5, r5
 800248e:	eb46 0406 	adc.w	r4, r6, r6
 8002492:	461a      	mov	r2, r3
 8002494:	4623      	mov	r3, r4
 8002496:	f7fd febd 	bl	8000214 <__aeabi_uldivmod>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	461a      	mov	r2, r3
 80024a0:	4ba5      	ldr	r3, [pc, #660]	; (8002738 <UART_SetConfig+0x384>)
 80024a2:	fba3 2302 	umull	r2, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	461d      	mov	r5, r3
 80024b0:	f04f 0600 	mov.w	r6, #0
 80024b4:	46a9      	mov	r9, r5
 80024b6:	46b2      	mov	sl, r6
 80024b8:	eb19 0309 	adds.w	r3, r9, r9
 80024bc:	eb4a 040a 	adc.w	r4, sl, sl
 80024c0:	4699      	mov	r9, r3
 80024c2:	46a2      	mov	sl, r4
 80024c4:	eb19 0905 	adds.w	r9, r9, r5
 80024c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024e0:	4689      	mov	r9, r1
 80024e2:	4692      	mov	sl, r2
 80024e4:	eb19 0005 	adds.w	r0, r9, r5
 80024e8:	eb4a 0106 	adc.w	r1, sl, r6
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	461d      	mov	r5, r3
 80024f2:	f04f 0600 	mov.w	r6, #0
 80024f6:	196b      	adds	r3, r5, r5
 80024f8:	eb46 0406 	adc.w	r4, r6, r6
 80024fc:	461a      	mov	r2, r3
 80024fe:	4623      	mov	r3, r4
 8002500:	f7fd fe88 	bl	8000214 <__aeabi_uldivmod>
 8002504:	4603      	mov	r3, r0
 8002506:	460c      	mov	r4, r1
 8002508:	461a      	mov	r2, r3
 800250a:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <UART_SetConfig+0x384>)
 800250c:	fba3 1302 	umull	r1, r3, r3, r2
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	2164      	movs	r1, #100	; 0x64
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	3332      	adds	r3, #50	; 0x32
 800251e:	4a86      	ldr	r2, [pc, #536]	; (8002738 <UART_SetConfig+0x384>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800252c:	4498      	add	r8, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	461d      	mov	r5, r3
 8002532:	f04f 0600 	mov.w	r6, #0
 8002536:	46a9      	mov	r9, r5
 8002538:	46b2      	mov	sl, r6
 800253a:	eb19 0309 	adds.w	r3, r9, r9
 800253e:	eb4a 040a 	adc.w	r4, sl, sl
 8002542:	4699      	mov	r9, r3
 8002544:	46a2      	mov	sl, r4
 8002546:	eb19 0905 	adds.w	r9, r9, r5
 800254a:	eb4a 0a06 	adc.w	sl, sl, r6
 800254e:	f04f 0100 	mov.w	r1, #0
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800255a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800255e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002562:	4689      	mov	r9, r1
 8002564:	4692      	mov	sl, r2
 8002566:	eb19 0005 	adds.w	r0, r9, r5
 800256a:	eb4a 0106 	adc.w	r1, sl, r6
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	461d      	mov	r5, r3
 8002574:	f04f 0600 	mov.w	r6, #0
 8002578:	196b      	adds	r3, r5, r5
 800257a:	eb46 0406 	adc.w	r4, r6, r6
 800257e:	461a      	mov	r2, r3
 8002580:	4623      	mov	r3, r4
 8002582:	f7fd fe47 	bl	8000214 <__aeabi_uldivmod>
 8002586:	4603      	mov	r3, r0
 8002588:	460c      	mov	r4, r1
 800258a:	461a      	mov	r2, r3
 800258c:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <UART_SetConfig+0x384>)
 800258e:	fba3 1302 	umull	r1, r3, r3, r2
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2164      	movs	r1, #100	; 0x64
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	3332      	adds	r3, #50	; 0x32
 80025a0:	4a65      	ldr	r2, [pc, #404]	; (8002738 <UART_SetConfig+0x384>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	f003 0207 	and.w	r2, r3, #7
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4442      	add	r2, r8
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e26f      	b.n	8002a96 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025b6:	f7ff f9ab 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 80025ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	461d      	mov	r5, r3
 80025c0:	f04f 0600 	mov.w	r6, #0
 80025c4:	46a8      	mov	r8, r5
 80025c6:	46b1      	mov	r9, r6
 80025c8:	eb18 0308 	adds.w	r3, r8, r8
 80025cc:	eb49 0409 	adc.w	r4, r9, r9
 80025d0:	4698      	mov	r8, r3
 80025d2:	46a1      	mov	r9, r4
 80025d4:	eb18 0805 	adds.w	r8, r8, r5
 80025d8:	eb49 0906 	adc.w	r9, r9, r6
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025f0:	4688      	mov	r8, r1
 80025f2:	4691      	mov	r9, r2
 80025f4:	eb18 0005 	adds.w	r0, r8, r5
 80025f8:	eb49 0106 	adc.w	r1, r9, r6
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	461d      	mov	r5, r3
 8002602:	f04f 0600 	mov.w	r6, #0
 8002606:	196b      	adds	r3, r5, r5
 8002608:	eb46 0406 	adc.w	r4, r6, r6
 800260c:	461a      	mov	r2, r3
 800260e:	4623      	mov	r3, r4
 8002610:	f7fd fe00 	bl	8000214 <__aeabi_uldivmod>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	461a      	mov	r2, r3
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <UART_SetConfig+0x384>)
 800261c:	fba3 2302 	umull	r2, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	461d      	mov	r5, r3
 800262a:	f04f 0600 	mov.w	r6, #0
 800262e:	46a9      	mov	r9, r5
 8002630:	46b2      	mov	sl, r6
 8002632:	eb19 0309 	adds.w	r3, r9, r9
 8002636:	eb4a 040a 	adc.w	r4, sl, sl
 800263a:	4699      	mov	r9, r3
 800263c:	46a2      	mov	sl, r4
 800263e:	eb19 0905 	adds.w	r9, r9, r5
 8002642:	eb4a 0a06 	adc.w	sl, sl, r6
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002652:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002656:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800265a:	4689      	mov	r9, r1
 800265c:	4692      	mov	sl, r2
 800265e:	eb19 0005 	adds.w	r0, r9, r5
 8002662:	eb4a 0106 	adc.w	r1, sl, r6
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	461d      	mov	r5, r3
 800266c:	f04f 0600 	mov.w	r6, #0
 8002670:	196b      	adds	r3, r5, r5
 8002672:	eb46 0406 	adc.w	r4, r6, r6
 8002676:	461a      	mov	r2, r3
 8002678:	4623      	mov	r3, r4
 800267a:	f7fd fdcb 	bl	8000214 <__aeabi_uldivmod>
 800267e:	4603      	mov	r3, r0
 8002680:	460c      	mov	r4, r1
 8002682:	461a      	mov	r2, r3
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <UART_SetConfig+0x384>)
 8002686:	fba3 1302 	umull	r1, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2164      	movs	r1, #100	; 0x64
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	3332      	adds	r3, #50	; 0x32
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <UART_SetConfig+0x384>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026a6:	4498      	add	r8, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	461d      	mov	r5, r3
 80026ac:	f04f 0600 	mov.w	r6, #0
 80026b0:	46a9      	mov	r9, r5
 80026b2:	46b2      	mov	sl, r6
 80026b4:	eb19 0309 	adds.w	r3, r9, r9
 80026b8:	eb4a 040a 	adc.w	r4, sl, sl
 80026bc:	4699      	mov	r9, r3
 80026be:	46a2      	mov	sl, r4
 80026c0:	eb19 0905 	adds.w	r9, r9, r5
 80026c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026dc:	4689      	mov	r9, r1
 80026de:	4692      	mov	sl, r2
 80026e0:	eb19 0005 	adds.w	r0, r9, r5
 80026e4:	eb4a 0106 	adc.w	r1, sl, r6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	461d      	mov	r5, r3
 80026ee:	f04f 0600 	mov.w	r6, #0
 80026f2:	196b      	adds	r3, r5, r5
 80026f4:	eb46 0406 	adc.w	r4, r6, r6
 80026f8:	461a      	mov	r2, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	f7fd fd8a 	bl	8000214 <__aeabi_uldivmod>
 8002700:	4603      	mov	r3, r0
 8002702:	460c      	mov	r4, r1
 8002704:	461a      	mov	r2, r3
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <UART_SetConfig+0x384>)
 8002708:	fba3 1302 	umull	r1, r3, r3, r2
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	2164      	movs	r1, #100	; 0x64
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	3332      	adds	r3, #50	; 0x32
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <UART_SetConfig+0x384>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	f003 0207 	and.w	r2, r3, #7
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4442      	add	r2, r8
 800272c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800272e:	e1b2      	b.n	8002a96 <UART_SetConfig+0x6e2>
 8002730:	40011000 	.word	0x40011000
 8002734:	40011400 	.word	0x40011400
 8002738:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4ad7      	ldr	r2, [pc, #860]	; (8002aa0 <UART_SetConfig+0x6ec>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d005      	beq.n	8002752 <UART_SetConfig+0x39e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4ad6      	ldr	r2, [pc, #856]	; (8002aa4 <UART_SetConfig+0x6f0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	f040 80d1 	bne.w	80028f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002752:	f7ff f8f1 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8002756:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	469a      	mov	sl, r3
 800275c:	f04f 0b00 	mov.w	fp, #0
 8002760:	46d0      	mov	r8, sl
 8002762:	46d9      	mov	r9, fp
 8002764:	eb18 0308 	adds.w	r3, r8, r8
 8002768:	eb49 0409 	adc.w	r4, r9, r9
 800276c:	4698      	mov	r8, r3
 800276e:	46a1      	mov	r9, r4
 8002770:	eb18 080a 	adds.w	r8, r8, sl
 8002774:	eb49 090b 	adc.w	r9, r9, fp
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002784:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002788:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800278c:	4688      	mov	r8, r1
 800278e:	4691      	mov	r9, r2
 8002790:	eb1a 0508 	adds.w	r5, sl, r8
 8002794:	eb4b 0609 	adc.w	r6, fp, r9
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	0094      	lsls	r4, r2, #2
 80027ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027b0:	008b      	lsls	r3, r1, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	4623      	mov	r3, r4
 80027b6:	4628      	mov	r0, r5
 80027b8:	4631      	mov	r1, r6
 80027ba:	f7fd fd2b 	bl	8000214 <__aeabi_uldivmod>
 80027be:	4603      	mov	r3, r0
 80027c0:	460c      	mov	r4, r1
 80027c2:	461a      	mov	r2, r3
 80027c4:	4bb8      	ldr	r3, [pc, #736]	; (8002aa8 <UART_SetConfig+0x6f4>)
 80027c6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	469b      	mov	fp, r3
 80027d4:	f04f 0c00 	mov.w	ip, #0
 80027d8:	46d9      	mov	r9, fp
 80027da:	46e2      	mov	sl, ip
 80027dc:	eb19 0309 	adds.w	r3, r9, r9
 80027e0:	eb4a 040a 	adc.w	r4, sl, sl
 80027e4:	4699      	mov	r9, r3
 80027e6:	46a2      	mov	sl, r4
 80027e8:	eb19 090b 	adds.w	r9, r9, fp
 80027ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002804:	4689      	mov	r9, r1
 8002806:	4692      	mov	sl, r2
 8002808:	eb1b 0509 	adds.w	r5, fp, r9
 800280c:	eb4c 060a 	adc.w	r6, ip, sl
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4619      	mov	r1, r3
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	f04f 0400 	mov.w	r4, #0
 8002822:	0094      	lsls	r4, r2, #2
 8002824:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002828:	008b      	lsls	r3, r1, #2
 800282a:	461a      	mov	r2, r3
 800282c:	4623      	mov	r3, r4
 800282e:	4628      	mov	r0, r5
 8002830:	4631      	mov	r1, r6
 8002832:	f7fd fcef 	bl	8000214 <__aeabi_uldivmod>
 8002836:	4603      	mov	r3, r0
 8002838:	460c      	mov	r4, r1
 800283a:	461a      	mov	r2, r3
 800283c:	4b9a      	ldr	r3, [pc, #616]	; (8002aa8 <UART_SetConfig+0x6f4>)
 800283e:	fba3 1302 	umull	r1, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2164      	movs	r1, #100	; 0x64
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	3332      	adds	r3, #50	; 0x32
 8002850:	4a95      	ldr	r2, [pc, #596]	; (8002aa8 <UART_SetConfig+0x6f4>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285c:	4498      	add	r8, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	469b      	mov	fp, r3
 8002862:	f04f 0c00 	mov.w	ip, #0
 8002866:	46d9      	mov	r9, fp
 8002868:	46e2      	mov	sl, ip
 800286a:	eb19 0309 	adds.w	r3, r9, r9
 800286e:	eb4a 040a 	adc.w	r4, sl, sl
 8002872:	4699      	mov	r9, r3
 8002874:	46a2      	mov	sl, r4
 8002876:	eb19 090b 	adds.w	r9, r9, fp
 800287a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800287e:	f04f 0100 	mov.w	r1, #0
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800288a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800288e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002892:	4689      	mov	r9, r1
 8002894:	4692      	mov	sl, r2
 8002896:	eb1b 0509 	adds.w	r5, fp, r9
 800289a:	eb4c 060a 	adc.w	r6, ip, sl
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4619      	mov	r1, r3
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	f04f 0400 	mov.w	r4, #0
 80028b0:	0094      	lsls	r4, r2, #2
 80028b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028b6:	008b      	lsls	r3, r1, #2
 80028b8:	461a      	mov	r2, r3
 80028ba:	4623      	mov	r3, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	4631      	mov	r1, r6
 80028c0:	f7fd fca8 	bl	8000214 <__aeabi_uldivmod>
 80028c4:	4603      	mov	r3, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b77      	ldr	r3, [pc, #476]	; (8002aa8 <UART_SetConfig+0x6f4>)
 80028cc:	fba3 1302 	umull	r1, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	2164      	movs	r1, #100	; 0x64
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	3332      	adds	r3, #50	; 0x32
 80028de:	4a72      	ldr	r2, [pc, #456]	; (8002aa8 <UART_SetConfig+0x6f4>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	f003 020f 	and.w	r2, r3, #15
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4442      	add	r2, r8
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	e0d0      	b.n	8002a96 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80028f4:	f7ff f80c 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 80028f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	469a      	mov	sl, r3
 80028fe:	f04f 0b00 	mov.w	fp, #0
 8002902:	46d0      	mov	r8, sl
 8002904:	46d9      	mov	r9, fp
 8002906:	eb18 0308 	adds.w	r3, r8, r8
 800290a:	eb49 0409 	adc.w	r4, r9, r9
 800290e:	4698      	mov	r8, r3
 8002910:	46a1      	mov	r9, r4
 8002912:	eb18 080a 	adds.w	r8, r8, sl
 8002916:	eb49 090b 	adc.w	r9, r9, fp
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002926:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800292a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800292e:	4688      	mov	r8, r1
 8002930:	4691      	mov	r9, r2
 8002932:	eb1a 0508 	adds.w	r5, sl, r8
 8002936:	eb4b 0609 	adc.w	r6, fp, r9
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	0094      	lsls	r4, r2, #2
 800294e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002952:	008b      	lsls	r3, r1, #2
 8002954:	461a      	mov	r2, r3
 8002956:	4623      	mov	r3, r4
 8002958:	4628      	mov	r0, r5
 800295a:	4631      	mov	r1, r6
 800295c:	f7fd fc5a 	bl	8000214 <__aeabi_uldivmod>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	461a      	mov	r2, r3
 8002966:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <UART_SetConfig+0x6f4>)
 8002968:	fba3 2302 	umull	r2, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	469b      	mov	fp, r3
 8002976:	f04f 0c00 	mov.w	ip, #0
 800297a:	46d9      	mov	r9, fp
 800297c:	46e2      	mov	sl, ip
 800297e:	eb19 0309 	adds.w	r3, r9, r9
 8002982:	eb4a 040a 	adc.w	r4, sl, sl
 8002986:	4699      	mov	r9, r3
 8002988:	46a2      	mov	sl, r4
 800298a:	eb19 090b 	adds.w	r9, r9, fp
 800298e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800299e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029a6:	4689      	mov	r9, r1
 80029a8:	4692      	mov	sl, r2
 80029aa:	eb1b 0509 	adds.w	r5, fp, r9
 80029ae:	eb4c 060a 	adc.w	r6, ip, sl
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4619      	mov	r1, r3
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f04f 0400 	mov.w	r4, #0
 80029c4:	0094      	lsls	r4, r2, #2
 80029c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029ca:	008b      	lsls	r3, r1, #2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4623      	mov	r3, r4
 80029d0:	4628      	mov	r0, r5
 80029d2:	4631      	mov	r1, r6
 80029d4:	f7fd fc1e 	bl	8000214 <__aeabi_uldivmod>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	461a      	mov	r2, r3
 80029de:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <UART_SetConfig+0x6f4>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <UART_SetConfig+0x6f4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fe:	4498      	add	r8, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	469b      	mov	fp, r3
 8002a04:	f04f 0c00 	mov.w	ip, #0
 8002a08:	46d9      	mov	r9, fp
 8002a0a:	46e2      	mov	sl, ip
 8002a0c:	eb19 0309 	adds.w	r3, r9, r9
 8002a10:	eb4a 040a 	adc.w	r4, sl, sl
 8002a14:	4699      	mov	r9, r3
 8002a16:	46a2      	mov	sl, r4
 8002a18:	eb19 090b 	adds.w	r9, r9, fp
 8002a1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a34:	4689      	mov	r9, r1
 8002a36:	4692      	mov	sl, r2
 8002a38:	eb1b 0509 	adds.w	r5, fp, r9
 8002a3c:	eb4c 060a 	adc.w	r6, ip, sl
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	f04f 0400 	mov.w	r4, #0
 8002a52:	0094      	lsls	r4, r2, #2
 8002a54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a58:	008b      	lsls	r3, r1, #2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	4628      	mov	r0, r5
 8002a60:	4631      	mov	r1, r6
 8002a62:	f7fd fbd7 	bl	8000214 <__aeabi_uldivmod>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <UART_SetConfig+0x6f4>)
 8002a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2164      	movs	r1, #100	; 0x64
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	3332      	adds	r3, #50	; 0x32
 8002a80:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <UART_SetConfig+0x6f4>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4442      	add	r2, r8
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	e7ff      	b.n	8002a96 <UART_SetConfig+0x6e2>
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	51eb851f 	.word	0x51eb851f

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4e0d      	ldr	r6, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1ba4      	subs	r4, r4, r6
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	42a5      	cmp	r5, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4e0b      	ldr	r6, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 f820 	bl	8002b04 <_init>
 8002ac4:	1ba4      	subs	r4, r4, r6
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2500      	movs	r5, #0
 8002aca:	42a5      	cmp	r5, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad4:	4798      	blx	r3
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ade:	4798      	blx	r3
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002b54 	.word	0x08002b54
 8002ae8:	08002b54 	.word	0x08002b54
 8002aec:	08002b54 	.word	0x08002b54
 8002af0:	08002b58 	.word	0x08002b58

08002af4 <memset>:
 8002af4:	4402      	add	r2, r0
 8002af6:	4603      	mov	r3, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
