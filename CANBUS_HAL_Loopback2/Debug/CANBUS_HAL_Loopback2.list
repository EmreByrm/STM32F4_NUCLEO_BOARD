
CANBUS_HAL_Loopback2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003824  08003824  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000078  080038a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080038a4  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093a8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018f2  00000000  00000000  00029450  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  0002ad48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  0002b588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021335  00000000  00000000  0002bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075d4  00000000  00000000  0004d025  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c97d0  00000000  00000000  000545f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ddc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023fc  00000000  00000000  0011de44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003784 	.word	0x08003784

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08003784 	.word	0x08003784

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <CAN1_Init>:
uint8_t TxData[] = {'H','E','L','L','O'};

char msg[50];

void CAN1_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	  TxHeader.DLC = 5;
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <CAN1_Init+0x34>)
 80005c6:	2205      	movs	r2, #5
 80005c8:	611a      	str	r2, [r3, #16]
	  TxHeader.ExtId = 0;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <CAN1_Init+0x34>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
	  TxHeader.IDE = CAN_ID_STD;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <CAN1_Init+0x34>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <CAN1_Init+0x34>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
	  TxHeader.StdId = 0x446;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <CAN1_Init+0x34>)
 80005de:	f240 4246 	movw	r2, #1094	; 0x446
 80005e2:	601a      	str	r2, [r3, #0]
	  TxHeader.TransmitGlobalTime = DISABLE;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <CAN1_Init+0x34>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	751a      	strb	r2, [r3, #20]
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	20000168 	.word	0x20000168

080005f8 <CAN_FilterConfig>:
void CAN_FilterConfig(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	can1_filter_init.FilterActivation = ENABLE;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <CAN_FilterConfig+0x50>)
 80005fe:	2201      	movs	r2, #1
 8000600:	621a      	str	r2, [r3, #32]
	can1_filter_init.FilterBank = 0;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <CAN_FilterConfig+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <CAN_FilterConfig+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <CAN_FilterConfig+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <CAN_FilterConfig+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <CAN_FilterConfig+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <CAN_FilterConfig+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <CAN_FilterConfig+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <CAN_FilterConfig+0x50>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]


	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 8000632:	4905      	ldr	r1, [pc, #20]	; (8000648 <CAN_FilterConfig+0x50>)
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <CAN_FilterConfig+0x54>)
 8000636:	f000 fc87 	bl	8000f48 <HAL_CAN_ConfigFilter>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <CAN_FilterConfig+0x4c>
	{
		Error_Handler();
 8000640:	f000 f9b0 	bl	80009a4 <Error_Handler>
	}
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000d8 	.word	0x200000d8
 800064c:	20000140 	.word	0x20000140

08000650 <CAN1_Tx>:
void CAN1_Tx(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	af00      	add	r7, sp, #0
	 if(	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <CAN1_Tx+0x64>)
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <CAN1_Tx+0x68>)
 8000658:	4918      	ldr	r1, [pc, #96]	; (80006bc <CAN1_Tx+0x6c>)
 800065a:	4819      	ldr	r0, [pc, #100]	; (80006c0 <CAN1_Tx+0x70>)
 800065c:	f000 fd98 	bl	8001190 <HAL_CAN_AddTxMessage>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <CAN1_Tx+0x1a>
	  {
		  Error_Handler();
 8000666:	f000 f99d 	bl	80009a4 <Error_Handler>
	  }

	  while( HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));
 800066a:	bf00      	nop
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <CAN1_Tx+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <CAN1_Tx+0x70>)
 8000674:	f000 fe67 	bl	8001346 <HAL_CAN_IsTxMessagePending>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f6      	bne.n	800066c <CAN1_Tx+0x1c>

	  sprintf(msg,"Message Transmitted\r\n");
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <CAN1_Tx+0x74>)
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <CAN1_Tx+0x78>)
 8000682:	4615      	mov	r5, r2
 8000684:	461c      	mov	r4, r3
 8000686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000688:	6028      	str	r0, [r5, #0]
 800068a:	6069      	str	r1, [r5, #4]
 800068c:	60aa      	str	r2, [r5, #8]
 800068e:	60eb      	str	r3, [r5, #12]
 8000690:	6820      	ldr	r0, [r4, #0]
 8000692:	6128      	str	r0, [r5, #16]
 8000694:	88a3      	ldrh	r3, [r4, #4]
 8000696:	82ab      	strh	r3, [r5, #20]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <CAN1_Tx+0x74>)
 800069a:	f7ff fdb9 	bl	8000210 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	4907      	ldr	r1, [pc, #28]	; (80006c4 <CAN1_Tx+0x74>)
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <CAN1_Tx+0x7c>)
 80006aa:	f001 ffd4 	bl	8002656 <HAL_UART_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000a0 	.word	0x200000a0
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000168 	.word	0x20000168
 80006c0:	20000140 	.word	0x20000140
 80006c4:	200000a4 	.word	0x200000a4
 80006c8:	0800379c 	.word	0x0800379c
 80006cc:	20000100 	.word	0x20000100

080006d0 <CAN1_Rx>:

void CAN1_Rx()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t rcvd_msg[5];

	// waiting for at least one message in to the RX FIFO
	while(!(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0)));
 80006d6:	bf00      	nop
 80006d8:	2100      	movs	r1, #0
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <CAN1_Rx+0x58>)
 80006dc:	f000 ff69 	bl	80015b2 <HAL_CAN_GetRxFifoFillLevel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f8      	beq.n	80006d8 <CAN1_Rx+0x8>

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <CAN1_Rx+0x5c>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <CAN1_Rx+0x58>)
 80006ee:	f000 fe4e 	bl	800138e <HAL_CAN_GetRxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <CAN1_Rx+0x2c>
	{
		Error_Handler();
 80006f8:	f000 f954 	bl	80009a4 <Error_Handler>
	}

	 sprintf(msg,"Message Transmitted: %s \r\n",rcvd_msg);
 80006fc:	463b      	mov	r3, r7
 80006fe:	461a      	mov	r2, r3
 8000700:	490b      	ldr	r1, [pc, #44]	; (8000730 <CAN1_Rx+0x60>)
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <CAN1_Rx+0x64>)
 8000704:	f002 fc38 	bl	8002f78 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <CAN1_Rx+0x64>)
 800070a:	f7ff fd81 	bl	8000210 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	4907      	ldr	r1, [pc, #28]	; (8000734 <CAN1_Rx+0x64>)
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <CAN1_Rx+0x68>)
 800071a:	f001 ff9c 	bl	8002656 <HAL_UART_Transmit>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000140 	.word	0x20000140
 800072c:	20000180 	.word	0x20000180
 8000730:	080037b4 	.word	0x080037b4
 8000734:	200000a4 	.word	0x200000a4
 8000738:	20000100 	.word	0x20000100

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fa94 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f814 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f904 	bl	8000954 <MX_GPIO_Init>
  MX_CAN1_Init();
 800074c:	f000 f882 	bl	8000854 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000750:	f000 f8d6 	bl	8000900 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN1_Init();
 8000754:	f7ff ff34 	bl	80005c0 <CAN1_Init>
  CAN_FilterConfig();
 8000758:	f7ff ff4e 	bl	80005f8 <CAN_FilterConfig>
  HAL_CAN_Start(&hcan1);
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <main+0x30>)
 800075e:	f000 fcd3 	bl	8001108 <HAL_CAN_Start>

  CAN1_Tx();
 8000762:	f7ff ff75 	bl	8000650 <CAN1_Tx>
  CAN1_Rx();
 8000766:	f7ff ffb3 	bl	80006d0 <CAN1_Rx>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x2e>
 800076c:	20000140 	.word	0x20000140

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2234      	movs	r2, #52	; 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fbf2 	bl	8002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <SystemClock_Config+0xdc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a2b      	ldr	r2, [pc, #172]	; (800084c <SystemClock_Config+0xdc>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <SystemClock_Config+0xdc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemClock_Config+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a25      	ldr	r2, [pc, #148]	; (8000850 <SystemClock_Config+0xe0>)
 80007ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <SystemClock_Config+0xe0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007e4:	23b4      	movs	r3, #180	; 0xb4
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fc85 	bl	8002108 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000804:	f000 f8ce 	bl	80009a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000808:	f001 f974 	bl	8001af4 <HAL_PWREx_EnableOverDrive>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000812:	f000 f8c7 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000822:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2105      	movs	r1, #5
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f9ad 	bl	8001b94 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000840:	f000 f8b0 	bl	80009a4 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3750      	adds	r7, #80	; 0x50
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_CAN1_Init+0xa4>)
 800085c:	4a27      	ldr	r2, [pc, #156]	; (80008fc <MX_CAN1_Init+0xa8>)
 800085e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_CAN1_Init+0xa4>)
 8000862:	220f      	movs	r2, #15
 8000864:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_CAN1_Init+0xa4>)
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_CAN1_Init+0xa4>)
 8000870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000874:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_CAN1_Init+0xa4>)
 8000878:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_CAN1_Init+0xa4>)
 8000880:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000884:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_CAN1_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_CAN1_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_CAN1_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_CAN1_Init+0xa4>)
 800089a:	2201      	movs	r2, #1
 800089c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_CAN1_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_CAN1_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_CAN1_Init+0xa4>)
 80008ac:	f000 fa50 	bl	8000d50 <HAL_CAN_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_CAN1_Init+0x66>
  {
    Error_Handler();
 80008b6:	f000 f875 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80008be:	2312      	movs	r3, #18
 80008c0:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x103<<5;
 80008c6:	f242 0360 	movw	r3, #8288	; 0x2060
 80008ca:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80008e2:	2314      	movs	r3, #20
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80008e6:	463b      	mov	r3, r7
 80008e8:	4619      	mov	r1, r3
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_CAN1_Init+0xa4>)
 80008ec:	f000 fb2c 	bl	8000f48 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000140 	.word	0x20000140
 80008fc:	40006400 	.word	0x40006400

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f001 fe40 	bl	80025bc <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f82f 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000100 	.word	0x20000100
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_GPIO_Init+0x4c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <MX_GPIO_Init+0x4c>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_GPIO_Init+0x4c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_GPIO_Init+0x4c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <MX_GPIO_Init+0x4c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_GPIO_Init+0x4c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f2:	2007      	movs	r0, #7
 80009f4:	f000 feb8 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_CAN_MspInit+0x84>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12c      	bne.n	8000a80 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_CAN_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_CAN_MspInit+0x88>)
 8000a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_CAN_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_CAN_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_CAN_MspInit+0x88>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_CAN_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a70:	2309      	movs	r3, #9
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_CAN_MspInit+0x8c>)
 8000a7c:	f000 fea8 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40006400 	.word	0x40006400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_UART_MspInit+0x8c>)
 8000b0a:	f000 fe61 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f8ca 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f002 f9b0 	bl	8002f14 <__errno>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20020000 	.word	0x20020000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000094 	.word	0x20000094
 8000be8:	200001a8 	.word	0x200001a8

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SystemInit+0x28>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <SystemInit+0x28>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SystemInit+0x28>)
 8000c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c06:	609a      	str	r2, [r3, #8]
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c1e:	e003      	b.n	8000c28 <LoopCopyDataInit>

08000c20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c26:	3104      	adds	r1, #4

08000c28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c30:	d3f6      	bcc.n	8000c20 <CopyDataInit>
  ldr  r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c34:	e002      	b.n	8000c3c <LoopFillZerobss>

08000c36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c38:	f842 3b04 	str.w	r3, [r2], #4

08000c3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c40:	d3f9      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c42:	f7ff ffd3 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f002 f96b 	bl	8002f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fd77 	bl	800073c <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c54:	0800382c 	.word	0x0800382c
  ldr  r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c5c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000c60:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000c64:	200001a4 	.word	0x200001a4

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 fd67 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fe88 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fd71 	bl	80017b6 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 fd47 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	2000000c 	.word	0x2000000c

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000010 	.word	0x20000010
 8000d34:	2000019c 	.word	0x2000019c

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000019c 	.word	0x2000019c

08000d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e0ed      	b.n	8000f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fe48 	bl	8000a04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0202 	bic.w	r2, r2, #2
 8000d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d84:	f7ff ffd8 	bl	8000d38 <HAL_GetTick>
 8000d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d8a:	e012      	b.n	8000db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d8c:	f7ff ffd4 	bl	8000d38 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b0a      	cmp	r3, #10
 8000d98:	d90b      	bls.n	8000db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2205      	movs	r2, #5
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e0c5      	b.n	8000f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1e5      	bne.n	8000d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd0:	f7ff ffb2 	bl	8000d38 <HAL_GetTick>
 8000dd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dd6:	e012      	b.n	8000dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd8:	f7ff ffae 	bl	8000d38 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d90b      	bls.n	8000dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2205      	movs	r2, #5
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e09f      	b.n	8000f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0e5      	beq.n	8000dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d108      	bne.n	8000e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e007      	b.n	8000e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7e5b      	ldrb	r3, [r3, #25]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d108      	bne.n	8000e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7e9b      	ldrb	r3, [r3, #26]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d108      	bne.n	8000e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0220 	orr.w	r2, r2, #32
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0220 	bic.w	r2, r2, #32
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7edb      	ldrb	r3, [r3, #27]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d108      	bne.n	8000ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0210 	bic.w	r2, r2, #16
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e007      	b.n	8000eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0210 	orr.w	r2, r2, #16
 8000eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7f1b      	ldrb	r3, [r3, #28]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d108      	bne.n	8000ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0208 	orr.w	r2, r2, #8
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	e007      	b.n	8000ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0208 	bic.w	r2, r2, #8
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7f5b      	ldrb	r3, [r3, #29]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d108      	bne.n	8000ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 0204 	orr.w	r2, r2, #4
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e007      	b.n	8000f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0204 	bic.w	r2, r2, #4
 8000f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	ea42 0103 	orr.w	r1, r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	1e5a      	subs	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f60:	7cfb      	ldrb	r3, [r7, #19]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d003      	beq.n	8000f6e <HAL_CAN_ConfigFilter+0x26>
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	f040 80be 	bne.w	80010ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f6e:	4b65      	ldr	r3, [pc, #404]	; (8001104 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f78:	f043 0201 	orr.w	r2, r3, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2201      	movs	r2, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d123      	bne.n	8001018 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ff2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3248      	adds	r2, #72	; 0x48
 8000ff8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800100c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100e:	6979      	ldr	r1, [r7, #20]
 8001010:	3348      	adds	r3, #72	; 0x48
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d122      	bne.n	8001066 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001040:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3248      	adds	r2, #72	; 0x48
 8001046:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800105a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	3348      	adds	r3, #72	; 0x48
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001080:	e007      	b.n	8001092 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	431a      	orrs	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d109      	bne.n	80010ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	401a      	ands	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010ac:	e007      	b.n	80010be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d107      	bne.n	80010d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010dc:	f023 0201 	bic.w	r2, r3, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e006      	b.n	80010f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
  }
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40006400 	.word	0x40006400

08001108 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d12e      	bne.n	800117a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fe00 	bl	8000d38 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800113a:	e012      	b.n	8001162 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800113c:	f7ff fdfc 	bl	8000d38 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d90b      	bls.n	8001162 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2205      	movs	r2, #5
 800115a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e012      	b.n	8001188 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e5      	bne.n	800113c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e006      	b.n	8001188 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
  }
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d003      	beq.n	80011bc <HAL_CAN_AddTxMessage+0x2c>
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	f040 80b8 	bne.w	800132c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10a      	bne.n	80011dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80a0 	beq.w	800131c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	0e1b      	lsrs	r3, r3, #24
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d907      	bls.n	80011fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e09e      	b.n	800133a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011fc:	2201      	movs	r2, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	409a      	lsls	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	6809      	ldr	r1, [r1, #0]
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3318      	adds	r3, #24
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	440b      	add	r3, r1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e00f      	b.n	800124a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001234:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800123e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3318      	adds	r3, #24
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	440b      	add	r3, r1
 8001248:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3318      	adds	r3, #24
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	440b      	add	r3, r1
 800125a:	3304      	adds	r3, #4
 800125c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	7d1b      	ldrb	r3, [r3, #20]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d111      	bne.n	800128a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3318      	adds	r3, #24
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	4413      	add	r3, r2
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	6811      	ldr	r1, [r2, #0]
 800127a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3318      	adds	r3, #24
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	440b      	add	r3, r1
 8001286:	3304      	adds	r3, #4
 8001288:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3307      	adds	r3, #7
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	061a      	lsls	r2, r3, #24
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3306      	adds	r3, #6
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3305      	adds	r3, #5
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	4313      	orrs	r3, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	3204      	adds	r2, #4
 80012aa:	7812      	ldrb	r2, [r2, #0]
 80012ac:	4610      	mov	r0, r2
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	6811      	ldr	r1, [r2, #0]
 80012b2:	ea43 0200 	orr.w	r2, r3, r0
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	440b      	add	r3, r1
 80012bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3303      	adds	r3, #3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	061a      	lsls	r2, r3, #24
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3302      	adds	r3, #2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	041b      	lsls	r3, r3, #16
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	4313      	orrs	r3, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	4610      	mov	r0, r2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	6811      	ldr	r1, [r2, #0]
 80012e8:	ea43 0200 	orr.w	r2, r3, r0
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	440b      	add	r3, r1
 80012f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3318      	adds	r3, #24
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3318      	adds	r3, #24
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	440b      	add	r3, r1
 8001316:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	e00e      	b.n	800133a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e006      	b.n	800133a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
  }
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d002      	beq.n	8001368 <HAL_CAN_IsTxMessagePending+0x22>
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d10b      	bne.n	8001380 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	069b      	lsls	r3, r3, #26
 8001372:	401a      	ands	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	069b      	lsls	r3, r3, #26
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800137c:	2301      	movs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001380:	68fb      	ldr	r3, [r7, #12]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800138e:	b480      	push	{r7}
 8001390:	b087      	sub	sp, #28
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d003      	beq.n	80013b2 <HAL_CAN_GetRxMessage+0x24>
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	f040 80f3 	bne.w	8001598 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10e      	bne.n	80013d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e0e7      	b.n	80015a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0d8      	b.n	80015a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	331b      	adds	r3, #27
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0204 	and.w	r2, r3, #4
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0d5b      	lsrs	r3, r3, #21
 8001422:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e00b      	b.n	8001444 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	331b      	adds	r3, #27
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	331b      	adds	r3, #27
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0202 	and.w	r2, r3, #2
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	331b      	adds	r3, #27
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	3304      	adds	r3, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 020f 	and.w	r2, r3, #15
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	331b      	adds	r3, #27
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	3304      	adds	r3, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b2da      	uxtb	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	331b      	adds	r3, #27
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	3304      	adds	r3, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0a1a      	lsrs	r2, r3, #8
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0c1a      	lsrs	r2, r3, #16
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3302      	adds	r3, #2
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0e1a      	lsrs	r2, r3, #24
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3303      	adds	r3, #3
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3304      	adds	r3, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0a1a      	lsrs	r2, r3, #8
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3305      	adds	r3, #5
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0c1a      	lsrs	r2, r3, #16
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3306      	adds	r3, #6
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0e1a      	lsrs	r2, r3, #24
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3307      	adds	r3, #7
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d108      	bne.n	8001584 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0220 	orr.w	r2, r2, #32
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	e007      	b.n	8001594 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0220 	orr.w	r2, r2, #32
 8001592:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e006      	b.n	80015a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
  }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d002      	beq.n	80015d4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d10f      	bne.n	80015f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e005      	b.n	80015f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80015f4:	68fb      	ldr	r3, [r7, #12]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff47 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff5c 	bl	800164c <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff8e 	bl	80016bc <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffb0 	bl	8001724 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	e165      	b.n	8001ab8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	f040 8154 	bne.w	8001ab2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d00b      	beq.n	800182a <HAL_GPIO_Init+0x5a>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800181e:	2b11      	cmp	r3, #17
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b12      	cmp	r3, #18
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0xfc>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b12      	cmp	r3, #18
 80018ca:	d123      	bne.n	8001914 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	69b9      	ldr	r1, [r7, #24]
 8001910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80ae 	beq.w	8001ab2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b5c      	ldr	r3, [pc, #368]	; (8001acc <HAL_GPIO_Init+0x2fc>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	4a5b      	ldr	r2, [pc, #364]	; (8001acc <HAL_GPIO_Init+0x2fc>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	6453      	str	r3, [r2, #68]	; 0x44
 8001966:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_GPIO_Init+0x2fc>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001972:	4a57      	ldr	r2, [pc, #348]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_GPIO_Init+0x304>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d025      	beq.n	80019ea <HAL_GPIO_Init+0x21a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_GPIO_Init+0x308>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x216>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x30c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x212>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <HAL_GPIO_Init+0x310>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x20e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <HAL_GPIO_Init+0x314>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x20a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <HAL_GPIO_Init+0x318>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x206>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a48      	ldr	r2, [pc, #288]	; (8001aec <HAL_GPIO_Init+0x31c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x202>
 80019ce:	2306      	movs	r3, #6
 80019d0:	e00c      	b.n	80019ec <HAL_GPIO_Init+0x21c>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e00a      	b.n	80019ec <HAL_GPIO_Init+0x21c>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e008      	b.n	80019ec <HAL_GPIO_Init+0x21c>
 80019da:	2304      	movs	r3, #4
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x21c>
 80019de:	2303      	movs	r3, #3
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x21c>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x21c>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x21c>
 80019ea:	2300      	movs	r3, #0
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fc:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a2e:	4a30      	ldr	r2, [pc, #192]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a34:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a1b      	ldr	r2, [pc, #108]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_GPIO_Init+0x320>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	f67f ae96 	bls.w	80017ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3724      	adds	r7, #36	; 0x24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40021400 	.word	0x40021400
 8001aec:	40021800 	.word	0x40021800
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b20:	f7ff f90a 	bl	8000d38 <HAL_GetTick>
 8001b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b26:	e009      	b.n	8001b3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b28:	f7ff f906 	bl	8000d38 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b36:	d901      	bls.n	8001b3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e01f      	b.n	8001b7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d1ee      	bne.n	8001b28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff f8f2 	bl	8000d38 <HAL_GetTick>
 8001b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b56:	e009      	b.n	8001b6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b58:	f7ff f8ee 	bl	8000d38 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b66:	d901      	bls.n	8001b6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e007      	b.n	8001b7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b78:	d1ee      	bne.n	8001b58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	420e0040 	.word	0x420e0040
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	420e0044 	.word	0x420e0044

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b65      	ldr	r3, [pc, #404]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d044      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d119      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e067      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4934      	ldr	r1, [pc, #208]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f858 	bl	8000d38 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f854 	bl	8000d38 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e04f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20c      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f855 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe ffb8 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	080037d0 	.word	0x080037d0
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	2000000c 	.word	0x2000000c

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000008 	.word	0x20000008

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	080037e0 	.word	0x080037e0

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffdc 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	080037e0 	.word	0x080037e0

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de2:	4bc6      	ldr	r3, [pc, #792]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	f200 817e 	bhi.w	80020ec <HAL_RCC_GetSysClockFreq+0x324>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <HAL_RCC_GetSysClockFreq+0x30>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e2d 	.word	0x08001e2d
 8001dfc:	080020ed 	.word	0x080020ed
 8001e00:	080020ed 	.word	0x080020ed
 8001e04:	080020ed 	.word	0x080020ed
 8001e08:	08001e33 	.word	0x08001e33
 8001e0c:	080020ed 	.word	0x080020ed
 8001e10:	080020ed 	.word	0x080020ed
 8001e14:	080020ed 	.word	0x080020ed
 8001e18:	08001e39 	.word	0x08001e39
 8001e1c:	080020ed 	.word	0x080020ed
 8001e20:	080020ed 	.word	0x080020ed
 8001e24:	080020ed 	.word	0x080020ed
 8001e28:	08001f95 	.word	0x08001f95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4bb4      	ldr	r3, [pc, #720]	; (8002100 <HAL_RCC_GetSysClockFreq+0x338>)
 8001e2e:	613b      	str	r3, [r7, #16]
       break;
 8001e30:	e15f      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e32:	4bb4      	ldr	r3, [pc, #720]	; (8002104 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001e34:	613b      	str	r3, [r7, #16]
      break;
 8001e36:	e15c      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e38:	4bb0      	ldr	r3, [pc, #704]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e40:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e42:	4bae      	ldr	r3, [pc, #696]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d04a      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4e:	4bab      	ldr	r3, [pc, #684]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	099b      	lsrs	r3, r3, #6
 8001e54:	f04f 0400 	mov.w	r4, #0
 8001e58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	ea03 0501 	and.w	r5, r3, r1
 8001e64:	ea04 0602 	and.w	r6, r4, r2
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4632      	mov	r2, r6
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f04f 0400 	mov.w	r4, #0
 8001e74:	0154      	lsls	r4, r2, #5
 8001e76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e7a:	014b      	lsls	r3, r1, #5
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4622      	mov	r2, r4
 8001e80:	1b49      	subs	r1, r1, r5
 8001e82:	eb62 0206 	sbc.w	r2, r2, r6
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	f04f 0400 	mov.w	r4, #0
 8001e8e:	0194      	lsls	r4, r2, #6
 8001e90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e94:	018b      	lsls	r3, r1, #6
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	eb64 0402 	sbc.w	r4, r4, r2
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	00e2      	lsls	r2, r4, #3
 8001ea6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eaa:	00d9      	lsls	r1, r3, #3
 8001eac:	460b      	mov	r3, r1
 8001eae:	4614      	mov	r4, r2
 8001eb0:	195b      	adds	r3, r3, r5
 8001eb2:	eb44 0406 	adc.w	r4, r4, r6
 8001eb6:	f04f 0100 	mov.w	r1, #0
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	0262      	lsls	r2, r4, #9
 8001ec0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ec4:	0259      	lsls	r1, r3, #9
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4614      	mov	r4, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4621      	mov	r1, r4
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f04f 0400 	mov.w	r4, #0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	f7fe f9f2 	bl	80002c0 <__aeabi_uldivmod>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e049      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee4:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	f04f 0400 	mov.w	r4, #0
 8001eee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	ea03 0501 	and.w	r5, r3, r1
 8001efa:	ea04 0602 	and.w	r6, r4, r2
 8001efe:	4629      	mov	r1, r5
 8001f00:	4632      	mov	r2, r6
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f04f 0400 	mov.w	r4, #0
 8001f0a:	0154      	lsls	r4, r2, #5
 8001f0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f10:	014b      	lsls	r3, r1, #5
 8001f12:	4619      	mov	r1, r3
 8001f14:	4622      	mov	r2, r4
 8001f16:	1b49      	subs	r1, r1, r5
 8001f18:	eb62 0206 	sbc.w	r2, r2, r6
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	f04f 0400 	mov.w	r4, #0
 8001f24:	0194      	lsls	r4, r2, #6
 8001f26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f2a:	018b      	lsls	r3, r1, #6
 8001f2c:	1a5b      	subs	r3, r3, r1
 8001f2e:	eb64 0402 	sbc.w	r4, r4, r2
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	00e2      	lsls	r2, r4, #3
 8001f3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f40:	00d9      	lsls	r1, r3, #3
 8001f42:	460b      	mov	r3, r1
 8001f44:	4614      	mov	r4, r2
 8001f46:	195b      	adds	r3, r3, r5
 8001f48:	eb44 0406 	adc.w	r4, r4, r6
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	02a2      	lsls	r2, r4, #10
 8001f56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f5a:	0299      	lsls	r1, r3, #10
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4614      	mov	r4, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	4621      	mov	r1, r4
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f04f 0400 	mov.w	r4, #0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4623      	mov	r3, r4
 8001f6e:	f7fe f9a7 	bl	80002c0 <__aeabi_uldivmod>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f78:	4b60      	ldr	r3, [pc, #384]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	e0ae      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9e:	4b57      	ldr	r3, [pc, #348]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d04a      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4b54      	ldr	r3, [pc, #336]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	f04f 0400 	mov.w	r4, #0
 8001fb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	ea03 0501 	and.w	r5, r3, r1
 8001fc0:	ea04 0602 	and.w	r6, r4, r2
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4632      	mov	r2, r6
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	f04f 0400 	mov.w	r4, #0
 8001fd0:	0154      	lsls	r4, r2, #5
 8001fd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd6:	014b      	lsls	r3, r1, #5
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4622      	mov	r2, r4
 8001fdc:	1b49      	subs	r1, r1, r5
 8001fde:	eb62 0206 	sbc.w	r2, r2, r6
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	f04f 0400 	mov.w	r4, #0
 8001fea:	0194      	lsls	r4, r2, #6
 8001fec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ff0:	018b      	lsls	r3, r1, #6
 8001ff2:	1a5b      	subs	r3, r3, r1
 8001ff4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	00e2      	lsls	r2, r4, #3
 8002002:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	195b      	adds	r3, r3, r5
 800200e:	eb44 0406 	adc.w	r4, r4, r6
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	0262      	lsls	r2, r4, #9
 800201c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002020:	0259      	lsls	r1, r3, #9
 8002022:	460b      	mov	r3, r1
 8002024:	4614      	mov	r4, r2
 8002026:	4618      	mov	r0, r3
 8002028:	4621      	mov	r1, r4
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	f7fe f944 	bl	80002c0 <__aeabi_uldivmod>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e049      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	ea03 0501 	and.w	r5, r3, r1
 8002056:	ea04 0602 	and.w	r6, r4, r2
 800205a:	4629      	mov	r1, r5
 800205c:	4632      	mov	r2, r6
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	f04f 0400 	mov.w	r4, #0
 8002066:	0154      	lsls	r4, r2, #5
 8002068:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800206c:	014b      	lsls	r3, r1, #5
 800206e:	4619      	mov	r1, r3
 8002070:	4622      	mov	r2, r4
 8002072:	1b49      	subs	r1, r1, r5
 8002074:	eb62 0206 	sbc.w	r2, r2, r6
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	f04f 0400 	mov.w	r4, #0
 8002080:	0194      	lsls	r4, r2, #6
 8002082:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002086:	018b      	lsls	r3, r1, #6
 8002088:	1a5b      	subs	r3, r3, r1
 800208a:	eb64 0402 	sbc.w	r4, r4, r2
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	00e2      	lsls	r2, r4, #3
 8002098:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800209c:	00d9      	lsls	r1, r3, #3
 800209e:	460b      	mov	r3, r1
 80020a0:	4614      	mov	r4, r2
 80020a2:	195b      	adds	r3, r3, r5
 80020a4:	eb44 0406 	adc.w	r4, r4, r6
 80020a8:	f04f 0100 	mov.w	r1, #0
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	02a2      	lsls	r2, r4, #10
 80020b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020b6:	0299      	lsls	r1, r3, #10
 80020b8:	460b      	mov	r3, r1
 80020ba:	4614      	mov	r4, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	4621      	mov	r1, r4
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	f7fe f8f9 	bl	80002c0 <__aeabi_uldivmod>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_GetSysClockFreq+0x334>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0f1b      	lsrs	r3, r3, #28
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	613b      	str	r3, [r7, #16]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <HAL_RCC_GetSysClockFreq+0x338>)
 80020ee:	613b      	str	r3, [r7, #16]
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	693b      	ldr	r3, [r7, #16]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200

08002108 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8083 	beq.w	8002228 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d019      	beq.n	8002162 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800212e:	4b92      	ldr	r3, [pc, #584]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002136:	2b08      	cmp	r3, #8
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800213a:	4b8f      	ldr	r3, [pc, #572]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002148:	4b8b      	ldr	r3, [pc, #556]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002154:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b85      	ldr	r3, [pc, #532]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d05b      	beq.n	8002226 <HAL_RCC_OscConfig+0x11e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d157      	bne.n	8002226 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e216      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x8a>
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7b      	ldr	r2, [pc, #492]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e01d      	b.n	80021ce <HAL_RCC_OscConfig+0xc6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0xae>
 800219c:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a75      	ldr	r2, [pc, #468]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b73      	ldr	r3, [pc, #460]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a72      	ldr	r2, [pc, #456]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0xc6>
 80021b6:	4b70      	ldr	r3, [pc, #448]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6f      	ldr	r2, [pc, #444]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6c      	ldr	r2, [pc, #432]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d013      	beq.n	80021fe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe fdaf 	bl	8000d38 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021de:	f7fe fdab 	bl	8000d38 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b64      	cmp	r3, #100	; 0x64
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1db      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f0:	4b61      	ldr	r3, [pc, #388]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0xd6>
 80021fc:	e014      	b.n	8002228 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe fd9b 	bl	8000d38 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002206:	f7fe fd97 	bl	8000d38 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	; 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1c7      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002218:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0xfe>
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d06f      	beq.n	8002314 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002240:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002248:	2b08      	cmp	r3, #8
 800224a:	d105      	bne.n	8002258 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800224c:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d11c      	bne.n	800229e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002264:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d116      	bne.n	800229e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_OscConfig+0x180>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e18f      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4938      	ldr	r1, [pc, #224]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229c:	e03a      	b.n	8002314 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d020      	beq.n	80022e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <HAL_RCC_OscConfig+0x274>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fd44 	bl	8000d38 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe fd40 	bl	8000d38 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e170      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4925      	ldr	r1, [pc, #148]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
 80022e6:	e015      	b.n	8002314 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_OscConfig+0x274>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fd23 	bl	8000d38 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe fd1f 	bl	8000d38 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e14f      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d037      	beq.n	8002390 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d016      	beq.n	8002356 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_RCC_OscConfig+0x278>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7fe fd03 	bl	8000d38 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002336:	f7fe fcff 	bl	8000d38 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e12f      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800234a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x22e>
 8002354:	e01c      	b.n	8002390 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RCC_OscConfig+0x278>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe fcec 	bl	8000d38 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002362:	e00f      	b.n	8002384 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fce8 	bl	8000d38 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d908      	bls.n	8002384 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e118      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	42470000 	.word	0x42470000
 8002380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	4b8a      	ldr	r3, [pc, #552]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e9      	bne.n	8002364 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8097 	beq.w	80024cc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a2:	4b83      	ldr	r3, [pc, #524]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a7e      	ldr	r2, [pc, #504]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80023b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b7c      	ldr	r3, [pc, #496]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b79      	ldr	r3, [pc, #484]	; (80025b4 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d118      	bne.n	800240c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4ac>)
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e6:	f7fe fca7 	bl	8000d38 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ee:	f7fe fca3 	bl	8000d38 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0d3      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x31a>
 8002414:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a65      	ldr	r2, [pc, #404]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x354>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x33c>
 800242a:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a60      	ldr	r2, [pc, #384]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	4b5e      	ldr	r3, [pc, #376]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0x354>
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a59      	ldr	r2, [pc, #356]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002456:	f023 0304 	bic.w	r3, r3, #4
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fc68 	bl	8000d38 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fc64 	bl	8000d38 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e092      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ee      	beq.n	800246c <HAL_RCC_OscConfig+0x364>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7fe fc52 	bl	8000d38 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002496:	e00a      	b.n	80024ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7fe fc4e 	bl	8000d38 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e07c      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ee      	bne.n	8002498 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a3a      	ldr	r2, [pc, #232]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d068      	beq.n	80025a6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d060      	beq.n	80025a2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d145      	bne.n	8002574 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCC_OscConfig+0x4b0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fc23 	bl	8000d38 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe fc1f 	bl	8000d38 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e04f      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	019b      	lsls	r3, r3, #6
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	041b      	lsls	r3, r3, #16
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	071b      	lsls	r3, r3, #28
 8002540:	491b      	ldr	r1, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCC_OscConfig+0x4b0>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fbf4 	bl	8000d38 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fbf0 	bl	8000d38 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e020      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x44c>
 8002572:	e018      	b.n	80025a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_OscConfig+0x4b0>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7fe fbdd 	bl	8000d38 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fbd9 	bl	8000d38 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e009      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0x4a8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x47a>
 80025a0:	e001      	b.n	80025a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42470060 	.word	0x42470060

080025bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e03f      	b.n	800264e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fa56 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	; 0x24
 80025ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f90b 	bl	800281c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b088      	sub	sp, #32
 800265a:	af02      	add	r7, sp, #8
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	f040 8083 	bne.w	800277e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_UART_Transmit+0x2e>
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e07b      	b.n	8002780 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_UART_Transmit+0x40>
 8002692:	2302      	movs	r3, #2
 8002694:	e074      	b.n	8002780 <HAL_UART_Transmit+0x12a>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2221      	movs	r2, #33	; 0x21
 80026a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026ac:	f7fe fb44 	bl	8000d38 <HAL_GetTick>
 80026b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80026c6:	e042      	b.n	800274e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	d122      	bne.n	8002726 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f84c 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e042      	b.n	8002780 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800270c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3302      	adds	r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	e017      	b.n	800274e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	e013      	b.n	800274e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2200      	movs	r2, #0
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f829 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e01f      	b.n	8002780 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1b7      	bne.n	80026c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2200      	movs	r2, #0
 8002760:	2140      	movs	r1, #64	; 0x40
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f810 	bl	8002788 <UART_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e006      	b.n	8002780 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002798:	e02c      	b.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d028      	beq.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80027a8:	f7fe fac6 	bl	8000d38 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d21d      	bcs.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e00f      	b.n	8002814 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	429a      	cmp	r2, r3
 8002810:	d0c3      	beq.n	800279a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800285e:	f023 030c 	bic.w	r3, r3, #12
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	430b      	orrs	r3, r1
 800286a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288a:	f040 818b 	bne.w	8002ba4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4ac1      	ldr	r2, [pc, #772]	; (8002b98 <UART_SetConfig+0x37c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d005      	beq.n	80028a4 <UART_SetConfig+0x88>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4abf      	ldr	r2, [pc, #764]	; (8002b9c <UART_SetConfig+0x380>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	f040 80bd 	bne.w	8002a1e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028a4:	f7ff fa7c 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80028a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	461d      	mov	r5, r3
 80028ae:	f04f 0600 	mov.w	r6, #0
 80028b2:	46a8      	mov	r8, r5
 80028b4:	46b1      	mov	r9, r6
 80028b6:	eb18 0308 	adds.w	r3, r8, r8
 80028ba:	eb49 0409 	adc.w	r4, r9, r9
 80028be:	4698      	mov	r8, r3
 80028c0:	46a1      	mov	r9, r4
 80028c2:	eb18 0805 	adds.w	r8, r8, r5
 80028c6:	eb49 0906 	adc.w	r9, r9, r6
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028de:	4688      	mov	r8, r1
 80028e0:	4691      	mov	r9, r2
 80028e2:	eb18 0005 	adds.w	r0, r8, r5
 80028e6:	eb49 0106 	adc.w	r1, r9, r6
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	461d      	mov	r5, r3
 80028f0:	f04f 0600 	mov.w	r6, #0
 80028f4:	196b      	adds	r3, r5, r5
 80028f6:	eb46 0406 	adc.w	r4, r6, r6
 80028fa:	461a      	mov	r2, r3
 80028fc:	4623      	mov	r3, r4
 80028fe:	f7fd fcdf 	bl	80002c0 <__aeabi_uldivmod>
 8002902:	4603      	mov	r3, r0
 8002904:	460c      	mov	r4, r1
 8002906:	461a      	mov	r2, r3
 8002908:	4ba5      	ldr	r3, [pc, #660]	; (8002ba0 <UART_SetConfig+0x384>)
 800290a:	fba3 2302 	umull	r2, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	461d      	mov	r5, r3
 8002918:	f04f 0600 	mov.w	r6, #0
 800291c:	46a9      	mov	r9, r5
 800291e:	46b2      	mov	sl, r6
 8002920:	eb19 0309 	adds.w	r3, r9, r9
 8002924:	eb4a 040a 	adc.w	r4, sl, sl
 8002928:	4699      	mov	r9, r3
 800292a:	46a2      	mov	sl, r4
 800292c:	eb19 0905 	adds.w	r9, r9, r5
 8002930:	eb4a 0a06 	adc.w	sl, sl, r6
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002948:	4689      	mov	r9, r1
 800294a:	4692      	mov	sl, r2
 800294c:	eb19 0005 	adds.w	r0, r9, r5
 8002950:	eb4a 0106 	adc.w	r1, sl, r6
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	461d      	mov	r5, r3
 800295a:	f04f 0600 	mov.w	r6, #0
 800295e:	196b      	adds	r3, r5, r5
 8002960:	eb46 0406 	adc.w	r4, r6, r6
 8002964:	461a      	mov	r2, r3
 8002966:	4623      	mov	r3, r4
 8002968:	f7fd fcaa 	bl	80002c0 <__aeabi_uldivmod>
 800296c:	4603      	mov	r3, r0
 800296e:	460c      	mov	r4, r1
 8002970:	461a      	mov	r2, r3
 8002972:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <UART_SetConfig+0x384>)
 8002974:	fba3 1302 	umull	r1, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	2164      	movs	r1, #100	; 0x64
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	3332      	adds	r3, #50	; 0x32
 8002986:	4a86      	ldr	r2, [pc, #536]	; (8002ba0 <UART_SetConfig+0x384>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002994:	4498      	add	r8, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	461d      	mov	r5, r3
 800299a:	f04f 0600 	mov.w	r6, #0
 800299e:	46a9      	mov	r9, r5
 80029a0:	46b2      	mov	sl, r6
 80029a2:	eb19 0309 	adds.w	r3, r9, r9
 80029a6:	eb4a 040a 	adc.w	r4, sl, sl
 80029aa:	4699      	mov	r9, r3
 80029ac:	46a2      	mov	sl, r4
 80029ae:	eb19 0905 	adds.w	r9, r9, r5
 80029b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ca:	4689      	mov	r9, r1
 80029cc:	4692      	mov	sl, r2
 80029ce:	eb19 0005 	adds.w	r0, r9, r5
 80029d2:	eb4a 0106 	adc.w	r1, sl, r6
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	461d      	mov	r5, r3
 80029dc:	f04f 0600 	mov.w	r6, #0
 80029e0:	196b      	adds	r3, r5, r5
 80029e2:	eb46 0406 	adc.w	r4, r6, r6
 80029e6:	461a      	mov	r2, r3
 80029e8:	4623      	mov	r3, r4
 80029ea:	f7fd fc69 	bl	80002c0 <__aeabi_uldivmod>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <UART_SetConfig+0x384>)
 80029f6:	fba3 1302 	umull	r1, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2164      	movs	r1, #100	; 0x64
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	3332      	adds	r3, #50	; 0x32
 8002a08:	4a65      	ldr	r2, [pc, #404]	; (8002ba0 <UART_SetConfig+0x384>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	f003 0207 	and.w	r2, r3, #7
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4442      	add	r2, r8
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	e26f      	b.n	8002efe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a1e:	f7ff f9ab 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002a22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	461d      	mov	r5, r3
 8002a28:	f04f 0600 	mov.w	r6, #0
 8002a2c:	46a8      	mov	r8, r5
 8002a2e:	46b1      	mov	r9, r6
 8002a30:	eb18 0308 	adds.w	r3, r8, r8
 8002a34:	eb49 0409 	adc.w	r4, r9, r9
 8002a38:	4698      	mov	r8, r3
 8002a3a:	46a1      	mov	r9, r4
 8002a3c:	eb18 0805 	adds.w	r8, r8, r5
 8002a40:	eb49 0906 	adc.w	r9, r9, r6
 8002a44:	f04f 0100 	mov.w	r1, #0
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a58:	4688      	mov	r8, r1
 8002a5a:	4691      	mov	r9, r2
 8002a5c:	eb18 0005 	adds.w	r0, r8, r5
 8002a60:	eb49 0106 	adc.w	r1, r9, r6
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	461d      	mov	r5, r3
 8002a6a:	f04f 0600 	mov.w	r6, #0
 8002a6e:	196b      	adds	r3, r5, r5
 8002a70:	eb46 0406 	adc.w	r4, r6, r6
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	f7fd fc22 	bl	80002c0 <__aeabi_uldivmod>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <UART_SetConfig+0x384>)
 8002a84:	fba3 2302 	umull	r2, r3, r3, r2
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	461d      	mov	r5, r3
 8002a92:	f04f 0600 	mov.w	r6, #0
 8002a96:	46a9      	mov	r9, r5
 8002a98:	46b2      	mov	sl, r6
 8002a9a:	eb19 0309 	adds.w	r3, r9, r9
 8002a9e:	eb4a 040a 	adc.w	r4, sl, sl
 8002aa2:	4699      	mov	r9, r3
 8002aa4:	46a2      	mov	sl, r4
 8002aa6:	eb19 0905 	adds.w	r9, r9, r5
 8002aaa:	eb4a 0a06 	adc.w	sl, sl, r6
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002abe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ac2:	4689      	mov	r9, r1
 8002ac4:	4692      	mov	sl, r2
 8002ac6:	eb19 0005 	adds.w	r0, r9, r5
 8002aca:	eb4a 0106 	adc.w	r1, sl, r6
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	461d      	mov	r5, r3
 8002ad4:	f04f 0600 	mov.w	r6, #0
 8002ad8:	196b      	adds	r3, r5, r5
 8002ada:	eb46 0406 	adc.w	r4, r6, r6
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	f7fd fbed 	bl	80002c0 <__aeabi_uldivmod>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <UART_SetConfig+0x384>)
 8002aee:	fba3 1302 	umull	r1, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2164      	movs	r1, #100	; 0x64
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	3332      	adds	r3, #50	; 0x32
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <UART_SetConfig+0x384>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b0e:	4498      	add	r8, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	461d      	mov	r5, r3
 8002b14:	f04f 0600 	mov.w	r6, #0
 8002b18:	46a9      	mov	r9, r5
 8002b1a:	46b2      	mov	sl, r6
 8002b1c:	eb19 0309 	adds.w	r3, r9, r9
 8002b20:	eb4a 040a 	adc.w	r4, sl, sl
 8002b24:	4699      	mov	r9, r3
 8002b26:	46a2      	mov	sl, r4
 8002b28:	eb19 0905 	adds.w	r9, r9, r5
 8002b2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b44:	4689      	mov	r9, r1
 8002b46:	4692      	mov	sl, r2
 8002b48:	eb19 0005 	adds.w	r0, r9, r5
 8002b4c:	eb4a 0106 	adc.w	r1, sl, r6
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	461d      	mov	r5, r3
 8002b56:	f04f 0600 	mov.w	r6, #0
 8002b5a:	196b      	adds	r3, r5, r5
 8002b5c:	eb46 0406 	adc.w	r4, r6, r6
 8002b60:	461a      	mov	r2, r3
 8002b62:	4623      	mov	r3, r4
 8002b64:	f7fd fbac 	bl	80002c0 <__aeabi_uldivmod>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <UART_SetConfig+0x384>)
 8002b70:	fba3 1302 	umull	r1, r3, r3, r2
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	2164      	movs	r1, #100	; 0x64
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	3332      	adds	r3, #50	; 0x32
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <UART_SetConfig+0x384>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	f003 0207 	and.w	r2, r3, #7
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4442      	add	r2, r8
 8002b94:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b96:	e1b2      	b.n	8002efe <UART_SetConfig+0x6e2>
 8002b98:	40011000 	.word	0x40011000
 8002b9c:	40011400 	.word	0x40011400
 8002ba0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4ad7      	ldr	r2, [pc, #860]	; (8002f08 <UART_SetConfig+0x6ec>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d005      	beq.n	8002bba <UART_SetConfig+0x39e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4ad6      	ldr	r2, [pc, #856]	; (8002f0c <UART_SetConfig+0x6f0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	f040 80d1 	bne.w	8002d5c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bba:	f7ff f8f1 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002bbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	469a      	mov	sl, r3
 8002bc4:	f04f 0b00 	mov.w	fp, #0
 8002bc8:	46d0      	mov	r8, sl
 8002bca:	46d9      	mov	r9, fp
 8002bcc:	eb18 0308 	adds.w	r3, r8, r8
 8002bd0:	eb49 0409 	adc.w	r4, r9, r9
 8002bd4:	4698      	mov	r8, r3
 8002bd6:	46a1      	mov	r9, r4
 8002bd8:	eb18 080a 	adds.w	r8, r8, sl
 8002bdc:	eb49 090b 	adc.w	r9, r9, fp
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bf4:	4688      	mov	r8, r1
 8002bf6:	4691      	mov	r9, r2
 8002bf8:	eb1a 0508 	adds.w	r5, sl, r8
 8002bfc:	eb4b 0609 	adc.w	r6, fp, r9
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	f04f 0400 	mov.w	r4, #0
 8002c12:	0094      	lsls	r4, r2, #2
 8002c14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c18:	008b      	lsls	r3, r1, #2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	4628      	mov	r0, r5
 8002c20:	4631      	mov	r1, r6
 8002c22:	f7fd fb4d 	bl	80002c0 <__aeabi_uldivmod>
 8002c26:	4603      	mov	r3, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4bb8      	ldr	r3, [pc, #736]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	469b      	mov	fp, r3
 8002c3c:	f04f 0c00 	mov.w	ip, #0
 8002c40:	46d9      	mov	r9, fp
 8002c42:	46e2      	mov	sl, ip
 8002c44:	eb19 0309 	adds.w	r3, r9, r9
 8002c48:	eb4a 040a 	adc.w	r4, sl, sl
 8002c4c:	4699      	mov	r9, r3
 8002c4e:	46a2      	mov	sl, r4
 8002c50:	eb19 090b 	adds.w	r9, r9, fp
 8002c54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c6c:	4689      	mov	r9, r1
 8002c6e:	4692      	mov	sl, r2
 8002c70:	eb1b 0509 	adds.w	r5, fp, r9
 8002c74:	eb4c 060a 	adc.w	r6, ip, sl
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	f04f 0400 	mov.w	r4, #0
 8002c8a:	0094      	lsls	r4, r2, #2
 8002c8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c90:	008b      	lsls	r3, r1, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	4623      	mov	r3, r4
 8002c96:	4628      	mov	r0, r5
 8002c98:	4631      	mov	r1, r6
 8002c9a:	f7fd fb11 	bl	80002c0 <__aeabi_uldivmod>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b9a      	ldr	r3, [pc, #616]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2164      	movs	r1, #100	; 0x64
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	; 0x32
 8002cb8:	4a95      	ldr	r2, [pc, #596]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	4498      	add	r8, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	469b      	mov	fp, r3
 8002cca:	f04f 0c00 	mov.w	ip, #0
 8002cce:	46d9      	mov	r9, fp
 8002cd0:	46e2      	mov	sl, ip
 8002cd2:	eb19 0309 	adds.w	r3, r9, r9
 8002cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8002cda:	4699      	mov	r9, r3
 8002cdc:	46a2      	mov	sl, r4
 8002cde:	eb19 090b 	adds.w	r9, r9, fp
 8002ce2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	4692      	mov	sl, r2
 8002cfe:	eb1b 0509 	adds.w	r5, fp, r9
 8002d02:	eb4c 060a 	adc.w	r6, ip, sl
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0094      	lsls	r4, r2, #2
 8002d1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d1e:	008b      	lsls	r3, r1, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	4628      	mov	r0, r5
 8002d26:	4631      	mov	r1, r6
 8002d28:	f7fd faca 	bl	80002c0 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b77      	ldr	r3, [pc, #476]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002d34:	fba3 1302 	umull	r1, r3, r3, r2
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	2164      	movs	r1, #100	; 0x64
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	3332      	adds	r3, #50	; 0x32
 8002d46:	4a72      	ldr	r2, [pc, #456]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4442      	add	r2, r8
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e0d0      	b.n	8002efe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7ff f80c 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002d60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	469a      	mov	sl, r3
 8002d66:	f04f 0b00 	mov.w	fp, #0
 8002d6a:	46d0      	mov	r8, sl
 8002d6c:	46d9      	mov	r9, fp
 8002d6e:	eb18 0308 	adds.w	r3, r8, r8
 8002d72:	eb49 0409 	adc.w	r4, r9, r9
 8002d76:	4698      	mov	r8, r3
 8002d78:	46a1      	mov	r9, r4
 8002d7a:	eb18 080a 	adds.w	r8, r8, sl
 8002d7e:	eb49 090b 	adc.w	r9, r9, fp
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d96:	4688      	mov	r8, r1
 8002d98:	4691      	mov	r9, r2
 8002d9a:	eb1a 0508 	adds.w	r5, sl, r8
 8002d9e:	eb4b 0609 	adc.w	r6, fp, r9
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4619      	mov	r1, r3
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	0094      	lsls	r4, r2, #2
 8002db6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dba:	008b      	lsls	r3, r1, #2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	4631      	mov	r1, r6
 8002dc4:	f7fd fa7c 	bl	80002c0 <__aeabi_uldivmod>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	469b      	mov	fp, r3
 8002dde:	f04f 0c00 	mov.w	ip, #0
 8002de2:	46d9      	mov	r9, fp
 8002de4:	46e2      	mov	sl, ip
 8002de6:	eb19 0309 	adds.w	r3, r9, r9
 8002dea:	eb4a 040a 	adc.w	r4, sl, sl
 8002dee:	4699      	mov	r9, r3
 8002df0:	46a2      	mov	sl, r4
 8002df2:	eb19 090b 	adds.w	r9, r9, fp
 8002df6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e0e:	4689      	mov	r9, r1
 8002e10:	4692      	mov	sl, r2
 8002e12:	eb1b 0509 	adds.w	r5, fp, r9
 8002e16:	eb4c 060a 	adc.w	r6, ip, sl
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	f04f 0400 	mov.w	r4, #0
 8002e2c:	0094      	lsls	r4, r2, #2
 8002e2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e32:	008b      	lsls	r3, r1, #2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	4628      	mov	r0, r5
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	f7fd fa40 	bl	80002c0 <__aeabi_uldivmod>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	2164      	movs	r1, #100	; 0x64
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	3332      	adds	r3, #50	; 0x32
 8002e5a:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e66:	4498      	add	r8, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	469b      	mov	fp, r3
 8002e6c:	f04f 0c00 	mov.w	ip, #0
 8002e70:	46d9      	mov	r9, fp
 8002e72:	46e2      	mov	sl, ip
 8002e74:	eb19 0309 	adds.w	r3, r9, r9
 8002e78:	eb4a 040a 	adc.w	r4, sl, sl
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	46a2      	mov	sl, r4
 8002e80:	eb19 090b 	adds.w	r9, r9, fp
 8002e84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e9c:	4689      	mov	r9, r1
 8002e9e:	4692      	mov	sl, r2
 8002ea0:	eb1b 0509 	adds.w	r5, fp, r9
 8002ea4:	eb4c 060a 	adc.w	r6, ip, sl
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	f04f 0400 	mov.w	r4, #0
 8002eba:	0094      	lsls	r4, r2, #2
 8002ebc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ec0:	008b      	lsls	r3, r1, #2
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	4631      	mov	r1, r6
 8002eca:	f7fd f9f9 	bl	80002c0 <__aeabi_uldivmod>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2164      	movs	r1, #100	; 0x64
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <UART_SetConfig+0x6f4>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4442      	add	r2, r8
 8002efa:	609a      	str	r2, [r3, #8]
}
 8002efc:	e7ff      	b.n	8002efe <UART_SetConfig+0x6e2>
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	51eb851f 	.word	0x51eb851f

08002f14 <__errno>:
 8002f14:	4b01      	ldr	r3, [pc, #4]	; (8002f1c <__errno+0x8>)
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000014 	.word	0x20000014

08002f20 <__libc_init_array>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	4e0d      	ldr	r6, [pc, #52]	; (8002f58 <__libc_init_array+0x38>)
 8002f24:	4c0d      	ldr	r4, [pc, #52]	; (8002f5c <__libc_init_array+0x3c>)
 8002f26:	1ba4      	subs	r4, r4, r6
 8002f28:	10a4      	asrs	r4, r4, #2
 8002f2a:	2500      	movs	r5, #0
 8002f2c:	42a5      	cmp	r5, r4
 8002f2e:	d109      	bne.n	8002f44 <__libc_init_array+0x24>
 8002f30:	4e0b      	ldr	r6, [pc, #44]	; (8002f60 <__libc_init_array+0x40>)
 8002f32:	4c0c      	ldr	r4, [pc, #48]	; (8002f64 <__libc_init_array+0x44>)
 8002f34:	f000 fc26 	bl	8003784 <_init>
 8002f38:	1ba4      	subs	r4, r4, r6
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	42a5      	cmp	r5, r4
 8002f40:	d105      	bne.n	8002f4e <__libc_init_array+0x2e>
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f48:	4798      	blx	r3
 8002f4a:	3501      	adds	r5, #1
 8002f4c:	e7ee      	b.n	8002f2c <__libc_init_array+0xc>
 8002f4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f52:	4798      	blx	r3
 8002f54:	3501      	adds	r5, #1
 8002f56:	e7f2      	b.n	8002f3e <__libc_init_array+0x1e>
 8002f58:	08003824 	.word	0x08003824
 8002f5c:	08003824 	.word	0x08003824
 8002f60:	08003824 	.word	0x08003824
 8002f64:	08003828 	.word	0x08003828

08002f68 <memset>:
 8002f68:	4402      	add	r2, r0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <siprintf>:
 8002f78:	b40e      	push	{r1, r2, r3}
 8002f7a:	b500      	push	{lr}
 8002f7c:	b09c      	sub	sp, #112	; 0x70
 8002f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8002f80:	9002      	str	r0, [sp, #8]
 8002f82:	9006      	str	r0, [sp, #24]
 8002f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f88:	4809      	ldr	r0, [pc, #36]	; (8002fb0 <siprintf+0x38>)
 8002f8a:	9107      	str	r1, [sp, #28]
 8002f8c:	9104      	str	r1, [sp, #16]
 8002f8e:	4909      	ldr	r1, [pc, #36]	; (8002fb4 <siprintf+0x3c>)
 8002f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f94:	9105      	str	r1, [sp, #20]
 8002f96:	6800      	ldr	r0, [r0, #0]
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	a902      	add	r1, sp, #8
 8002f9c:	f000 f866 	bl	800306c <_svfiprintf_r>
 8002fa0:	9b02      	ldr	r3, [sp, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	b01c      	add	sp, #112	; 0x70
 8002fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fac:	b003      	add	sp, #12
 8002fae:	4770      	bx	lr
 8002fb0:	20000014 	.word	0x20000014
 8002fb4:	ffff0208 	.word	0xffff0208

08002fb8 <__ssputs_r>:
 8002fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fbc:	688e      	ldr	r6, [r1, #8]
 8002fbe:	429e      	cmp	r6, r3
 8002fc0:	4682      	mov	sl, r0
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	4690      	mov	r8, r2
 8002fc6:	4699      	mov	r9, r3
 8002fc8:	d837      	bhi.n	800303a <__ssputs_r+0x82>
 8002fca:	898a      	ldrh	r2, [r1, #12]
 8002fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fd0:	d031      	beq.n	8003036 <__ssputs_r+0x7e>
 8002fd2:	6825      	ldr	r5, [r4, #0]
 8002fd4:	6909      	ldr	r1, [r1, #16]
 8002fd6:	1a6f      	subs	r7, r5, r1
 8002fd8:	6965      	ldr	r5, [r4, #20]
 8002fda:	2302      	movs	r3, #2
 8002fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fe0:	fb95 f5f3 	sdiv	r5, r5, r3
 8002fe4:	f109 0301 	add.w	r3, r9, #1
 8002fe8:	443b      	add	r3, r7
 8002fea:	429d      	cmp	r5, r3
 8002fec:	bf38      	it	cc
 8002fee:	461d      	movcc	r5, r3
 8002ff0:	0553      	lsls	r3, r2, #21
 8002ff2:	d530      	bpl.n	8003056 <__ssputs_r+0x9e>
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	f000 fb2b 	bl	8003650 <_malloc_r>
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	b950      	cbnz	r0, 8003014 <__ssputs_r+0x5c>
 8002ffe:	230c      	movs	r3, #12
 8003000:	f8ca 3000 	str.w	r3, [sl]
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800300a:	81a3      	strh	r3, [r4, #12]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003014:	463a      	mov	r2, r7
 8003016:	6921      	ldr	r1, [r4, #16]
 8003018:	f000 faa8 	bl	800356c <memcpy>
 800301c:	89a3      	ldrh	r3, [r4, #12]
 800301e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003026:	81a3      	strh	r3, [r4, #12]
 8003028:	6126      	str	r6, [r4, #16]
 800302a:	6165      	str	r5, [r4, #20]
 800302c:	443e      	add	r6, r7
 800302e:	1bed      	subs	r5, r5, r7
 8003030:	6026      	str	r6, [r4, #0]
 8003032:	60a5      	str	r5, [r4, #8]
 8003034:	464e      	mov	r6, r9
 8003036:	454e      	cmp	r6, r9
 8003038:	d900      	bls.n	800303c <__ssputs_r+0x84>
 800303a:	464e      	mov	r6, r9
 800303c:	4632      	mov	r2, r6
 800303e:	4641      	mov	r1, r8
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	f000 fa9e 	bl	8003582 <memmove>
 8003046:	68a3      	ldr	r3, [r4, #8]
 8003048:	1b9b      	subs	r3, r3, r6
 800304a:	60a3      	str	r3, [r4, #8]
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	441e      	add	r6, r3
 8003050:	6026      	str	r6, [r4, #0]
 8003052:	2000      	movs	r0, #0
 8003054:	e7dc      	b.n	8003010 <__ssputs_r+0x58>
 8003056:	462a      	mov	r2, r5
 8003058:	f000 fb54 	bl	8003704 <_realloc_r>
 800305c:	4606      	mov	r6, r0
 800305e:	2800      	cmp	r0, #0
 8003060:	d1e2      	bne.n	8003028 <__ssputs_r+0x70>
 8003062:	6921      	ldr	r1, [r4, #16]
 8003064:	4650      	mov	r0, sl
 8003066:	f000 faa5 	bl	80035b4 <_free_r>
 800306a:	e7c8      	b.n	8002ffe <__ssputs_r+0x46>

0800306c <_svfiprintf_r>:
 800306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003070:	461d      	mov	r5, r3
 8003072:	898b      	ldrh	r3, [r1, #12]
 8003074:	061f      	lsls	r7, r3, #24
 8003076:	b09d      	sub	sp, #116	; 0x74
 8003078:	4680      	mov	r8, r0
 800307a:	460c      	mov	r4, r1
 800307c:	4616      	mov	r6, r2
 800307e:	d50f      	bpl.n	80030a0 <_svfiprintf_r+0x34>
 8003080:	690b      	ldr	r3, [r1, #16]
 8003082:	b96b      	cbnz	r3, 80030a0 <_svfiprintf_r+0x34>
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	f000 fae3 	bl	8003650 <_malloc_r>
 800308a:	6020      	str	r0, [r4, #0]
 800308c:	6120      	str	r0, [r4, #16]
 800308e:	b928      	cbnz	r0, 800309c <_svfiprintf_r+0x30>
 8003090:	230c      	movs	r3, #12
 8003092:	f8c8 3000 	str.w	r3, [r8]
 8003096:	f04f 30ff 	mov.w	r0, #4294967295
 800309a:	e0c8      	b.n	800322e <_svfiprintf_r+0x1c2>
 800309c:	2340      	movs	r3, #64	; 0x40
 800309e:	6163      	str	r3, [r4, #20]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9309      	str	r3, [sp, #36]	; 0x24
 80030a4:	2320      	movs	r3, #32
 80030a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030aa:	2330      	movs	r3, #48	; 0x30
 80030ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030b0:	9503      	str	r5, [sp, #12]
 80030b2:	f04f 0b01 	mov.w	fp, #1
 80030b6:	4637      	mov	r7, r6
 80030b8:	463d      	mov	r5, r7
 80030ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030be:	b10b      	cbz	r3, 80030c4 <_svfiprintf_r+0x58>
 80030c0:	2b25      	cmp	r3, #37	; 0x25
 80030c2:	d13e      	bne.n	8003142 <_svfiprintf_r+0xd6>
 80030c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80030c8:	d00b      	beq.n	80030e2 <_svfiprintf_r+0x76>
 80030ca:	4653      	mov	r3, sl
 80030cc:	4632      	mov	r2, r6
 80030ce:	4621      	mov	r1, r4
 80030d0:	4640      	mov	r0, r8
 80030d2:	f7ff ff71 	bl	8002fb8 <__ssputs_r>
 80030d6:	3001      	adds	r0, #1
 80030d8:	f000 80a4 	beq.w	8003224 <_svfiprintf_r+0x1b8>
 80030dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030de:	4453      	add	r3, sl
 80030e0:	9309      	str	r3, [sp, #36]	; 0x24
 80030e2:	783b      	ldrb	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 809d 	beq.w	8003224 <_svfiprintf_r+0x1b8>
 80030ea:	2300      	movs	r3, #0
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030f4:	9304      	str	r3, [sp, #16]
 80030f6:	9307      	str	r3, [sp, #28]
 80030f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030fc:	931a      	str	r3, [sp, #104]	; 0x68
 80030fe:	462f      	mov	r7, r5
 8003100:	2205      	movs	r2, #5
 8003102:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003106:	4850      	ldr	r0, [pc, #320]	; (8003248 <_svfiprintf_r+0x1dc>)
 8003108:	f7fd f88a 	bl	8000220 <memchr>
 800310c:	9b04      	ldr	r3, [sp, #16]
 800310e:	b9d0      	cbnz	r0, 8003146 <_svfiprintf_r+0xda>
 8003110:	06d9      	lsls	r1, r3, #27
 8003112:	bf44      	itt	mi
 8003114:	2220      	movmi	r2, #32
 8003116:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800311a:	071a      	lsls	r2, r3, #28
 800311c:	bf44      	itt	mi
 800311e:	222b      	movmi	r2, #43	; 0x2b
 8003120:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003124:	782a      	ldrb	r2, [r5, #0]
 8003126:	2a2a      	cmp	r2, #42	; 0x2a
 8003128:	d015      	beq.n	8003156 <_svfiprintf_r+0xea>
 800312a:	9a07      	ldr	r2, [sp, #28]
 800312c:	462f      	mov	r7, r5
 800312e:	2000      	movs	r0, #0
 8003130:	250a      	movs	r5, #10
 8003132:	4639      	mov	r1, r7
 8003134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003138:	3b30      	subs	r3, #48	; 0x30
 800313a:	2b09      	cmp	r3, #9
 800313c:	d94d      	bls.n	80031da <_svfiprintf_r+0x16e>
 800313e:	b1b8      	cbz	r0, 8003170 <_svfiprintf_r+0x104>
 8003140:	e00f      	b.n	8003162 <_svfiprintf_r+0xf6>
 8003142:	462f      	mov	r7, r5
 8003144:	e7b8      	b.n	80030b8 <_svfiprintf_r+0x4c>
 8003146:	4a40      	ldr	r2, [pc, #256]	; (8003248 <_svfiprintf_r+0x1dc>)
 8003148:	1a80      	subs	r0, r0, r2
 800314a:	fa0b f000 	lsl.w	r0, fp, r0
 800314e:	4318      	orrs	r0, r3
 8003150:	9004      	str	r0, [sp, #16]
 8003152:	463d      	mov	r5, r7
 8003154:	e7d3      	b.n	80030fe <_svfiprintf_r+0x92>
 8003156:	9a03      	ldr	r2, [sp, #12]
 8003158:	1d11      	adds	r1, r2, #4
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	9103      	str	r1, [sp, #12]
 800315e:	2a00      	cmp	r2, #0
 8003160:	db01      	blt.n	8003166 <_svfiprintf_r+0xfa>
 8003162:	9207      	str	r2, [sp, #28]
 8003164:	e004      	b.n	8003170 <_svfiprintf_r+0x104>
 8003166:	4252      	negs	r2, r2
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	9207      	str	r2, [sp, #28]
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	783b      	ldrb	r3, [r7, #0]
 8003172:	2b2e      	cmp	r3, #46	; 0x2e
 8003174:	d10c      	bne.n	8003190 <_svfiprintf_r+0x124>
 8003176:	787b      	ldrb	r3, [r7, #1]
 8003178:	2b2a      	cmp	r3, #42	; 0x2a
 800317a:	d133      	bne.n	80031e4 <_svfiprintf_r+0x178>
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	1d1a      	adds	r2, r3, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	9203      	str	r2, [sp, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	bfb8      	it	lt
 8003188:	f04f 33ff 	movlt.w	r3, #4294967295
 800318c:	3702      	adds	r7, #2
 800318e:	9305      	str	r3, [sp, #20]
 8003190:	4d2e      	ldr	r5, [pc, #184]	; (800324c <_svfiprintf_r+0x1e0>)
 8003192:	7839      	ldrb	r1, [r7, #0]
 8003194:	2203      	movs	r2, #3
 8003196:	4628      	mov	r0, r5
 8003198:	f7fd f842 	bl	8000220 <memchr>
 800319c:	b138      	cbz	r0, 80031ae <_svfiprintf_r+0x142>
 800319e:	2340      	movs	r3, #64	; 0x40
 80031a0:	1b40      	subs	r0, r0, r5
 80031a2:	fa03 f000 	lsl.w	r0, r3, r0
 80031a6:	9b04      	ldr	r3, [sp, #16]
 80031a8:	4303      	orrs	r3, r0
 80031aa:	3701      	adds	r7, #1
 80031ac:	9304      	str	r3, [sp, #16]
 80031ae:	7839      	ldrb	r1, [r7, #0]
 80031b0:	4827      	ldr	r0, [pc, #156]	; (8003250 <_svfiprintf_r+0x1e4>)
 80031b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031b6:	2206      	movs	r2, #6
 80031b8:	1c7e      	adds	r6, r7, #1
 80031ba:	f7fd f831 	bl	8000220 <memchr>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d038      	beq.n	8003234 <_svfiprintf_r+0x1c8>
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <_svfiprintf_r+0x1e8>)
 80031c4:	bb13      	cbnz	r3, 800320c <_svfiprintf_r+0x1a0>
 80031c6:	9b03      	ldr	r3, [sp, #12]
 80031c8:	3307      	adds	r3, #7
 80031ca:	f023 0307 	bic.w	r3, r3, #7
 80031ce:	3308      	adds	r3, #8
 80031d0:	9303      	str	r3, [sp, #12]
 80031d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031d4:	444b      	add	r3, r9
 80031d6:	9309      	str	r3, [sp, #36]	; 0x24
 80031d8:	e76d      	b.n	80030b6 <_svfiprintf_r+0x4a>
 80031da:	fb05 3202 	mla	r2, r5, r2, r3
 80031de:	2001      	movs	r0, #1
 80031e0:	460f      	mov	r7, r1
 80031e2:	e7a6      	b.n	8003132 <_svfiprintf_r+0xc6>
 80031e4:	2300      	movs	r3, #0
 80031e6:	3701      	adds	r7, #1
 80031e8:	9305      	str	r3, [sp, #20]
 80031ea:	4619      	mov	r1, r3
 80031ec:	250a      	movs	r5, #10
 80031ee:	4638      	mov	r0, r7
 80031f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031f4:	3a30      	subs	r2, #48	; 0x30
 80031f6:	2a09      	cmp	r2, #9
 80031f8:	d903      	bls.n	8003202 <_svfiprintf_r+0x196>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0c8      	beq.n	8003190 <_svfiprintf_r+0x124>
 80031fe:	9105      	str	r1, [sp, #20]
 8003200:	e7c6      	b.n	8003190 <_svfiprintf_r+0x124>
 8003202:	fb05 2101 	mla	r1, r5, r1, r2
 8003206:	2301      	movs	r3, #1
 8003208:	4607      	mov	r7, r0
 800320a:	e7f0      	b.n	80031ee <_svfiprintf_r+0x182>
 800320c:	ab03      	add	r3, sp, #12
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4622      	mov	r2, r4
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <_svfiprintf_r+0x1ec>)
 8003214:	a904      	add	r1, sp, #16
 8003216:	4640      	mov	r0, r8
 8003218:	f3af 8000 	nop.w
 800321c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003220:	4681      	mov	r9, r0
 8003222:	d1d6      	bne.n	80031d2 <_svfiprintf_r+0x166>
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	065b      	lsls	r3, r3, #25
 8003228:	f53f af35 	bmi.w	8003096 <_svfiprintf_r+0x2a>
 800322c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800322e:	b01d      	add	sp, #116	; 0x74
 8003230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003234:	ab03      	add	r3, sp, #12
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4622      	mov	r2, r4
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <_svfiprintf_r+0x1ec>)
 800323c:	a904      	add	r1, sp, #16
 800323e:	4640      	mov	r0, r8
 8003240:	f000 f882 	bl	8003348 <_printf_i>
 8003244:	e7ea      	b.n	800321c <_svfiprintf_r+0x1b0>
 8003246:	bf00      	nop
 8003248:	080037e8 	.word	0x080037e8
 800324c:	080037ee 	.word	0x080037ee
 8003250:	080037f2 	.word	0x080037f2
 8003254:	00000000 	.word	0x00000000
 8003258:	08002fb9 	.word	0x08002fb9

0800325c <_printf_common>:
 800325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	4691      	mov	r9, r2
 8003262:	461f      	mov	r7, r3
 8003264:	688a      	ldr	r2, [r1, #8]
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800326c:	4293      	cmp	r3, r2
 800326e:	bfb8      	it	lt
 8003270:	4613      	movlt	r3, r2
 8003272:	f8c9 3000 	str.w	r3, [r9]
 8003276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800327a:	4606      	mov	r6, r0
 800327c:	460c      	mov	r4, r1
 800327e:	b112      	cbz	r2, 8003286 <_printf_common+0x2a>
 8003280:	3301      	adds	r3, #1
 8003282:	f8c9 3000 	str.w	r3, [r9]
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	0699      	lsls	r1, r3, #26
 800328a:	bf42      	ittt	mi
 800328c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003290:	3302      	addmi	r3, #2
 8003292:	f8c9 3000 	strmi.w	r3, [r9]
 8003296:	6825      	ldr	r5, [r4, #0]
 8003298:	f015 0506 	ands.w	r5, r5, #6
 800329c:	d107      	bne.n	80032ae <_printf_common+0x52>
 800329e:	f104 0a19 	add.w	sl, r4, #25
 80032a2:	68e3      	ldr	r3, [r4, #12]
 80032a4:	f8d9 2000 	ldr.w	r2, [r9]
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	42ab      	cmp	r3, r5
 80032ac:	dc28      	bgt.n	8003300 <_printf_common+0xa4>
 80032ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032b2:	6822      	ldr	r2, [r4, #0]
 80032b4:	3300      	adds	r3, #0
 80032b6:	bf18      	it	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	0692      	lsls	r2, r2, #26
 80032bc:	d42d      	bmi.n	800331a <_printf_common+0xbe>
 80032be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032c2:	4639      	mov	r1, r7
 80032c4:	4630      	mov	r0, r6
 80032c6:	47c0      	blx	r8
 80032c8:	3001      	adds	r0, #1
 80032ca:	d020      	beq.n	800330e <_printf_common+0xb2>
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	68e5      	ldr	r5, [r4, #12]
 80032d0:	f8d9 2000 	ldr.w	r2, [r9]
 80032d4:	f003 0306 	and.w	r3, r3, #6
 80032d8:	2b04      	cmp	r3, #4
 80032da:	bf08      	it	eq
 80032dc:	1aad      	subeq	r5, r5, r2
 80032de:	68a3      	ldr	r3, [r4, #8]
 80032e0:	6922      	ldr	r2, [r4, #16]
 80032e2:	bf0c      	ite	eq
 80032e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e8:	2500      	movne	r5, #0
 80032ea:	4293      	cmp	r3, r2
 80032ec:	bfc4      	itt	gt
 80032ee:	1a9b      	subgt	r3, r3, r2
 80032f0:	18ed      	addgt	r5, r5, r3
 80032f2:	f04f 0900 	mov.w	r9, #0
 80032f6:	341a      	adds	r4, #26
 80032f8:	454d      	cmp	r5, r9
 80032fa:	d11a      	bne.n	8003332 <_printf_common+0xd6>
 80032fc:	2000      	movs	r0, #0
 80032fe:	e008      	b.n	8003312 <_printf_common+0xb6>
 8003300:	2301      	movs	r3, #1
 8003302:	4652      	mov	r2, sl
 8003304:	4639      	mov	r1, r7
 8003306:	4630      	mov	r0, r6
 8003308:	47c0      	blx	r8
 800330a:	3001      	adds	r0, #1
 800330c:	d103      	bne.n	8003316 <_printf_common+0xba>
 800330e:	f04f 30ff 	mov.w	r0, #4294967295
 8003312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003316:	3501      	adds	r5, #1
 8003318:	e7c3      	b.n	80032a2 <_printf_common+0x46>
 800331a:	18e1      	adds	r1, r4, r3
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	2030      	movs	r0, #48	; 0x30
 8003320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003324:	4422      	add	r2, r4
 8003326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800332a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800332e:	3302      	adds	r3, #2
 8003330:	e7c5      	b.n	80032be <_printf_common+0x62>
 8003332:	2301      	movs	r3, #1
 8003334:	4622      	mov	r2, r4
 8003336:	4639      	mov	r1, r7
 8003338:	4630      	mov	r0, r6
 800333a:	47c0      	blx	r8
 800333c:	3001      	adds	r0, #1
 800333e:	d0e6      	beq.n	800330e <_printf_common+0xb2>
 8003340:	f109 0901 	add.w	r9, r9, #1
 8003344:	e7d8      	b.n	80032f8 <_printf_common+0x9c>
	...

08003348 <_printf_i>:
 8003348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800334c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003350:	460c      	mov	r4, r1
 8003352:	7e09      	ldrb	r1, [r1, #24]
 8003354:	b085      	sub	sp, #20
 8003356:	296e      	cmp	r1, #110	; 0x6e
 8003358:	4617      	mov	r7, r2
 800335a:	4606      	mov	r6, r0
 800335c:	4698      	mov	r8, r3
 800335e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003360:	f000 80b3 	beq.w	80034ca <_printf_i+0x182>
 8003364:	d822      	bhi.n	80033ac <_printf_i+0x64>
 8003366:	2963      	cmp	r1, #99	; 0x63
 8003368:	d036      	beq.n	80033d8 <_printf_i+0x90>
 800336a:	d80a      	bhi.n	8003382 <_printf_i+0x3a>
 800336c:	2900      	cmp	r1, #0
 800336e:	f000 80b9 	beq.w	80034e4 <_printf_i+0x19c>
 8003372:	2958      	cmp	r1, #88	; 0x58
 8003374:	f000 8083 	beq.w	800347e <_printf_i+0x136>
 8003378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800337c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003380:	e032      	b.n	80033e8 <_printf_i+0xa0>
 8003382:	2964      	cmp	r1, #100	; 0x64
 8003384:	d001      	beq.n	800338a <_printf_i+0x42>
 8003386:	2969      	cmp	r1, #105	; 0x69
 8003388:	d1f6      	bne.n	8003378 <_printf_i+0x30>
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	6813      	ldr	r3, [r2, #0]
 800338e:	0605      	lsls	r5, r0, #24
 8003390:	f103 0104 	add.w	r1, r3, #4
 8003394:	d52a      	bpl.n	80033ec <_printf_i+0xa4>
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	da03      	bge.n	80033a6 <_printf_i+0x5e>
 800339e:	222d      	movs	r2, #45	; 0x2d
 80033a0:	425b      	negs	r3, r3
 80033a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033a6:	486f      	ldr	r0, [pc, #444]	; (8003564 <_printf_i+0x21c>)
 80033a8:	220a      	movs	r2, #10
 80033aa:	e039      	b.n	8003420 <_printf_i+0xd8>
 80033ac:	2973      	cmp	r1, #115	; 0x73
 80033ae:	f000 809d 	beq.w	80034ec <_printf_i+0x1a4>
 80033b2:	d808      	bhi.n	80033c6 <_printf_i+0x7e>
 80033b4:	296f      	cmp	r1, #111	; 0x6f
 80033b6:	d020      	beq.n	80033fa <_printf_i+0xb2>
 80033b8:	2970      	cmp	r1, #112	; 0x70
 80033ba:	d1dd      	bne.n	8003378 <_printf_i+0x30>
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	f043 0320 	orr.w	r3, r3, #32
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	e003      	b.n	80033ce <_printf_i+0x86>
 80033c6:	2975      	cmp	r1, #117	; 0x75
 80033c8:	d017      	beq.n	80033fa <_printf_i+0xb2>
 80033ca:	2978      	cmp	r1, #120	; 0x78
 80033cc:	d1d4      	bne.n	8003378 <_printf_i+0x30>
 80033ce:	2378      	movs	r3, #120	; 0x78
 80033d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033d4:	4864      	ldr	r0, [pc, #400]	; (8003568 <_printf_i+0x220>)
 80033d6:	e055      	b.n	8003484 <_printf_i+0x13c>
 80033d8:	6813      	ldr	r3, [r2, #0]
 80033da:	1d19      	adds	r1, r3, #4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6011      	str	r1, [r2, #0]
 80033e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e8:	2301      	movs	r3, #1
 80033ea:	e08c      	b.n	8003506 <_printf_i+0x1be>
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6011      	str	r1, [r2, #0]
 80033f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033f4:	bf18      	it	ne
 80033f6:	b21b      	sxthne	r3, r3
 80033f8:	e7cf      	b.n	800339a <_printf_i+0x52>
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	6825      	ldr	r5, [r4, #0]
 80033fe:	1d18      	adds	r0, r3, #4
 8003400:	6010      	str	r0, [r2, #0]
 8003402:	0628      	lsls	r0, r5, #24
 8003404:	d501      	bpl.n	800340a <_printf_i+0xc2>
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	e002      	b.n	8003410 <_printf_i+0xc8>
 800340a:	0668      	lsls	r0, r5, #25
 800340c:	d5fb      	bpl.n	8003406 <_printf_i+0xbe>
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	4854      	ldr	r0, [pc, #336]	; (8003564 <_printf_i+0x21c>)
 8003412:	296f      	cmp	r1, #111	; 0x6f
 8003414:	bf14      	ite	ne
 8003416:	220a      	movne	r2, #10
 8003418:	2208      	moveq	r2, #8
 800341a:	2100      	movs	r1, #0
 800341c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003420:	6865      	ldr	r5, [r4, #4]
 8003422:	60a5      	str	r5, [r4, #8]
 8003424:	2d00      	cmp	r5, #0
 8003426:	f2c0 8095 	blt.w	8003554 <_printf_i+0x20c>
 800342a:	6821      	ldr	r1, [r4, #0]
 800342c:	f021 0104 	bic.w	r1, r1, #4
 8003430:	6021      	str	r1, [r4, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d13d      	bne.n	80034b2 <_printf_i+0x16a>
 8003436:	2d00      	cmp	r5, #0
 8003438:	f040 808e 	bne.w	8003558 <_printf_i+0x210>
 800343c:	4665      	mov	r5, ip
 800343e:	2a08      	cmp	r2, #8
 8003440:	d10b      	bne.n	800345a <_printf_i+0x112>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	07db      	lsls	r3, r3, #31
 8003446:	d508      	bpl.n	800345a <_printf_i+0x112>
 8003448:	6923      	ldr	r3, [r4, #16]
 800344a:	6862      	ldr	r2, [r4, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	bfde      	ittt	le
 8003450:	2330      	movle	r3, #48	; 0x30
 8003452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003456:	f105 35ff 	addle.w	r5, r5, #4294967295
 800345a:	ebac 0305 	sub.w	r3, ip, r5
 800345e:	6123      	str	r3, [r4, #16]
 8003460:	f8cd 8000 	str.w	r8, [sp]
 8003464:	463b      	mov	r3, r7
 8003466:	aa03      	add	r2, sp, #12
 8003468:	4621      	mov	r1, r4
 800346a:	4630      	mov	r0, r6
 800346c:	f7ff fef6 	bl	800325c <_printf_common>
 8003470:	3001      	adds	r0, #1
 8003472:	d14d      	bne.n	8003510 <_printf_i+0x1c8>
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	b005      	add	sp, #20
 800347a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800347e:	4839      	ldr	r0, [pc, #228]	; (8003564 <_printf_i+0x21c>)
 8003480:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	6821      	ldr	r1, [r4, #0]
 8003488:	1d1d      	adds	r5, r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6015      	str	r5, [r2, #0]
 800348e:	060a      	lsls	r2, r1, #24
 8003490:	d50b      	bpl.n	80034aa <_printf_i+0x162>
 8003492:	07ca      	lsls	r2, r1, #31
 8003494:	bf44      	itt	mi
 8003496:	f041 0120 	orrmi.w	r1, r1, #32
 800349a:	6021      	strmi	r1, [r4, #0]
 800349c:	b91b      	cbnz	r3, 80034a6 <_printf_i+0x15e>
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	f022 0220 	bic.w	r2, r2, #32
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	2210      	movs	r2, #16
 80034a8:	e7b7      	b.n	800341a <_printf_i+0xd2>
 80034aa:	064d      	lsls	r5, r1, #25
 80034ac:	bf48      	it	mi
 80034ae:	b29b      	uxthmi	r3, r3
 80034b0:	e7ef      	b.n	8003492 <_printf_i+0x14a>
 80034b2:	4665      	mov	r5, ip
 80034b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80034b8:	fb02 3311 	mls	r3, r2, r1, r3
 80034bc:	5cc3      	ldrb	r3, [r0, r3]
 80034be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034c2:	460b      	mov	r3, r1
 80034c4:	2900      	cmp	r1, #0
 80034c6:	d1f5      	bne.n	80034b4 <_printf_i+0x16c>
 80034c8:	e7b9      	b.n	800343e <_printf_i+0xf6>
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	6825      	ldr	r5, [r4, #0]
 80034ce:	6961      	ldr	r1, [r4, #20]
 80034d0:	1d18      	adds	r0, r3, #4
 80034d2:	6010      	str	r0, [r2, #0]
 80034d4:	0628      	lsls	r0, r5, #24
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	d501      	bpl.n	80034de <_printf_i+0x196>
 80034da:	6019      	str	r1, [r3, #0]
 80034dc:	e002      	b.n	80034e4 <_printf_i+0x19c>
 80034de:	066a      	lsls	r2, r5, #25
 80034e0:	d5fb      	bpl.n	80034da <_printf_i+0x192>
 80034e2:	8019      	strh	r1, [r3, #0]
 80034e4:	2300      	movs	r3, #0
 80034e6:	6123      	str	r3, [r4, #16]
 80034e8:	4665      	mov	r5, ip
 80034ea:	e7b9      	b.n	8003460 <_printf_i+0x118>
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	1d19      	adds	r1, r3, #4
 80034f0:	6011      	str	r1, [r2, #0]
 80034f2:	681d      	ldr	r5, [r3, #0]
 80034f4:	6862      	ldr	r2, [r4, #4]
 80034f6:	2100      	movs	r1, #0
 80034f8:	4628      	mov	r0, r5
 80034fa:	f7fc fe91 	bl	8000220 <memchr>
 80034fe:	b108      	cbz	r0, 8003504 <_printf_i+0x1bc>
 8003500:	1b40      	subs	r0, r0, r5
 8003502:	6060      	str	r0, [r4, #4]
 8003504:	6863      	ldr	r3, [r4, #4]
 8003506:	6123      	str	r3, [r4, #16]
 8003508:	2300      	movs	r3, #0
 800350a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800350e:	e7a7      	b.n	8003460 <_printf_i+0x118>
 8003510:	6923      	ldr	r3, [r4, #16]
 8003512:	462a      	mov	r2, r5
 8003514:	4639      	mov	r1, r7
 8003516:	4630      	mov	r0, r6
 8003518:	47c0      	blx	r8
 800351a:	3001      	adds	r0, #1
 800351c:	d0aa      	beq.n	8003474 <_printf_i+0x12c>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	079b      	lsls	r3, r3, #30
 8003522:	d413      	bmi.n	800354c <_printf_i+0x204>
 8003524:	68e0      	ldr	r0, [r4, #12]
 8003526:	9b03      	ldr	r3, [sp, #12]
 8003528:	4298      	cmp	r0, r3
 800352a:	bfb8      	it	lt
 800352c:	4618      	movlt	r0, r3
 800352e:	e7a3      	b.n	8003478 <_printf_i+0x130>
 8003530:	2301      	movs	r3, #1
 8003532:	464a      	mov	r2, r9
 8003534:	4639      	mov	r1, r7
 8003536:	4630      	mov	r0, r6
 8003538:	47c0      	blx	r8
 800353a:	3001      	adds	r0, #1
 800353c:	d09a      	beq.n	8003474 <_printf_i+0x12c>
 800353e:	3501      	adds	r5, #1
 8003540:	68e3      	ldr	r3, [r4, #12]
 8003542:	9a03      	ldr	r2, [sp, #12]
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	42ab      	cmp	r3, r5
 8003548:	dcf2      	bgt.n	8003530 <_printf_i+0x1e8>
 800354a:	e7eb      	b.n	8003524 <_printf_i+0x1dc>
 800354c:	2500      	movs	r5, #0
 800354e:	f104 0919 	add.w	r9, r4, #25
 8003552:	e7f5      	b.n	8003540 <_printf_i+0x1f8>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ac      	bne.n	80034b2 <_printf_i+0x16a>
 8003558:	7803      	ldrb	r3, [r0, #0]
 800355a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800355e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003562:	e76c      	b.n	800343e <_printf_i+0xf6>
 8003564:	080037f9 	.word	0x080037f9
 8003568:	0800380a 	.word	0x0800380a

0800356c <memcpy>:
 800356c:	b510      	push	{r4, lr}
 800356e:	1e43      	subs	r3, r0, #1
 8003570:	440a      	add	r2, r1
 8003572:	4291      	cmp	r1, r2
 8003574:	d100      	bne.n	8003578 <memcpy+0xc>
 8003576:	bd10      	pop	{r4, pc}
 8003578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800357c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003580:	e7f7      	b.n	8003572 <memcpy+0x6>

08003582 <memmove>:
 8003582:	4288      	cmp	r0, r1
 8003584:	b510      	push	{r4, lr}
 8003586:	eb01 0302 	add.w	r3, r1, r2
 800358a:	d807      	bhi.n	800359c <memmove+0x1a>
 800358c:	1e42      	subs	r2, r0, #1
 800358e:	4299      	cmp	r1, r3
 8003590:	d00a      	beq.n	80035a8 <memmove+0x26>
 8003592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003596:	f802 4f01 	strb.w	r4, [r2, #1]!
 800359a:	e7f8      	b.n	800358e <memmove+0xc>
 800359c:	4283      	cmp	r3, r0
 800359e:	d9f5      	bls.n	800358c <memmove+0xa>
 80035a0:	1881      	adds	r1, r0, r2
 80035a2:	1ad2      	subs	r2, r2, r3
 80035a4:	42d3      	cmn	r3, r2
 80035a6:	d100      	bne.n	80035aa <memmove+0x28>
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80035b2:	e7f7      	b.n	80035a4 <memmove+0x22>

080035b4 <_free_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4605      	mov	r5, r0
 80035b8:	2900      	cmp	r1, #0
 80035ba:	d045      	beq.n	8003648 <_free_r+0x94>
 80035bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c0:	1f0c      	subs	r4, r1, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bfb8      	it	lt
 80035c6:	18e4      	addlt	r4, r4, r3
 80035c8:	f000 f8d2 	bl	8003770 <__malloc_lock>
 80035cc:	4a1f      	ldr	r2, [pc, #124]	; (800364c <_free_r+0x98>)
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	4610      	mov	r0, r2
 80035d2:	b933      	cbnz	r3, 80035e2 <_free_r+0x2e>
 80035d4:	6063      	str	r3, [r4, #4]
 80035d6:	6014      	str	r4, [r2, #0]
 80035d8:	4628      	mov	r0, r5
 80035da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035de:	f000 b8c8 	b.w	8003772 <__malloc_unlock>
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	d90c      	bls.n	8003600 <_free_r+0x4c>
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	1862      	adds	r2, r4, r1
 80035ea:	4293      	cmp	r3, r2
 80035ec:	bf04      	itt	eq
 80035ee:	681a      	ldreq	r2, [r3, #0]
 80035f0:	685b      	ldreq	r3, [r3, #4]
 80035f2:	6063      	str	r3, [r4, #4]
 80035f4:	bf04      	itt	eq
 80035f6:	1852      	addeq	r2, r2, r1
 80035f8:	6022      	streq	r2, [r4, #0]
 80035fa:	6004      	str	r4, [r0, #0]
 80035fc:	e7ec      	b.n	80035d8 <_free_r+0x24>
 80035fe:	4613      	mov	r3, r2
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	b10a      	cbz	r2, 8003608 <_free_r+0x54>
 8003604:	42a2      	cmp	r2, r4
 8003606:	d9fa      	bls.n	80035fe <_free_r+0x4a>
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	1858      	adds	r0, r3, r1
 800360c:	42a0      	cmp	r0, r4
 800360e:	d10b      	bne.n	8003628 <_free_r+0x74>
 8003610:	6820      	ldr	r0, [r4, #0]
 8003612:	4401      	add	r1, r0
 8003614:	1858      	adds	r0, r3, r1
 8003616:	4282      	cmp	r2, r0
 8003618:	6019      	str	r1, [r3, #0]
 800361a:	d1dd      	bne.n	80035d8 <_free_r+0x24>
 800361c:	6810      	ldr	r0, [r2, #0]
 800361e:	6852      	ldr	r2, [r2, #4]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	4401      	add	r1, r0
 8003624:	6019      	str	r1, [r3, #0]
 8003626:	e7d7      	b.n	80035d8 <_free_r+0x24>
 8003628:	d902      	bls.n	8003630 <_free_r+0x7c>
 800362a:	230c      	movs	r3, #12
 800362c:	602b      	str	r3, [r5, #0]
 800362e:	e7d3      	b.n	80035d8 <_free_r+0x24>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	1821      	adds	r1, r4, r0
 8003634:	428a      	cmp	r2, r1
 8003636:	bf04      	itt	eq
 8003638:	6811      	ldreq	r1, [r2, #0]
 800363a:	6852      	ldreq	r2, [r2, #4]
 800363c:	6062      	str	r2, [r4, #4]
 800363e:	bf04      	itt	eq
 8003640:	1809      	addeq	r1, r1, r0
 8003642:	6021      	streq	r1, [r4, #0]
 8003644:	605c      	str	r4, [r3, #4]
 8003646:	e7c7      	b.n	80035d8 <_free_r+0x24>
 8003648:	bd38      	pop	{r3, r4, r5, pc}
 800364a:	bf00      	nop
 800364c:	20000098 	.word	0x20000098

08003650 <_malloc_r>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	1ccd      	adds	r5, r1, #3
 8003654:	f025 0503 	bic.w	r5, r5, #3
 8003658:	3508      	adds	r5, #8
 800365a:	2d0c      	cmp	r5, #12
 800365c:	bf38      	it	cc
 800365e:	250c      	movcc	r5, #12
 8003660:	2d00      	cmp	r5, #0
 8003662:	4606      	mov	r6, r0
 8003664:	db01      	blt.n	800366a <_malloc_r+0x1a>
 8003666:	42a9      	cmp	r1, r5
 8003668:	d903      	bls.n	8003672 <_malloc_r+0x22>
 800366a:	230c      	movs	r3, #12
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	2000      	movs	r0, #0
 8003670:	bd70      	pop	{r4, r5, r6, pc}
 8003672:	f000 f87d 	bl	8003770 <__malloc_lock>
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <_malloc_r+0xac>)
 8003678:	6814      	ldr	r4, [r2, #0]
 800367a:	4621      	mov	r1, r4
 800367c:	b991      	cbnz	r1, 80036a4 <_malloc_r+0x54>
 800367e:	4c20      	ldr	r4, [pc, #128]	; (8003700 <_malloc_r+0xb0>)
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	b91b      	cbnz	r3, 800368c <_malloc_r+0x3c>
 8003684:	4630      	mov	r0, r6
 8003686:	f000 f863 	bl	8003750 <_sbrk_r>
 800368a:	6020      	str	r0, [r4, #0]
 800368c:	4629      	mov	r1, r5
 800368e:	4630      	mov	r0, r6
 8003690:	f000 f85e 	bl	8003750 <_sbrk_r>
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d124      	bne.n	80036e2 <_malloc_r+0x92>
 8003698:	230c      	movs	r3, #12
 800369a:	6033      	str	r3, [r6, #0]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f868 	bl	8003772 <__malloc_unlock>
 80036a2:	e7e4      	b.n	800366e <_malloc_r+0x1e>
 80036a4:	680b      	ldr	r3, [r1, #0]
 80036a6:	1b5b      	subs	r3, r3, r5
 80036a8:	d418      	bmi.n	80036dc <_malloc_r+0x8c>
 80036aa:	2b0b      	cmp	r3, #11
 80036ac:	d90f      	bls.n	80036ce <_malloc_r+0x7e>
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	50cd      	str	r5, [r1, r3]
 80036b2:	18cc      	adds	r4, r1, r3
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f85c 	bl	8003772 <__malloc_unlock>
 80036ba:	f104 000b 	add.w	r0, r4, #11
 80036be:	1d23      	adds	r3, r4, #4
 80036c0:	f020 0007 	bic.w	r0, r0, #7
 80036c4:	1ac3      	subs	r3, r0, r3
 80036c6:	d0d3      	beq.n	8003670 <_malloc_r+0x20>
 80036c8:	425a      	negs	r2, r3
 80036ca:	50e2      	str	r2, [r4, r3]
 80036cc:	e7d0      	b.n	8003670 <_malloc_r+0x20>
 80036ce:	428c      	cmp	r4, r1
 80036d0:	684b      	ldr	r3, [r1, #4]
 80036d2:	bf16      	itet	ne
 80036d4:	6063      	strne	r3, [r4, #4]
 80036d6:	6013      	streq	r3, [r2, #0]
 80036d8:	460c      	movne	r4, r1
 80036da:	e7eb      	b.n	80036b4 <_malloc_r+0x64>
 80036dc:	460c      	mov	r4, r1
 80036de:	6849      	ldr	r1, [r1, #4]
 80036e0:	e7cc      	b.n	800367c <_malloc_r+0x2c>
 80036e2:	1cc4      	adds	r4, r0, #3
 80036e4:	f024 0403 	bic.w	r4, r4, #3
 80036e8:	42a0      	cmp	r0, r4
 80036ea:	d005      	beq.n	80036f8 <_malloc_r+0xa8>
 80036ec:	1a21      	subs	r1, r4, r0
 80036ee:	4630      	mov	r0, r6
 80036f0:	f000 f82e 	bl	8003750 <_sbrk_r>
 80036f4:	3001      	adds	r0, #1
 80036f6:	d0cf      	beq.n	8003698 <_malloc_r+0x48>
 80036f8:	6025      	str	r5, [r4, #0]
 80036fa:	e7db      	b.n	80036b4 <_malloc_r+0x64>
 80036fc:	20000098 	.word	0x20000098
 8003700:	2000009c 	.word	0x2000009c

08003704 <_realloc_r>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	4607      	mov	r7, r0
 8003708:	4614      	mov	r4, r2
 800370a:	460e      	mov	r6, r1
 800370c:	b921      	cbnz	r1, 8003718 <_realloc_r+0x14>
 800370e:	4611      	mov	r1, r2
 8003710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003714:	f7ff bf9c 	b.w	8003650 <_malloc_r>
 8003718:	b922      	cbnz	r2, 8003724 <_realloc_r+0x20>
 800371a:	f7ff ff4b 	bl	80035b4 <_free_r>
 800371e:	4625      	mov	r5, r4
 8003720:	4628      	mov	r0, r5
 8003722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003724:	f000 f826 	bl	8003774 <_malloc_usable_size_r>
 8003728:	42a0      	cmp	r0, r4
 800372a:	d20f      	bcs.n	800374c <_realloc_r+0x48>
 800372c:	4621      	mov	r1, r4
 800372e:	4638      	mov	r0, r7
 8003730:	f7ff ff8e 	bl	8003650 <_malloc_r>
 8003734:	4605      	mov	r5, r0
 8003736:	2800      	cmp	r0, #0
 8003738:	d0f2      	beq.n	8003720 <_realloc_r+0x1c>
 800373a:	4631      	mov	r1, r6
 800373c:	4622      	mov	r2, r4
 800373e:	f7ff ff15 	bl	800356c <memcpy>
 8003742:	4631      	mov	r1, r6
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ff35 	bl	80035b4 <_free_r>
 800374a:	e7e9      	b.n	8003720 <_realloc_r+0x1c>
 800374c:	4635      	mov	r5, r6
 800374e:	e7e7      	b.n	8003720 <_realloc_r+0x1c>

08003750 <_sbrk_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4c06      	ldr	r4, [pc, #24]	; (800376c <_sbrk_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4605      	mov	r5, r0
 8003758:	4608      	mov	r0, r1
 800375a:	6023      	str	r3, [r4, #0]
 800375c:	f7fd fa10 	bl	8000b80 <_sbrk>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_sbrk_r+0x1a>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	b103      	cbz	r3, 800376a <_sbrk_r+0x1a>
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	200001a0 	.word	0x200001a0

08003770 <__malloc_lock>:
 8003770:	4770      	bx	lr

08003772 <__malloc_unlock>:
 8003772:	4770      	bx	lr

08003774 <_malloc_usable_size_r>:
 8003774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003778:	1f18      	subs	r0, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	bfbc      	itt	lt
 800377e:	580b      	ldrlt	r3, [r1, r0]
 8003780:	18c0      	addlt	r0, r0, r3
 8003782:	4770      	bx	lr

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
