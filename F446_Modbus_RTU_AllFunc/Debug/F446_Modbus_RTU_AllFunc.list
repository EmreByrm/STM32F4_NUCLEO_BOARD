
F446_Modbus_RTU_AllFunc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b5c  08003b5c  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b64  08003b64  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08003b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000404  08003f70  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  08003f70  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c003  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c76  00000000  00000000  0002c437  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021136  00000000  00000000  0002f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009770  00000000  00000000  00050ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb979  00000000  00000000  0005a246  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125bbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  00125c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000404 	.word	0x20000404
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003b2c 	.word	0x08003b2c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000408 	.word	0x20000408
 8000200:	08003b2c 	.word	0x08003b2c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <CRC16>:
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
} ;

unsigned short CRC16 (volatile unsigned char *puchMsg, unsigned short usDataLen ) /* The function returns the CRC as a unsigned short type   */
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	807b      	strh	r3, [r7, #2]
//*puchMsg =  /* message to calculate CRC upon */
//usDataLen =  /* quantity of bytes in message  */

    unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized  */
 8000510:	23ff      	movs	r3, #255	; 0xff
 8000512:	73fb      	strb	r3, [r7, #15]
    unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized  */
 8000514:	23ff      	movs	r3, #255	; 0xff
 8000516:	73bb      	strb	r3, [r7, #14]
    unsigned uIndex ; /* will index into CRC lookup table  */
    while (usDataLen--) /* pass through message buffer  */
 8000518:	e014      	b.n	8000544 <CRC16+0x40>
    {
        uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC  */
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	607a      	str	r2, [r7, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2da      	uxtb	r2, r3
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	4053      	eors	r3, r2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	60bb      	str	r3, [r7, #8]
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <CRC16+0x68>)
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4413      	add	r3, r2
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	4053      	eors	r3, r2
 8000538:	73bb      	strb	r3, [r7, #14]
        uchCRCHi = auchCRCLo[uIndex] ;
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <CRC16+0x6c>)
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	4413      	add	r3, r2
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	73fb      	strb	r3, [r7, #15]
    while (usDataLen--) /* pass through message buffer  */
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	807a      	strh	r2, [r7, #2]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1e5      	bne.n	800051a <CRC16+0x16>
    }
    return (uchCRCHi << 8 | uchCRCLo) ;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	b21a      	sxth	r2, r3
 8000554:	7bbb      	ldrb	r3, [r7, #14]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21b      	sxth	r3, r3
 800055c:	b29b      	uxth	r3, r3
}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	20000100 	.word	0x20000100

08000574 <MB_Init>:
#include "main.h"

unsigned int CharCount;

void MB_Init()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	MY_SLAVE_ID=17u;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MB_Init+0x2c>)
 800057a:	2211      	movs	r2, #17
 800057c:	701a      	strb	r2, [r3, #0]
	//CLEAR ALL COUNTERS
	ClearModbusCounters();
 800057e:	f000 fdf1 	bl	8001164 <ClearModbusCounters>
	//GET SIZE OF ARRAYS
	HoldingRegSize = (sizeof(HoldingRegisters)/sizeof(HoldingRegisters[0]));
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MB_Init+0x30>)
 8000584:	2264      	movs	r2, #100	; 0x64
 8000586:	601a      	str	r2, [r3, #0]
	InputRegSize = (sizeof(InputRegisters)/sizeof(InputRegisters[0]));
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MB_Init+0x34>)
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	601a      	str	r2, [r3, #0]
	CoilsRegsize=(sizeof(Coils)/sizeof(Coils[0]));
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MB_Init+0x38>)
 8000590:	2232      	movs	r2, #50	; 0x32
 8000592:	601a      	str	r2, [r3, #0]
	DiscreteInputRegsize = (sizeof(DiscreteInputs)/sizeof(DiscreteInputs[0]));
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MB_Init+0x3c>)
 8000596:	2232      	movs	r2, #50	; 0x32
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200006d4 	.word	0x200006d4
 80005a4:	20000430 	.word	0x20000430
 80005a8:	200006e4 	.word	0x200006e4
 80005ac:	200006f0 	.word	0x200006f0
 80005b0:	20000420 	.word	0x20000420

080005b4 <CheckMBPDU>:

//Starting Modbus function to check the PDU received
void CheckMBPDU()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	CharCount=0;
 80005ba:	4b75      	ldr	r3, [pc, #468]	; (8000790 <CheckMBPDU+0x1dc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
	CharCount = TotalCharsReceived;
 80005c0:	4b74      	ldr	r3, [pc, #464]	; (8000794 <CheckMBPDU+0x1e0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a72      	ldr	r2, [pc, #456]	; (8000790 <CheckMBPDU+0x1dc>)
 80005c6:	6013      	str	r3, [r2, #0]
	TotalCharsReceived=0;
 80005c8:	4b72      	ldr	r3, [pc, #456]	; (8000794 <CheckMBPDU+0x1e0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
	if(CharCount>=4u)
 80005ce:	4b70      	ldr	r3, [pc, #448]	; (8000790 <CheckMBPDU+0x1dc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	f240 80d0 	bls.w	8000778 <CheckMBPDU+0x1c4>
	{
		//Check inbound frame CRC
		unsigned int crcvalue=CRC16(data_in,(CharCount-2));
 80005d8:	4b6d      	ldr	r3, [pc, #436]	; (8000790 <CheckMBPDU+0x1dc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	3b02      	subs	r3, #2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	486c      	ldr	r0, [pc, #432]	; (8000798 <CheckMBPDU+0x1e4>)
 80005e6:	f7ff ff8d 	bl	8000504 <CRC16>
 80005ea:	4603      	mov	r3, r0
 80005ec:	607b      	str	r3, [r7, #4]

		if((data_in[CharCount-2] ==(unsigned char)(crcvalue)) &					//lower byte at higher register
 80005ee:	4b68      	ldr	r3, [pc, #416]	; (8000790 <CheckMBPDU+0x1dc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3b02      	subs	r3, #2
 80005f4:	4a68      	ldr	r2, [pc, #416]	; (8000798 <CheckMBPDU+0x1e4>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	429a      	cmp	r2, r3
 8000600:	bf0c      	ite	eq
 8000602:	2301      	moveq	r3, #1
 8000604:	2300      	movne	r3, #0
 8000606:	b2da      	uxtb	r2, r3
					(data_in[CharCount-1] ==(unsigned char)(crcvalue>>8)))		//higher byte at lower register
 8000608:	4b61      	ldr	r3, [pc, #388]	; (8000790 <CheckMBPDU+0x1dc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	4962      	ldr	r1, [pc, #392]	; (8000798 <CheckMBPDU+0x1e4>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	b2d9      	uxtb	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b2db      	uxtb	r3, r3
		if((data_in[CharCount-2] ==(unsigned char)(crcvalue)) &					//lower byte at higher register
 800061a:	4299      	cmp	r1, r3
 800061c:	bf0c      	ite	eq
 800061e:	2301      	moveq	r3, #1
 8000620:	2300      	movne	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4013      	ands	r3, r2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	f000 809f 	beq.w	800076c <CheckMBPDU+0x1b8>
		{
			BusMsgCount+=1;	//increment bus message counter
 800062e:	4b5b      	ldr	r3, [pc, #364]	; (800079c <CheckMBPDU+0x1e8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a59      	ldr	r2, [pc, #356]	; (800079c <CheckMBPDU+0x1e8>)
 8000636:	6013      	str	r3, [r2, #0]
			if((data_in[0]==MY_SLAVE_ID) | (data_in[0]==0u))
 8000638:	4b57      	ldr	r3, [pc, #348]	; (8000798 <CheckMBPDU+0x1e4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b58      	ldr	r3, [pc, #352]	; (80007a0 <CheckMBPDU+0x1ec>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	bf0c      	ite	eq
 8000646:	2301      	moveq	r3, #1
 8000648:	2300      	movne	r3, #0
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b52      	ldr	r3, [pc, #328]	; (8000798 <CheckMBPDU+0x1e4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf0c      	ite	eq
 8000656:	2301      	moveq	r3, #1
 8000658:	2300      	movne	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 808f 	beq.w	8000784 <CheckMBPDU+0x1d0>
			{
				SlaveMsgCount+=1; //Increment Slave message count
 8000666:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <CheckMBPDU+0x1f0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a4d      	ldr	r2, [pc, #308]	; (80007a4 <CheckMBPDU+0x1f0>)
 800066e:	6013      	str	r3, [r2, #0]
				//STEP 2: Check function code
				SlaveNoRspCount+=data_in[0]==0?1:0;
 8000670:	4b49      	ldr	r3, [pc, #292]	; (8000798 <CheckMBPDU+0x1e4>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf0c      	ite	eq
 800067a:	2301      	moveq	r3, #1
 800067c:	2300      	movne	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	4b49      	ldr	r3, [pc, #292]	; (80007a8 <CheckMBPDU+0x1f4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a47      	ldr	r2, [pc, #284]	; (80007a8 <CheckMBPDU+0x1f4>)
 800068a:	6013      	str	r3, [r2, #0]
				switch(data_in[1])
 800068c:	4b42      	ldr	r3, [pc, #264]	; (8000798 <CheckMBPDU+0x1e4>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	3b01      	subs	r3, #1
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d85e      	bhi.n	8000756 <CheckMBPDU+0x1a2>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <CheckMBPDU+0xec>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	080006e1 	.word	0x080006e1
 80006a4:	080006ef 	.word	0x080006ef
 80006a8:	080006fd 	.word	0x080006fd
 80006ac:	0800070b 	.word	0x0800070b
 80006b0:	08000719 	.word	0x08000719
 80006b4:	08000727 	.word	0x08000727
 80006b8:	08000757 	.word	0x08000757
 80006bc:	08000735 	.word	0x08000735
 80006c0:	08000757 	.word	0x08000757
 80006c4:	08000757 	.word	0x08000757
 80006c8:	08000757 	.word	0x08000757
 80006cc:	08000757 	.word	0x08000757
 80006d0:	08000757 	.word	0x08000757
 80006d4:	08000757 	.word	0x08000757
 80006d8:	0800073b 	.word	0x0800073b
 80006dc:	08000749 	.word	0x08000749
				{
					case 0x01: MBProcessBitsRead(Coils,CoilsRegsize);//read coils
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <CheckMBPDU+0x1f8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	4832      	ldr	r0, [pc, #200]	; (80007b0 <CheckMBPDU+0x1fc>)
 80006e8:	f000 fa62 	bl	8000bb0 <MBProcessBitsRead>
					break;
 80006ec:	e04b      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x02: MBProcessBitsRead(DiscreteInputs,DiscreteInputRegsize);	//read discrete inputs
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <CheckMBPDU+0x200>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4830      	ldr	r0, [pc, #192]	; (80007b8 <CheckMBPDU+0x204>)
 80006f6:	f000 fa5b 	bl	8000bb0 <MBProcessBitsRead>
					break;
 80006fa:	e044      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x03: MBProcessRegisterRead(HoldingRegisters,HoldingRegSize);//read holding register
 80006fc:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <CheckMBPDU+0x208>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	482f      	ldr	r0, [pc, #188]	; (80007c0 <CheckMBPDU+0x20c>)
 8000704:	f000 f904 	bl	8000910 <MBProcessRegisterRead>
					break;
 8000708:	e03d      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x04: MBProcessRegisterRead(InputRegisters,InputRegSize);//read input register
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <CheckMBPDU+0x210>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	482d      	ldr	r0, [pc, #180]	; (80007c8 <CheckMBPDU+0x214>)
 8000712:	f000 f8fd 	bl	8000910 <MBProcessRegisterRead>
					break;
 8000716:	e036      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x05: MBForceSingleCoil(Coils,CoilsRegsize);//Write single coil
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <CheckMBPDU+0x1f8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	4824      	ldr	r0, [pc, #144]	; (80007b0 <CheckMBPDU+0x1fc>)
 8000720:	f000 fb1a 	bl	8000d58 <MBForceSingleCoil>
					break;
 8000724:	e02f      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x06: MBPresetSingleRegister(HoldingRegisters,HoldingRegSize);//write single register
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <CheckMBPDU+0x208>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	4824      	ldr	r0, [pc, #144]	; (80007c0 <CheckMBPDU+0x20c>)
 800072e:	f000 f97f 	bl	8000a30 <MBPresetSingleRegister>
					break;
 8000732:	e028      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x08: MBProcessDiagnostics();
 8000734:	f000 fc36 	bl	8000fa4 <MBProcessDiagnostics>
					break;
 8000738:	e025      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x0f: MBForceMultipleCoils(Coils,CoilsRegsize);//Write multiple coils
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <CheckMBPDU+0x1f8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4619      	mov	r1, r3
 8000740:	481b      	ldr	r0, [pc, #108]	; (80007b0 <CheckMBPDU+0x1fc>)
 8000742:	f000 fb6f 	bl	8000e24 <MBForceMultipleCoils>
					break;
 8000746:	e01e      	b.n	8000786 <CheckMBPDU+0x1d2>

					case 0x10: MBPresetMultipleRegisters(HoldingRegisters,HoldingRegSize);//write multiple registers
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <CheckMBPDU+0x208>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	481c      	ldr	r0, [pc, #112]	; (80007c0 <CheckMBPDU+0x20c>)
 8000750:	f000 f9a4 	bl	8000a9c <MBPresetMultipleRegisters>
					break;
 8000754:	e017      	b.n	8000786 <CheckMBPDU+0x1d2>

					default:
					{
						MBException(0x01); //Illegal function code 01
 8000756:	2001      	movs	r0, #1
 8000758:	f000 f8b6 	bl	80008c8 <MBException>
						MBSendData(ResponseFrameSize);		//send data if not broadcast command
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <CheckMBPDU+0x218>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f85a 	bl	800081c <MBSendData>
					}
					break;
 8000768:	bf00      	nop
 800076a:	e00c      	b.n	8000786 <CheckMBPDU+0x1d2>
				}
			}
		}
		else BusCommErrCount+=1; //Increment bus communication error counter
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <CheckMBPDU+0x21c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <CheckMBPDU+0x21c>)
 8000774:	6013      	str	r3, [r2, #0]
	}else BusCommErrCount+=1; //Increment bus communication error counter
}
 8000776:	e006      	b.n	8000786 <CheckMBPDU+0x1d2>
	}else BusCommErrCount+=1; //Increment bus communication error counter
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <CheckMBPDU+0x21c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <CheckMBPDU+0x21c>)
 8000780:	6013      	str	r3, [r2, #0]
}
 8000782:	e000      	b.n	8000786 <CheckMBPDU+0x1d2>
			}
 8000784:	bf00      	nop
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200006dc 	.word	0x200006dc
 8000794:	200006d8 	.word	0x200006d8
 8000798:	200005c8 	.word	0x200005c8
 800079c:	2000042c 	.word	0x2000042c
 80007a0:	200006d4 	.word	0x200006d4
 80007a4:	200006ec 	.word	0x200006ec
 80007a8:	200006c8 	.word	0x200006c8
 80007ac:	200006f0 	.word	0x200006f0
 80007b0:	20000390 	.word	0x20000390
 80007b4:	20000420 	.word	0x20000420
 80007b8:	200003c4 	.word	0x200003c4
 80007bc:	20000430 	.word	0x20000430
 80007c0:	20000434 	.word	0x20000434
 80007c4:	200006e4 	.word	0x200006e4
 80007c8:	20000200 	.word	0x20000200
 80007cc:	20000424 	.word	0x20000424
 80007d0:	20000428 	.word	0x20000428

080007d4 <MBRegisterCount>:

//Count the number of registers
unsigned int MBRegisterCount(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	return (data_in[5]|(data_in[4]<<8));
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MBRegisterCount+0x20>)
 80007da:	795b      	ldrb	r3, [r3, #5]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <MBRegisterCount+0x20>)
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	4313      	orrs	r3, r2
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	200005c8 	.word	0x200005c8

080007f8 <MBStartAddress>:

//Get Starting Modbus Address
unsigned int MBStartAddress(void)	//Return requested start address
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	return (data_in[3]|(data_in[2]<<8));
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MBStartAddress+0x20>)
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <MBStartAddress+0x20>)
 8000806:	789b      	ldrb	r3, [r3, #2]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	4313      	orrs	r3, r2
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	200005c8 	.word	0x200005c8

0800081c <MBSendData>:

//Send data over USART (RS232)
void MBSendData(unsigned char count)	//Send final data over UART
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	if(data_in[0]!=0)
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MBSendData+0x50>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d016      	beq.n	800085e <MBSendData+0x42>
	{
		for (unsigned char c=0; c<count;c++)
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00f      	b.n	8000856 <MBSendData+0x3a>
		{
			while( !( USART2->SR & (1<<7u) ) ) {};	//wait till transmit buffer is empty
 8000836:	bf00      	nop
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MBSendData+0x54>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f9      	beq.n	8000838 <MBSendData+0x1c>
			USART2->DR = data_in[c];
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <MBSendData+0x50>)
 8000848:	5cd3      	ldrb	r3, [r2, r3]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MBSendData+0x54>)
 800084e:	605a      	str	r2, [r3, #4]
		for (unsigned char c=0; c<count;c++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfa      	ldrb	r2, [r7, #15]
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3eb      	bcc.n	8000836 <MBSendData+0x1a>
		}
	}
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200005c8 	.word	0x200005c8
 8000870:	40004400 	.word	0x40004400

08000874 <AppendCRCtoMBRegister>:

/*************** Append CRC ***************/
//C function to append CRC to Slave Modbus response PDU
void AppendCRCtoMBRegister(unsigned char packtop)	//crc is calculated from slave id to last data byte
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	unsigned short crcvalue=0;
 800087e:	2300      	movs	r3, #0
 8000880:	81fb      	strh	r3, [r7, #14]
	crcvalue=CRC16(data_in,packtop);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29b      	uxth	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <AppendCRCtoMBRegister+0x4c>)
 800088a:	f7ff fe3b 	bl	8000504 <CRC16>
 800088e:	4603      	mov	r3, r0
 8000890:	81fb      	strh	r3, [r7, #14]
	data_in[packtop] =(unsigned char)(crcvalue);			//lower byte at higher register
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	89fa      	ldrh	r2, [r7, #14]
 8000896:	b2d1      	uxtb	r1, r2
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <AppendCRCtoMBRegister+0x4c>)
 800089a:	54d1      	strb	r1, [r2, r3]
	data_in[packtop+1] =(unsigned char)(crcvalue>>8);		//higher byte at lower register
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	3301      	adds	r3, #1
 80008a6:	b2d1      	uxtb	r1, r2
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <AppendCRCtoMBRegister+0x4c>)
 80008aa:	54d1      	strb	r1, [r2, r3]
	ResponseFrameSize = packtop + 2;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	3302      	adds	r3, #2
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <AppendCRCtoMBRegister+0x50>)
 80008b4:	701a      	strb	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200005c8 	.word	0x200005c8
 80008c4:	20000424 	.word	0x20000424

080008c8 <MBException>:
//************** Append CRC ***************

//**************  EXCEPTION  **************
//Write Exception code
void MBException(unsigned char exceptionCode)	//Exception code
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	SlaveExErrCount+=1;			//Increment Slave Exception Error count
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MBException+0x3c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <MBException+0x3c>)
 80008da:	6013      	str	r3, [r2, #0]
	data_in[1]|=0x80;			//setting MSB of the function code (the exception flag)
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MBException+0x40>)
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MBException+0x40>)
 80008ea:	705a      	strb	r2, [r3, #1]
	data_in[2]=exceptionCode; 	//Exception code. Also the last byte containing dat
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <MBException+0x40>)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	7093      	strb	r3, [r2, #2]
	ResponseFrameSize = 3;		// 3 bytes to send. No crc calculation.
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MBException+0x44>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	701a      	strb	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	200005c4 	.word	0x200005c4
 8000908:	200005c8 	.word	0x200005c8
 800090c:	20000424 	.word	0x20000424

08000910 <MBProcessRegisterRead>:
//**************  EXCEPTION  **************

//*********Modbus Register Read Operations*************
//C function related to Analog Read operations (Function code 03, 04)
void MBProcessRegisterRead(unsigned int *InArr, unsigned int InArrSize)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	//First check what is the count of registers requested
	unsigned int RegCount = MBRegisterCount();
 800091a:	f7ff ff5b 	bl	80007d4 <MBRegisterCount>
 800091e:	6178      	str	r0, [r7, #20]

	//| SLAVE_ID | FUNCTION_CODE | RETURN BYTES COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE            | N*2 BYTES | 2 BYTES |
	//So our final requested data should fit in above 256 size, so data should be max 256-6 bytes
	//As a safeguard we are also checking with maximum limits of query as per modbus function (m584 controller)
	if((RegCount >= 1u) &
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf14      	ite	ne
 8000926:	2301      	movne	r3, #1
 8000928:	2300      	moveq	r3, #0
 800092a:	b2da      	uxtb	r2, r3
		(RegCount*2 <= 251u) &
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
	if((RegCount >= 1u) &
 8000930:	2bfb      	cmp	r3, #251	; 0xfb
 8000932:	bf94      	ite	ls
 8000934:	2301      	movls	r3, #1
 8000936:	2300      	movhi	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4013      	ands	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	461a      	mov	r2, r3
		(RegCount <= 125u))
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b7d      	cmp	r3, #125	; 0x7d
 8000944:	bf94      	ite	ls
 8000946:	2301      	movls	r3, #1
 8000948:	2300      	movhi	r3, #0
 800094a:	b2db      	uxtb	r3, r3
		(RegCount*2 <= 251u) &
 800094c:	4013      	ands	r3, r2
	if((RegCount >= 1u) &
 800094e:	2b00      	cmp	r3, #0
 8000950:	d026      	beq.n	80009a0 <MBProcessRegisterRead+0x90>
	{
		//to check if the requested start and end addresses are available in out controller
		//Get to know the starting address of the requested data
		unsigned int StAddress = MBStartAddress();
 8000952:	f7ff ff51 	bl	80007f8 <MBStartAddress>
 8000956:	6138      	str	r0, [r7, #16]
		unsigned int EndAddress = StAddress + RegCount - 1u;
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	3b01      	subs	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]

		//We will simply check if the end address is inside the size of our holding register
		if((StAddress>=0u) & (EndAddress<=(InArrSize-1u)))
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3b01      	subs	r3, #1
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d815      	bhi.n	8000998 <MBProcessRegisterRead+0x88>
		{
			//Process the request
			data_in[2]=(unsigned char)(RegCount*2);	//fill the byte count in the data array
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MBProcessRegisterRead+0xac>)
 8000976:	709a      	strb	r2, [r3, #2]
			AppendDatatoMBRegister(StAddress,RegCount,HoldingRegisters,data_in);	//fill data in the data register
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MBProcessRegisterRead+0xac>)
 800097a:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <MBProcessRegisterRead+0xb0>)
 800097c:	6979      	ldr	r1, [r7, #20]
 800097e:	6938      	ldr	r0, [r7, #16]
 8000980:	f000 f822 	bl	80009c8 <AppendDatatoMBRegister>
			AppendCRCtoMBRegister(3+RegCount*2);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	3303      	adds	r3, #3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff6f 	bl	8000874 <AppendCRCtoMBRegister>
 8000996:	e006      	b.n	80009a6 <MBProcessRegisterRead+0x96>
		}
		else MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8000998:	2002      	movs	r0, #2
 800099a:	f7ff ff95 	bl	80008c8 <MBException>
 800099e:	e002      	b.n	80009a6 <MBProcessRegisterRead+0x96>
	}
	else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 80009a0:	2003      	movs	r0, #3
 80009a2:	f7ff ff91 	bl	80008c8 <MBException>

	MBSendData(ResponseFrameSize);		//send response if not broadcast message
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MBProcessRegisterRead+0xb4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff35 	bl	800081c <MBSendData>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200005c8 	.word	0x200005c8
 80009c0:	20000434 	.word	0x20000434
 80009c4:	20000424 	.word	0x20000424

080009c8 <AppendDatatoMBRegister>:

//Append Data from unsigned integer Array to Modbus PDU during Read Operation
void AppendDatatoMBRegister(unsigned int StAddr,unsigned int count, unsigned int *inreg, volatile unsigned char *outreg)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
	for (unsigned char c=0; c<count; c++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	75fb      	strb	r3, [r7, #23]
 80009da:	e01f      	b.n	8000a1c <AppendDatatoMBRegister+0x54>
	{
			*(outreg+3+c*2) = (unsigned char)(*(inreg+StAddr+c) >> 8);	//MSB IN HIGHER BYTE
 80009dc:	7dfa      	ldrb	r2, [r7, #23]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	0a19      	lsrs	r1, r3, #8
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	3303      	adds	r3, #3
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
			*(outreg+3+(c*2+1)) = (unsigned char)(*(inreg+StAddr+c));	//LSB IN LOWER BYTE
 80009fa:	7dfa      	ldrb	r2, [r7, #23]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	6819      	ldr	r1, [r3, #0]
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
	for (unsigned char c=0; c<count; c++)
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8db      	bhi.n	80009dc <AppendDatatoMBRegister+0x14>
	}
}
 8000a24:	bf00      	nop
 8000a26:	371c      	adds	r7, #28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <MBPresetSingleRegister>:
//*********Modbus Register Read Operations*************

//*********Modbus Register Write Operations*************
//C function to Write Single Analog register (Function code 06)
void MBPresetSingleRegister(unsigned int *InArr, unsigned int InArrSize)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	unsigned int StAddress = MBStartAddress();
 8000a3a:	f7ff fedd 	bl	80007f8 <MBStartAddress>
 8000a3e:	60f8      	str	r0, [r7, #12]
	//exception code 03 cannot be done for function code 06
	//check of exception code 02
	if((StAddress)<=(InArrSize-1u))
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d815      	bhi.n	8000a76 <MBPresetSingleRegister+0x46>
	{
		*(InArr+StAddress) = (unsigned int)(data_in[4] << 8) | (unsigned int)(data_in[5]);	//MSB FIRST AND THEN LSB IS ORed
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MBPresetSingleRegister+0x60>)
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	4618      	mov	r0, r3
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MBPresetSingleRegister+0x60>)
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	ea40 0201 	orr.w	r2, r0, r1
 8000a68:	601a      	str	r2, [r3, #0]
		ResponseFrameSize=CharCount;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MBPresetSingleRegister+0x64>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MBPresetSingleRegister+0x68>)
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e002      	b.n	8000a7c <MBPresetSingleRegister+0x4c>
	}
	else MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff ff26 	bl	80008c8 <MBException>

	MBSendData(ResponseFrameSize);		//send response if not broadcast message
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MBPresetSingleRegister+0x68>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff feca 	bl	800081c <MBSendData>
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200005c8 	.word	0x200005c8
 8000a94:	200006dc 	.word	0x200006dc
 8000a98:	20000424 	.word	0x20000424

08000a9c <MBPresetMultipleRegisters>:

//C function to Write Multiple Analog registers (Function code 16)
void MBPresetMultipleRegisters(unsigned int *InArr, unsigned int InArrSize)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]

	//Get to know the starting address of the requested data
	unsigned int StAddress = MBStartAddress();
 8000aa6:	f7ff fea7 	bl	80007f8 <MBStartAddress>
 8000aaa:	6178      	str	r0, [r7, #20]
	unsigned int RegCount = MBRegisterCount();
 8000aac:	f7ff fe92 	bl	80007d4 <MBRegisterCount>
 8000ab0:	6138      	str	r0, [r7, #16]
	unsigned int EndAddress = StAddress + RegCount - 1;
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]

	//| SLAVE_ID | FUNCTION_CODE | RETURN BYTES COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE            | N*2 BYTES | 2 BYTES |
	//So our final requested data should fit in above 256 size, so data should be max 256-6 bytes
	//As a safeguard we are also checking with maximum limits of query as per modbus function (m584 controller)
	if((RegCount >= 1u) &
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	2b64      	cmp	r3, #100	; 0x64
 8000acc:	bf94      	ite	ls
 8000ace:	2301      	movls	r3, #1
 8000ad0:	2300      	movhi	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
		(RegCount <= 100u) &
		(data_in[6]==RegCount*2))	//for fc16, number of bytes requested is embedded in modbus message
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MBPresetMultipleRegisters+0xa0>)
 8000adc:	799b      	ldrb	r3, [r3, #6]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
		(RegCount <= 100u) &
 8000af0:	4013      	ands	r3, r2
	if((RegCount >= 1u) &
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d014      	beq.n	8000b20 <MBPresetMultipleRegisters+0x84>
	{
		//We will simply check if the end address is inside the size of our holding register
		if((StAddress>=0) & (EndAddress<=(InArrSize-1u)))
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d80b      	bhi.n	8000b18 <MBPresetMultipleRegisters+0x7c>
		{
			//Process the request
			WriteMBRegistertoData(StAddress,RegCount, data_in,HoldingRegisters);
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MBPresetMultipleRegisters+0xa4>)
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <MBPresetMultipleRegisters+0xa0>)
 8000b04:	6939      	ldr	r1, [r7, #16]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f000 f820 	bl	8000b4c <WriteMBRegistertoData>
			ResponseFrameSize=CharCount;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MBPresetMultipleRegisters+0xa8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MBPresetMultipleRegisters+0xac>)
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e006      	b.n	8000b26 <MBPresetMultipleRegisters+0x8a>
		}
		else MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f7ff fed5 	bl	80008c8 <MBException>
 8000b1e:	e002      	b.n	8000b26 <MBPresetMultipleRegisters+0x8a>
	}
	else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 8000b20:	2003      	movs	r0, #3
 8000b22:	f7ff fed1 	bl	80008c8 <MBException>

	MBSendData(ResponseFrameSize);		//send response if not broadcast message
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MBPresetMultipleRegisters+0xac>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fe75 	bl	800081c <MBSendData>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200005c8 	.word	0x200005c8
 8000b40:	20000434 	.word	0x20000434
 8000b44:	200006dc 	.word	0x200006dc
 8000b48:	20000424 	.word	0x20000424

08000b4c <WriteMBRegistertoData>:

//C function to Store Analog Write operations to unsigned integer Variable array
void WriteMBRegistertoData(unsigned int StAddr,unsigned int count, volatile unsigned char *inreg, unsigned int *outreg)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
	for (unsigned char c=0; c<count; c++) *(outreg+StAddr+c) = (unsigned int)(*(inreg+7+(c*2)) << 8) | (unsigned int)(*(inreg+7+(c*2)+1));
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	75fb      	strb	r3, [r7, #23]
 8000b5e:	e01c      	b.n	8000b9a <WriteMBRegistertoData+0x4e>
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	3307      	adds	r3, #7
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	4618      	mov	r0, r3
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	3308      	adds	r3, #8
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	7dfa      	ldrb	r2, [r7, #23]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	ea40 0201 	orr.w	r2, r0, r1
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
 8000b96:	3301      	adds	r3, #1
 8000b98:	75fb      	strb	r3, [r7, #23]
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	68ba      	ldr	r2, [r7, #8]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d8de      	bhi.n	8000b60 <WriteMBRegistertoData+0x14>
}
 8000ba2:	bf00      	nop
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <MBProcessBitsRead>:
//*********Modbus Register Write Operations*************

//*********Modbus Discrete Read Operations*************
//C function related to Discrete Read operations (Function code 01, 02)
void MBProcessBitsRead(unsigned char *InArr, unsigned int InArrSize)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	//First check what is the count of bits requested
	unsigned int BitCount = MBRegisterCount();
 8000bba:	f7ff fe0b 	bl	80007d4 <MBRegisterCount>
 8000bbe:	61f8      	str	r0, [r7, #28]
	//As a safeguard we are also checking with maximum limits of query as per modbus function (m584 controller)

	unsigned char ByteCount = ((BitCount<=8u)
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d90e      	bls.n	8000be4 <MBProcessBitsRead+0x34>
								?1u
								:((BitCount%8u==0)
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
	unsigned char ByteCount = ((BitCount<=8u)
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d103      	bne.n	8000bd8 <MBProcessBitsRead+0x28>
									?(BitCount/8u)
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	08db      	lsrs	r3, r3, #3
	unsigned char ByteCount = ((BitCount<=8u)
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	e006      	b.n	8000be6 <MBProcessBitsRead+0x36>
									:((BitCount/8u)+1u)));
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	08db      	lsrs	r3, r3, #3
 8000bdc:	b2db      	uxtb	r3, r3
	unsigned char ByteCount = ((BitCount<=8u)
 8000bde:	3301      	adds	r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	e000      	b.n	8000be6 <MBProcessBitsRead+0x36>
 8000be4:	2301      	movs	r3, #1
 8000be6:	76fb      	strb	r3, [r7, #27]
	//| SLAVE_ID | FUNCTION_CODE | RETURN BYTES COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE            | N BYTES   | 2 BYTES |
	if ((BitCount >=1u) &
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	bf14      	ite	ne
 8000bee:	2301      	movne	r3, #1
 8000bf0:	2300      	moveq	r3, #0
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bfa:	bf94      	ite	ls
 8000bfc:	2301      	movls	r3, #1
 8000bfe:	2300      	movhi	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4013      	ands	r3, r2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d03a      	beq.n	8000c80 <MBProcessBitsRead+0xd0>
		(BitCount <= 2000u))
	{
		//to check if the requested start and end addresses are available in out controller
		//As an example we configure 50 holding registers = 100 bytes of data array HoldingRegister
		//Get to know the starting address of the requested data
		unsigned int StAddress = MBStartAddress();				//start coil address
 8000c0a:	f7ff fdf5 	bl	80007f8 <MBStartAddress>
 8000c0e:	6178      	str	r0, [r7, #20]
		unsigned int EndAddress = StAddress + BitCount - 1;	//end coil address
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	4413      	add	r3, r2
 8000c16:	3b01      	subs	r3, #1
 8000c18:	613b      	str	r3, [r7, #16]

		if(EndAddress <=((InArrSize*8)-1))
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d828      	bhi.n	8000c78 <MBProcessBitsRead+0xc8>
		{
			//Process the request
			data_in[2]=(unsigned char)ByteCount;	//fill the byte count in the data array
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <MBProcessBitsRead+0xec>)
 8000c28:	7efb      	ldrb	r3, [r7, #27]
 8000c2a:	7093      	strb	r3, [r2, #2]

			//Ex. if master request 4 coil statuses, this means that 1 register is response.
			//We need to clear the remaining 4 bits of the data if there is any.
			//Else there will be error
			unsigned char regtoclear = ((BitCount<8u)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b07      	cmp	r3, #7
 8000c30:	d90c      	bls.n	8000c4c <MBProcessBitsRead+0x9c>
										?3u
										:((BitCount%8u>0)
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	f003 0307 	and.w	r3, r3, #7
			unsigned char regtoclear = ((BitCount<8u)
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <MBProcessBitsRead+0x98>
												?((unsigned char) (BitCount/8u+3u))
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	b2db      	uxtb	r3, r3
			unsigned char regtoclear = ((BitCount<8u)
 8000c42:	3303      	adds	r3, #3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	e002      	b.n	8000c4e <MBProcessBitsRead+0x9e>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e000      	b.n	8000c4e <MBProcessBitsRead+0x9e>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	73fb      	strb	r3, [r7, #15]
												:0));
			//clearing last byte of response array
			if (regtoclear>0) data_in[(unsigned char)regtoclear]=0x00;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <MBProcessBitsRead+0xae>
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <MBProcessBitsRead+0xec>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	54d1      	strb	r1, [r2, r3]

			AppendBitsToRegisters(StAddress,BitCount,InArr,data_in);
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MBProcessBitsRead+0xec>)
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	69f9      	ldr	r1, [r7, #28]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f000 f81d 	bl	8000ca4 <AppendBitsToRegisters>
			AppendCRCtoMBRegister(3+ByteCount);
 8000c6a:	7efb      	ldrb	r3, [r7, #27]
 8000c6c:	3303      	adds	r3, #3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fdff 	bl	8000874 <AppendCRCtoMBRegister>
 8000c76:	e006      	b.n	8000c86 <MBProcessBitsRead+0xd6>
		}
		else MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f7ff fe25 	bl	80008c8 <MBException>
 8000c7e:	e002      	b.n	8000c86 <MBProcessBitsRead+0xd6>
	}
	else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 8000c80:	2003      	movs	r0, #3
 8000c82:	f7ff fe21 	bl	80008c8 <MBException>

	MBSendData(ResponseFrameSize);		//send response if not broadcast message
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MBProcessBitsRead+0xf0>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fdc5 	bl	800081c <MBSendData>
}
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200005c8 	.word	0x200005c8
 8000ca0:	20000424 	.word	0x20000424

08000ca4 <AppendBitsToRegisters>:

//C function to append array bits to modbus pDU
void AppendBitsToRegisters(unsigned int StAddr, unsigned int count, unsigned char *inreg, volatile unsigned char *outreg)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
	for (unsigned int c=0;c<count;c++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e044      	b.n	8000d42 <AppendBitsToRegisters+0x9e>
	{
		if(*(inreg+((StAddr+c)/8u))&(1<<((StAddr+c)-(((StAddr+c)/8u)*8u))))	//if in outreg array, bit is 1?
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	08db      	lsrs	r3, r3, #3
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4413      	add	r3, r2
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	fa41 f303 	asr.w	r3, r1, r3
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d016      	beq.n	8000d0c <AppendBitsToRegisters+0x68>
		{
			*(outreg+3+(c/8))|=(1<<(c-((c/8)*8)));	//then set bit 1 in target array
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	1cda      	adds	r2, r3, #3
 8000ce4:	6839      	ldr	r1, [r7, #0]
 8000ce6:	440a      	add	r2, r1
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	b251      	sxtb	r1, r2
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	f002 0207 	and.w	r2, r2, #7
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	b252      	sxtb	r2, r2
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	b251      	sxtb	r1, r2
 8000d00:	3303      	adds	r3, #3
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e017      	b.n	8000d3c <AppendBitsToRegisters+0x98>
		} else *(outreg+3+(c/8))&=~(1<<(c-((c/8)*8)));	//else clear the bit in target array
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	1cda      	adds	r2, r3, #3
 8000d12:	6839      	ldr	r1, [r7, #0]
 8000d14:	440a      	add	r2, r1
 8000d16:	7812      	ldrb	r2, [r2, #0]
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	b251      	sxtb	r1, r2
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	f002 0207 	and.w	r2, r2, #7
 8000d22:	2001      	movs	r0, #1
 8000d24:	fa00 f202 	lsl.w	r2, r0, r2
 8000d28:	b252      	sxtb	r2, r2
 8000d2a:	43d2      	mvns	r2, r2
 8000d2c:	b252      	sxtb	r2, r2
 8000d2e:	400a      	ands	r2, r1
 8000d30:	b251      	sxtb	r1, r2
 8000d32:	3303      	adds	r3, #3
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
	for (unsigned int c=0;c<count;c++)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3b6      	bcc.n	8000cb8 <AppendBitsToRegisters+0x14>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <MBForceSingleCoil>:
//*********Modbus Discrete Read Operations*************

//*********Modbus Discrete Write Operations*************
//C function for writing one coil (Function code 05)
void MBForceSingleCoil(unsigned char *InArr, unsigned int InArrSize)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	unsigned int StAddress = MBStartAddress();
 8000d62:	f7ff fd49 	bl	80007f8 <MBStartAddress>
 8000d66:	60f8      	str	r0, [r7, #12]
	unsigned int outputvalue =MBRegisterCount();		//using existing c function instead of creating a new one
 8000d68:	f7ff fd34 	bl	80007d4 <MBRegisterCount>
 8000d6c:	60b8      	str	r0, [r7, #8]
	if((outputvalue==0x0000) | (outputvalue==0xff00))
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bf0c      	ite	eq
 8000d74:	2301      	moveq	r3, #1
 8000d76:	2300      	movne	r3, #0
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d038      	beq.n	8000e02 <MBForceSingleCoil+0xaa>
	{
		if(StAddress <=((InArrSize*8)-1))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	3b01      	subs	r3, #1
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d82e      	bhi.n	8000dfa <MBForceSingleCoil+0xa2>
		{
			//Not calling separate function. Writing here itself
			if(outputvalue==0xff00)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8000da2:	d111      	bne.n	8000dc8 <MBForceSingleCoil+0x70>
			{
				*(InArr+(StAddress/8)) |=(1u<<(StAddress-((StAddress/8)*8)));
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	441a      	add	r2, r3
 8000dac:	7811      	ldrb	r1, [r2, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	f002 0207 	and.w	r2, r2, #7
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	4403      	add	r3, r0
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e012      	b.n	8000dee <MBForceSingleCoil+0x96>
			}else *(InArr+(StAddress/8)) &=~(1u<<(StAddress-((StAddress/8)*8)));
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	441a      	add	r2, r3
 8000dd0:	7811      	ldrb	r1, [r2, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	f002 0207 	and.w	r2, r2, #7
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	4403      	add	r3, r0
 8000de8:	400a      	ands	r2, r1
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	701a      	strb	r2, [r3, #0]
			ResponseFrameSize=CharCount;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MBForceSingleCoil+0xc4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MBForceSingleCoil+0xc8>)
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e006      	b.n	8000e08 <MBForceSingleCoil+0xb0>
		}
		else MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fd64 	bl	80008c8 <MBException>
 8000e00:	e002      	b.n	8000e08 <MBForceSingleCoil+0xb0>
	}
	else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 8000e02:	2003      	movs	r0, #3
 8000e04:	f7ff fd60 	bl	80008c8 <MBException>

	MBSendData(ResponseFrameSize);		//send response if not broadcast message
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <MBForceSingleCoil+0xc8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fd04 	bl	800081c <MBSendData>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200006dc 	.word	0x200006dc
 8000e20:	20000424 	.word	0x20000424

08000e24 <MBForceMultipleCoils>:

//C function for writing multiple coils (Function code 15)
void MBForceMultipleCoils(unsigned char *InArr, unsigned int InArrSize)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	//First check what is the count of bits requested
	unsigned int BitCount = MBRegisterCount();
 8000e2e:	f7ff fcd1 	bl	80007d4 <MBRegisterCount>
 8000e32:	6178      	str	r0, [r7, #20]
	unsigned int StAddress = MBStartAddress();
 8000e34:	f7ff fce0 	bl	80007f8 <MBStartAddress>
 8000e38:	6138      	str	r0, [r7, #16]

	//As a safeguard we are also checking with maximum limits of query as per modbus function (m584 controller)
	unsigned char ByteCount = ((BitCount<=8u)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d90e      	bls.n	8000e5e <MBForceMultipleCoils+0x3a>
								?1u
								:((BitCount%8u==0)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0307 	and.w	r3, r3, #7
	unsigned char ByteCount = ((BitCount<=8u)
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <MBForceMultipleCoils+0x2e>
									?(BitCount/8u)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	08db      	lsrs	r3, r3, #3
	unsigned char ByteCount = ((BitCount<=8u)
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	e006      	b.n	8000e60 <MBForceMultipleCoils+0x3c>
									:((BitCount/8u)+1u)));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	b2db      	uxtb	r3, r3
	unsigned char ByteCount = ((BitCount<=8u)
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	e000      	b.n	8000e60 <MBForceMultipleCoils+0x3c>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
	//| SLAVE_ID | FUNCTION_CODE | RETURN BYTES COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE            | N BYTES   | 2 BYTES |
	if ((BitCount >=1u) &
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf14      	ite	ne
 8000e68:	2301      	movne	r3, #1
 8000e6a:	2300      	moveq	r3, #0
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000e74:	bf94      	ite	ls
 8000e76:	2301      	movls	r3, #1
 8000e78:	2300      	movhi	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
		(BitCount <= 800u) &
		(ByteCount==data_in[6]))
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MBForceMultipleCoils+0xc8>)
 8000e84:	799b      	ldrb	r3, [r3, #6]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
		(BitCount <= 800u) &
 8000e94:	400b      	ands	r3, r1
	if ((BitCount >=1u) &
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d01a      	beq.n	8000ed0 <MBForceMultipleCoils+0xac>
	{
		//to check if the requested start and end addresses are available in out controller
		//As an example we configure 50 holding registers = 100 bytes of data array HoldingRegister
		//Get to know the starting address of the requested data
			//start coil address
		unsigned int EndAddress = StAddress + BitCount - 1;	//end coil address
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]

		if((StAddress>=0) & (EndAddress <=((InArrSize*8)-1)))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d80b      	bhi.n	8000ec8 <MBForceMultipleCoils+0xa4>
		{
			//Process the requests
			WriteMBRegistersToBits(StAddress,BitCount,data_in,InArr);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <MBForceMultipleCoils+0xc8>)
 8000eb4:	6979      	ldr	r1, [r7, #20]
 8000eb6:	6938      	ldr	r0, [r7, #16]
 8000eb8:	f000 f81e 	bl	8000ef8 <WriteMBRegistersToBits>
			ResponseFrameSize=CharCount;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MBForceMultipleCoils+0xcc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MBForceMultipleCoils+0xd0>)
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e006      	b.n	8000ed6 <MBForceMultipleCoils+0xb2>
		}
		else MBException(0x02);//Exception code 02 = ILLEGAL DATA ADDRESS
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f7ff fcfd 	bl	80008c8 <MBException>
 8000ece:	e002      	b.n	8000ed6 <MBForceMultipleCoils+0xb2>
	}
	else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f7ff fcf9 	bl	80008c8 <MBException>

	MBSendData(ResponseFrameSize);		//send response if not broadcast message
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MBForceMultipleCoils+0xd0>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fc9d 	bl	800081c <MBSendData>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200005c8 	.word	0x200005c8
 8000ef0:	200006dc 	.word	0x200006dc
 8000ef4:	20000424 	.word	0x20000424

08000ef8 <WriteMBRegistersToBits>:

//C function to store MODBUS master's discrete signals to Coil array
void WriteMBRegistersToBits(unsigned int StAddr, unsigned int count, volatile unsigned char *inreg,unsigned char *outreg)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
	for (unsigned int c=0;c<count;c++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e040      	b.n	8000f8e <WriteMBRegistersToBits+0x96>
	{
		if(*(inreg+7+(c/8u))&(1<<(c-((c/8u)*8u))))	//if in outreg array, bit is 1?
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	3307      	adds	r3, #7
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	fa42 f303 	asr.w	r3, r2, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d015      	beq.n	8000f5a <WriteMBRegistersToBits+0x62>
		{
			*(outreg+((StAddr+c)/8)) |=(1u<<((StAddr+c)-(((StAddr+c)/8)*8)));
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	4413      	add	r3, r2
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	441a      	add	r2, r3
 8000f3a:	7811      	ldrb	r1, [r2, #0]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4402      	add	r2, r0
 8000f42:	f002 0207 	and.w	r2, r2, #7
 8000f46:	2001      	movs	r0, #1
 8000f48:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	4403      	add	r3, r0
 8000f52:	430a      	orrs	r2, r1
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e016      	b.n	8000f88 <WriteMBRegistersToBits+0x90>
		} else *(outreg+((StAddr+c)/8)) &=~(1u<<((StAddr+c)-(((StAddr+c)/8)*8)));	//else clear the bit in target array
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	4413      	add	r3, r2
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	441a      	add	r2, r3
 8000f66:	7811      	ldrb	r1, [r2, #0]
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4402      	add	r2, r0
 8000f6e:	f002 0207 	and.w	r2, r2, #7
 8000f72:	2001      	movs	r0, #1
 8000f74:	fa00 f202 	lsl.w	r2, r0, r2
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	43d2      	mvns	r2, r2
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	4403      	add	r3, r0
 8000f82:	400a      	ands	r2, r1
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
	for (unsigned int c=0;c<count;c++)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d3ba      	bcc.n	8000f0c <WriteMBRegistersToBits+0x14>
	}
}
 8000f96:	bf00      	nop
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <MBProcessDiagnostics>:
//*********Modbus Discrete Write Operations*************

void MBProcessDiagnostics(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
	unsigned int subcode=MBStartAddress();	//using existing c function instead of creating new one
 8000faa:	f7ff fc25 	bl	80007f8 <MBStartAddress>
 8000fae:	60f8      	str	r0, [r7, #12]
	unsigned int Data=MBRegisterCount();	//using existing c function
 8000fb0:	f7ff fc10 	bl	80007d4 <MBRegisterCount>
 8000fb4:	60b8      	str	r0, [r7, #8]
	switch(subcode)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b14      	cmp	r3, #20
 8000fba:	d86a      	bhi.n	8001092 <MBProcessDiagnostics+0xee>
 8000fbc:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <MBProcessDiagnostics+0x20>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08001019 	.word	0x08001019
 8000fc8:	080010a7 	.word	0x080010a7
 8000fcc:	080010a7 	.word	0x080010a7
 8000fd0:	080010a7 	.word	0x080010a7
 8000fd4:	080010a7 	.word	0x080010a7
 8000fd8:	08001093 	.word	0x08001093
 8000fdc:	08001093 	.word	0x08001093
 8000fe0:	08001093 	.word	0x08001093
 8000fe4:	08001093 	.word	0x08001093
 8000fe8:	08001093 	.word	0x08001093
 8000fec:	08001025 	.word	0x08001025
 8000ff0:	08001043 	.word	0x08001043
 8000ff4:	08001043 	.word	0x08001043
 8000ff8:	08001043 	.word	0x08001043
 8000ffc:	08001043 	.word	0x08001043
 8001000:	08001043 	.word	0x08001043
 8001004:	08001043 	.word	0x08001043
 8001008:	08001043 	.word	0x08001043
 800100c:	08001043 	.word	0x08001043
 8001010:	08001093 	.word	0x08001093
 8001014:	08001073 	.word	0x08001073
	{
		case 0x00:			//Return Query Data
			ResponseFrameSize=CharCount;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MBProcessDiagnostics+0x118>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <MBProcessDiagnostics+0x11c>)
 8001020:	701a      	strb	r2, [r3, #0]
			break;
 8001022:	e041      	b.n	80010a8 <MBProcessDiagnostics+0x104>

		case 0x04:			//Force Listen Only Mode
			break;

		case 0x0a:			//Clear Counters and Diagnostic Register
			if(Data==0x0000)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d107      	bne.n	800103a <MBProcessDiagnostics+0x96>
			{
				ClearModbusCounters();
 800102a:	f000 f89b 	bl	8001164 <ClearModbusCounters>
				ResponseFrameSize=CharCount;
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MBProcessDiagnostics+0x118>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MBProcessDiagnostics+0x11c>)
 8001036:	701a      	strb	r2, [r3, #0]
			}
			else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
			break;
 8001038:	e036      	b.n	80010a8 <MBProcessDiagnostics+0x104>
			else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 800103a:	2003      	movs	r0, #3
 800103c:	f7ff fc44 	bl	80008c8 <MBException>
			break;
 8001040:	e032      	b.n	80010a8 <MBProcessDiagnostics+0x104>
		case 0x0e:			//Return Slave Message Count
		case 0x0f:			//Return Slave No Response Count
		case 0x10:			//Return Slave NAK Count
		case 0x11:			//Return Slave Busy Count
		case 0x012:			//Return Bus Character Overrun Count
			if(Data==0x0000)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d110      	bne.n	800106a <MBProcessDiagnostics+0xc6>
			{
				unsigned int counterval=ReturnDiagCounter(subcode);
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 f83f 	bl	80010cc <ReturnDiagCounter>
 800104e:	6078      	str	r0, [r7, #4]
				data_in[4]=(counterval<<8);
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MBProcessDiagnostics+0x120>)
 8001052:	2200      	movs	r2, #0
 8001054:	711a      	strb	r2, [r3, #4]
				data_in[5]=(counterval);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MBProcessDiagnostics+0x120>)
 800105c:	715a      	strb	r2, [r3, #5]
				ResponseFrameSize=CharCount;
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MBProcessDiagnostics+0x118>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MBProcessDiagnostics+0x11c>)
 8001066:	701a      	strb	r2, [r3, #0]
			}
			else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
			break;
 8001068:	e01e      	b.n	80010a8 <MBProcessDiagnostics+0x104>
			else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 800106a:	2003      	movs	r0, #3
 800106c:	f7ff fc2c 	bl	80008c8 <MBException>
			break;
 8001070:	e01a      	b.n	80010a8 <MBProcessDiagnostics+0x104>

		case 0x14:			//Clear Overrun Counter and Flag
			if(Data==0x0000)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d108      	bne.n	800108a <MBProcessDiagnostics+0xe6>
			{
				BusChrOvrCount=0;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MBProcessDiagnostics+0x124>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
				ResponseFrameSize=CharCount;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MBProcessDiagnostics+0x118>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MBProcessDiagnostics+0x11c>)
 8001086:	701a      	strb	r2, [r3, #0]
			}
			else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
			break;
 8001088:	e00e      	b.n	80010a8 <MBProcessDiagnostics+0x104>
			else MBException(0x03);//Exception code 03 = ILLEGAL DATA VALUE
 800108a:	2003      	movs	r0, #3
 800108c:	f7ff fc1c 	bl	80008c8 <MBException>
			break;
 8001090:	e00a      	b.n	80010a8 <MBProcessDiagnostics+0x104>

		default:
		{
			MBException(0x01); //Illegal function code 01
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff fc18 	bl	80008c8 <MBException>
			MBSendData(ResponseFrameSize);		//send data if not broadcast command
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MBProcessDiagnostics+0x11c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fbbc 	bl	800081c <MBSendData>
			break;
 80010a4:	e000      	b.n	80010a8 <MBProcessDiagnostics+0x104>
			break;
 80010a6:	bf00      	nop
		}

	}
	MBSendData(CharCount);	//echo back the data
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <MBProcessDiagnostics+0x118>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fbb4 	bl	800081c <MBSendData>
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200006dc 	.word	0x200006dc
 80010c0:	20000424 	.word	0x20000424
 80010c4:	200005c8 	.word	0x200005c8
 80010c8:	200006e8 	.word	0x200006e8

080010cc <ReturnDiagCounter>:

unsigned int ReturnDiagCounter(unsigned int scode)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	switch (scode)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b0b      	subs	r3, #11
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d82b      	bhi.n	8001134 <ReturnDiagCounter+0x68>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <ReturnDiagCounter+0x18>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	08001105 	.word	0x08001105
 80010e8:	0800110b 	.word	0x0800110b
 80010ec:	08001111 	.word	0x08001111
 80010f0:	08001117 	.word	0x08001117
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	08001123 	.word	0x08001123
 80010fc:	08001129 	.word	0x08001129
 8001100:	0800112f 	.word	0x0800112f
	{
	case 0x0b: return BusMsgCount;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <ReturnDiagCounter+0x78>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	e015      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;

	case 0x0c: return BusCommErrCount;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <ReturnDiagCounter+0x7c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	e012      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;

	case 0x0d: return SlaveExErrCount;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <ReturnDiagCounter+0x80>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	e00f      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;

	case 0x0e: return SlaveMsgCount;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <ReturnDiagCounter+0x84>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	e00c      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;

	case 0x0f: return SlaveNoRspCount;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <ReturnDiagCounter+0x88>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	e009      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;

	case 0x10: return SlaveNAKCount;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <ReturnDiagCounter+0x8c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	e006      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;

	case 0x11: return SlaveBusyCount;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <ReturnDiagCounter+0x90>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	e003      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;

	case 0x12: return BusChrOvrCount;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <ReturnDiagCounter+0x94>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	e000      	b.n	8001136 <ReturnDiagCounter+0x6a>
	break;
	}
	return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000042c 	.word	0x2000042c
 8001148:	20000428 	.word	0x20000428
 800114c:	200005c4 	.word	0x200005c4
 8001150:	200006ec 	.word	0x200006ec
 8001154:	200006c8 	.word	0x200006c8
 8001158:	200006e0 	.word	0x200006e0
 800115c:	200006cc 	.word	0x200006cc
 8001160:	200006e8 	.word	0x200006e8

08001164 <ClearModbusCounters>:
void ClearModbusCounters()
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	  BusMsgCount=0;		//Bus Message Count
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <ClearModbusCounters+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
	  BusCommErrCount=0; 	//Bus Communication Error Count
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <ClearModbusCounters+0x44>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
	  SlaveExErrCount=0;	//Bus Exception Error Count
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <ClearModbusCounters+0x48>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
	  SlaveMsgCount=0;		//Slave Message Count
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <ClearModbusCounters+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
	  SlaveNoRspCount=0;	//Slave No Response Count
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <ClearModbusCounters+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
	  SlaveNAKCount=0;		//Slave NAK Count
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <ClearModbusCounters+0x54>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
	  SlaveBusyCount=0;		//Slave Busy Count
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <ClearModbusCounters+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
	  BusChrOvrCount=0;		//Bus Character Overrun Count
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <ClearModbusCounters+0x5c>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000042c 	.word	0x2000042c
 80011a8:	20000428 	.word	0x20000428
 80011ac:	200005c4 	.word	0x200005c4
 80011b0:	200006ec 	.word	0x200006ec
 80011b4:	200006c8 	.word	0x200006c8
 80011b8:	200006e0 	.word	0x200006e0
 80011bc:	200006cc 	.word	0x200006cc
 80011c0:	200006e8 	.word	0x200006e8

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f000 fb7e 	bl	80018c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f818 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f000 f93a 	bl	8001448 <MX_GPIO_Init>
  MX_TIM6_Init();
 80011d4:	f000 f880 	bl	80012d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80011d8:	f000 f8c2 	bl	8001360 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80011dc:	f000 f904 	bl	80013e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  MB_Init();
 80011e0:	f7ff f9c8 	bl	8000574 <MB_Init>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  if(HoldingRegisters[3] == 10)
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <main+0x34>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b0a      	cmp	r3, #10
 80011ea:	d1fb      	bne.n	80011e4 <main+0x20>
	 	  {
		  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2120      	movs	r1, #32
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <main+0x38>)
 80011f2:	f000 fea1 	bl	8001f38 <HAL_GPIO_WritePin>
	  if(HoldingRegisters[3] == 10)
 80011f6:	e7f5      	b.n	80011e4 <main+0x20>
 80011f8:	20000434 	.word	0x20000434
 80011fc:	40020000 	.word	0x40020000

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2234      	movs	r2, #52	; 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fc84 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <SystemClock_Config+0xd0>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <SystemClock_Config+0xd0>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001232:	6413      	str	r3, [r2, #64]	; 0x40
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <SystemClock_Config+0xd0>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <SystemClock_Config+0xd4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <SystemClock_Config+0xd4>)
 800124e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <SystemClock_Config+0xd4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001260:	2301      	movs	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001268:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001278:	233c      	movs	r3, #60	; 0x3c
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4618      	mov	r0, r3
 800128e:	f001 f927 	bl	80024e0 <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001298:	f000 f946 	bl	8001528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	230f      	movs	r3, #15
 800129e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a0:	2302      	movs	r3, #2
 80012a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fe57 	bl	8001f6c <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012c4:	f000 f930 	bl	8001528 <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3750      	adds	r7, #80	; 0x50
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM6_Init+0x80>)
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <MX_TIM6_Init+0x84>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 60-1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM6_Init+0x80>)
 80012ee:	223b      	movs	r2, #59	; 0x3b
 80012f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM6_Init+0x80>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 130-1;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_TIM6_Init+0x80>)
 80012fa:	2281      	movs	r2, #129	; 0x81
 80012fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_TIM6_Init+0x80>)
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001304:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_TIM6_Init+0x80>)
 8001306:	f001 fb45 	bl	8002994 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001310:	f000 f90a 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM6_Init+0x80>)
 8001322:	f001 fd3d 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800132c:	f000 f8fc 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
   TIM6->DIER |=1U;	//ENABLE COUNTER OVER FLOW INTERRUPT
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_TIM6_Init+0x84>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <MX_TIM6_Init+0x84>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	60d3      	str	r3, [r2, #12]
   TIM6->SR =0U;		//CLEAR INTERRUPT BIT
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_TIM6_Init+0x84>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
   TIM6->CR1 &=~(1U);	//STOP TIMER
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_TIM6_Init+0x84>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <MX_TIM6_Init+0x84>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM6_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200006f4 	.word	0x200006f4
 800135c:	40001000 	.word	0x40001000

08001360 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_TIM7_Init+0x80>)
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_TIM7_Init+0x84>)
 8001372:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 60-1;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM7_Init+0x80>)
 8001376:	223b      	movs	r2, #59	; 0x3b
 8001378:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_TIM7_Init+0x80>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 304-1;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_TIM7_Init+0x80>)
 8001382:	f240 122f 	movw	r2, #303	; 0x12f
 8001386:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_TIM7_Init+0x80>)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_TIM7_Init+0x80>)
 8001390:	f001 fb00 	bl	8002994 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800139a:	f000 f8c5 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM7_Init+0x80>)
 80013ac:	f001 fcf8 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80013b6:	f000 f8b7 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  	TIM7->DIER |=1U;	//ENABLE COUNTER OVER FLOW INTERRUPT
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_TIM7_Init+0x84>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <MX_TIM7_Init+0x84>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	60d3      	str	r3, [r2, #12]
    TIM7->SR =0U;		//CLEAR INTERRUPT BIT
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <MX_TIM7_Init+0x84>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
    TIM7->CR1 &=~(1U);
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <MX_TIM7_Init+0x84>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <MX_TIM7_Init+0x84>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000774 	.word	0x20000774
 80013e4:	40001400 	.word	0x40001400

080013e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_USART2_UART_Init+0x58>)
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <MX_USART2_UART_Init+0x5c>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_USART2_UART_Init+0x58>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART2_UART_Init+0x58>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <MX_USART2_UART_Init+0x58>)
 8001420:	f001 fd4e 	bl	8002ec0 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f87d 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART2->CR1 |=(1<<5U);
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <MX_USART2_UART_Init+0x5c>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <MX_USART2_UART_Init+0x5c>)
 8001434:	f043 0320 	orr.w	r3, r3, #32
 8001438:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000734 	.word	0x20000734
 8001444:	40004400 	.word	0x40004400

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_GPIO_Init+0xd0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <MX_GPIO_Init+0xd4>)
 80014d4:	f000 fd30 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_GPIO_Init+0xd8>)
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_GPIO_Init+0xdc>)
 80014ee:	f000 fb91 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014f2:	2320      	movs	r3, #32
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_GPIO_Init+0xd4>)
 800150a:	f000 fb83 	bl	8001c14 <HAL_GPIO_Init>

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	10210000 	.word	0x10210000
 8001524:	40020800 	.word	0x40020800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_MspInit+0x4c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x4c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001576:	2007      	movs	r0, #7
 8001578:	f000 fae8 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_TIM_Base_MspInit+0x80>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d116      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_TIM_Base_MspInit+0x84>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_TIM_Base_MspInit+0x84>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_TIM_Base_MspInit+0x84>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2036      	movs	r0, #54	; 0x36
 80015bc:	f000 fad1 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c0:	2036      	movs	r0, #54	; 0x36
 80015c2:	f000 faea 	bl	8001b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80015c6:	e01a      	b.n	80015fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_TIM_Base_MspInit+0x88>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d115      	bne.n	80015fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_TIM_Base_MspInit+0x84>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_TIM_Base_MspInit+0x84>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_TIM_Base_MspInit+0x84>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2037      	movs	r0, #55	; 0x37
 80015f4:	f000 fab5 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015f8:	2037      	movs	r0, #55	; 0x37
 80015fa:	f000 face 	bl	8001b9a <HAL_NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40001000 	.word	0x40001000
 800160c:	40023800 	.word	0x40023800
 8001610:	40001400 	.word	0x40001400

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_UART_MspInit+0x94>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d133      	bne.n	800169e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_UART_MspInit+0x98>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_UART_MspInit+0x98>)
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_UART_MspInit+0x98>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_UART_MspInit+0x98>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_UART_MspInit+0x98>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_UART_MspInit+0x98>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800166e:	230c      	movs	r3, #12
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167e:	2307      	movs	r3, #7
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <HAL_UART_MspInit+0x9c>)
 800168a:	f000 fac3 	bl	8001c14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2026      	movs	r0, #38	; 0x26
 8001694:	f000 fa65 	bl	8001b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001698:	2026      	movs	r0, #38	; 0x26
 800169a:	f000 fa7e 	bl	8001b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40004400 	.word	0x40004400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 f930 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	TIM6->CR1 &=~(1U);	//DISABLE TIMER 6
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <USART2_IRQHandler+0x98>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <USART2_IRQHandler+0x98>)
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6013      	str	r3, [r2, #0]
		TIM7->CR1 &=~(1U);	//DISABLE TIMER 7
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <USART2_IRQHandler+0x9c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a21      	ldr	r2, [pc, #132]	; (80017ac <USART2_IRQHandler+0x9c>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]
		TIM6->CNT=0U;		//CLEAR COUNTER VALUES
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <USART2_IRQHandler+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
		TIM7->CNT=0U;		//CLEAR
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <USART2_IRQHandler+0x9c>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

		//Check if RS232 Frame Error
		if(USART2->SR & (1<<3U))
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <USART2_IRQHandler+0xa0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <USART2_IRQHandler+0x44>
		{
			BusChrOvrCount+=1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <USART2_IRQHandler+0xa4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <USART2_IRQHandler+0xa4>)
 800174c:	6013      	str	r3, [r2, #0]
			USART2->SR=1<<3U;	//CLEAR OVERRUN FLAG
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <USART2_IRQHandler+0xa0>)
 8001750:	2208      	movs	r2, #8
 8001752:	601a      	str	r2, [r3, #0]
			//wE ARE NOT YET CLEAR ON OUR PROTOCOL IF I RECEIVED AN OVERRUN
		}
		if(DataPos>=256)
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <USART2_IRQHandler+0xa8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2bff      	cmp	r3, #255	; 0xff
 800175a:	d903      	bls.n	8001764 <USART2_IRQHandler+0x54>
		{
			DataPos=0;
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <USART2_IRQHandler+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e00f      	b.n	8001784 <USART2_IRQHandler+0x74>
		}
		else
		{
			  data_in[DataPos]=USART2->DR;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <USART2_IRQHandler+0xa0>)
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <USART2_IRQHandler+0xa8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b2d1      	uxtb	r1, r2
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <USART2_IRQHandler+0xac>)
 8001770:	54d1      	strb	r1, [r2, r3]
			  DataPos+=1;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <USART2_IRQHandler+0xa8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <USART2_IRQHandler+0xa8>)
 800177a:	6013      	str	r3, [r2, #0]
			  TotalCharsReceived =DataPos;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <USART2_IRQHandler+0xa8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <USART2_IRQHandler+0xb0>)
 8001782:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001784:	480f      	ldr	r0, [pc, #60]	; (80017c4 <USART2_IRQHandler+0xb4>)
 8001786:	f001 fbe9 	bl	8002f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  TIM6->CR1 |=1U;	//ENABLE TI2MER 6
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <USART2_IRQHandler+0x98>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <USART2_IRQHandler+0x98>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6013      	str	r3, [r2, #0]
  TIM7->CR1 |=1U;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <USART2_IRQHandler+0x9c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <USART2_IRQHandler+0x9c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40001000 	.word	0x40001000
 80017ac:	40001400 	.word	0x40001400
 80017b0:	40004400 	.word	0x40004400
 80017b4:	200006e8 	.word	0x200006e8
 80017b8:	200006d0 	.word	0x200006d0
 80017bc:	200005c8 	.word	0x200005c8
 80017c0:	200006d8 	.word	0x200006d8
 80017c4:	20000734 	.word	0x20000734

080017c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(TIM6->SR ==1U)
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <TIM6_DAC_IRQHandler+0x34>)
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10e      	bne.n	80017f2 <TIM6_DAC_IRQHandler+0x2a>
			{
				TIM6->CR1 &=~(1U);	//STOP THE 1.5CHAR TIMER
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <TIM6_DAC_IRQHandler+0x34>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <TIM6_DAC_IRQHandler+0x34>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]
				TIM6->CNT=0U;		//CLEAR COUNTER
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <TIM6_DAC_IRQHandler+0x34>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
				DataPos=0u;			//clear the Indexer and start over
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <TIM6_DAC_IRQHandler+0x38>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
				TIM6->SR = 0U;		//CLEARING 1.5CHAR TIMER INTERRUPT (IF ANY)
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <TIM6_DAC_IRQHandler+0x34>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
			}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f2:	4804      	ldr	r0, [pc, #16]	; (8001804 <TIM6_DAC_IRQHandler+0x3c>)
 80017f4:	f001 f8f9 	bl	80029ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40001000 	.word	0x40001000
 8001800:	200006d0 	.word	0x200006d0
 8001804:	200006f4 	.word	0x200006f4

08001808 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if (TIM7->SR==1U)
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <TIM7_IRQHandler+0x34>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10d      	bne.n	8001830 <TIM7_IRQHandler+0x28>
		{
			TIM7->CR1 &=~(1U);		//STOP 3.5CHAR TIMER
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <TIM7_IRQHandler+0x34>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a08      	ldr	r2, [pc, #32]	; (800183c <TIM7_IRQHandler+0x34>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]
			TIM7->SR=0U;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <TIM7_IRQHandler+0x34>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
			DataPos=0u;			//clear the Indexer
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <TIM7_IRQHandler+0x38>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
			CheckMBPDU();		//Process Modbus frame
 800182c:	f7fe fec2 	bl	80005b4 <CheckMBPDU>
		}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <TIM7_IRQHandler+0x3c>)
 8001832:	f001 f8da 	bl	80029ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40001400 	.word	0x40001400
 8001840:	200006d0 	.word	0x200006d0
 8001844:	20000774 	.word	0x20000774

08001848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <SystemInit+0x28>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a07      	ldr	r2, [pc, #28]	; (8001870 <SystemInit+0x28>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SystemInit+0x28>)
 800185e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001862:	609a      	str	r2, [r3, #8]
#endif
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001878:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800187a:	e003      	b.n	8001884 <LoopCopyDataInit>

0800187c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800187e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001880:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001882:	3104      	adds	r1, #4

08001884 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001888:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800188a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800188c:	d3f6      	bcc.n	800187c <CopyDataInit>
  ldr  r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001890:	e002      	b.n	8001898 <LoopFillZerobss>

08001892 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001892:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001894:	f842 3b04 	str.w	r3, [r2], #4

08001898 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800189a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800189c:	d3f9      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800189e:	f7ff ffd3 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f002 f917 	bl	8003ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fc8d 	bl	80011c4 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018b0:	08003b6c 	.word	0x08003b6c
  ldr  r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018b8:	20000404 	.word	0x20000404
  ldr  r2, =_sbss
 80018bc:	20000404 	.word	0x20000404
  ldr  r3, = _ebss
 80018c0:	200007b8 	.word	0x200007b8

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_Init+0x40>)
 80018d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_Init+0x40>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_Init+0x40>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 f92b 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f808 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fc:	f7ff fe1c 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00

0800190c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x54>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x58>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f943 	bl	8001bb6 <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 f90b 	bl	8001b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <HAL_InitTick+0x5c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200003f8 	.word	0x200003f8
 8001964:	20000400 	.word	0x20000400
 8001968:	200003fc 	.word	0x200003fc

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000400 	.word	0x20000400
 8001990:	200007b4 	.word	0x200007b4

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200007b4 	.word	0x200007b4

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <__NVIC_EnableIRQ+0x38>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b18:	d301      	bcc.n	8001b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00f      	b.n	8001b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <SysTick_Config+0x40>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b26:	210f      	movs	r1, #15
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f7ff ff8e 	bl	8001a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SysTick_Config+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SysTick_Config+0x40>)
 8001b38:	2207      	movs	r2, #7
 8001b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000e010 	.word	0xe000e010

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff29 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b74:	f7ff ff3e 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	f7ff ff8e 	bl	8001aa0 <NVIC_EncodePriority>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff5d 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff31 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffa2 	bl	8001b08 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00c      	b.n	8001c06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2205      	movs	r2, #5
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e165      	b.n	8001efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8154 	bne.w	8001ef6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d00b      	beq.n	8001c6e <HAL_GPIO_Init+0x5a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c62:	2b11      	cmp	r3, #17
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0xfc>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b12      	cmp	r3, #18
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	69b9      	ldr	r1, [r7, #24]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80ae 	beq.w	8001ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a5b      	ldr	r2, [pc, #364]	; (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db6:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4e      	ldr	r2, [pc, #312]	; (8001f18 <HAL_GPIO_Init+0x304>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4d      	ldr	r2, [pc, #308]	; (8001f1c <HAL_GPIO_Init+0x308>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x216>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_GPIO_Init+0x30c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x212>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <HAL_GPIO_Init+0x310>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x20e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_GPIO_Init+0x314>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x20a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a49      	ldr	r2, [pc, #292]	; (8001f2c <HAL_GPIO_Init+0x318>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x206>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a48      	ldr	r2, [pc, #288]	; (8001f30 <HAL_GPIO_Init+0x31c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x202>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00c      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00a      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e40:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e4e:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e72:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_GPIO_Init+0x320>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f67f ae96 	bls.w	8001c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	3724      	adds	r7, #36	; 0x24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40013800 	.word	0x40013800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f54:	e003      	b.n	8001f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	041a      	lsls	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	619a      	str	r2, [r3, #24]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0cc      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d90c      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d044      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d119      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d003      	beq.n	800202a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002026:	2b03      	cmp	r3, #3
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e067      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4934      	ldr	r1, [pc, #208]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fc9a 	bl	8001994 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fc96 	bl	8001994 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e04f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d20c      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f855 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 80020f6:	4601      	mov	r1, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	fa21 f303 	lsr.w	r3, r1, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fbfa 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00
 8002128:	40023800 	.word	0x40023800
 800212c:	08003b44 	.word	0x08003b44
 8002130:	200003f8 	.word	0x200003f8
 8002134:	200003fc 	.word	0x200003fc

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_GetHCLKFreq+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200003f8 	.word	0x200003f8

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002154:	f7ff fff0 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002158:	4601      	mov	r1, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	0a9b      	lsrs	r3, r3, #10
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4a03      	ldr	r2, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	fa21 f303 	lsr.w	r3, r1, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	08003b54 	.word	0x08003b54

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800217c:	f7ff ffdc 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002180:	4601      	mov	r1, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0b5b      	lsrs	r3, r3, #13
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4a03      	ldr	r2, [pc, #12]	; (800219c <HAL_RCC_GetPCLK2Freq+0x24>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	08003b54 	.word	0x08003b54

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ba:	4bc6      	ldr	r3, [pc, #792]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	f200 817e 	bhi.w	80024c4 <HAL_RCC_GetSysClockFreq+0x324>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <HAL_RCC_GetSysClockFreq+0x30>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	08002205 	.word	0x08002205
 80021d4:	080024c5 	.word	0x080024c5
 80021d8:	080024c5 	.word	0x080024c5
 80021dc:	080024c5 	.word	0x080024c5
 80021e0:	0800220b 	.word	0x0800220b
 80021e4:	080024c5 	.word	0x080024c5
 80021e8:	080024c5 	.word	0x080024c5
 80021ec:	080024c5 	.word	0x080024c5
 80021f0:	08002211 	.word	0x08002211
 80021f4:	080024c5 	.word	0x080024c5
 80021f8:	080024c5 	.word	0x080024c5
 80021fc:	080024c5 	.word	0x080024c5
 8002200:	0800236d 	.word	0x0800236d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4bb4      	ldr	r3, [pc, #720]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x338>)
 8002206:	613b      	str	r3, [r7, #16]
       break;
 8002208:	e15f      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220a:	4bb4      	ldr	r3, [pc, #720]	; (80024dc <HAL_RCC_GetSysClockFreq+0x33c>)
 800220c:	613b      	str	r3, [r7, #16]
      break;
 800220e:	e15c      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002210:	4bb0      	ldr	r3, [pc, #704]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002218:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221a:	4bae      	ldr	r3, [pc, #696]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d04a      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002226:	4bab      	ldr	r3, [pc, #684]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	f04f 0400 	mov.w	r4, #0
 8002230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	ea03 0501 	and.w	r5, r3, r1
 800223c:	ea04 0602 	and.w	r6, r4, r2
 8002240:	4629      	mov	r1, r5
 8002242:	4632      	mov	r2, r6
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	f04f 0400 	mov.w	r4, #0
 800224c:	0154      	lsls	r4, r2, #5
 800224e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002252:	014b      	lsls	r3, r1, #5
 8002254:	4619      	mov	r1, r3
 8002256:	4622      	mov	r2, r4
 8002258:	1b49      	subs	r1, r1, r5
 800225a:	eb62 0206 	sbc.w	r2, r2, r6
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	0194      	lsls	r4, r2, #6
 8002268:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800226c:	018b      	lsls	r3, r1, #6
 800226e:	1a5b      	subs	r3, r3, r1
 8002270:	eb64 0402 	sbc.w	r4, r4, r2
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	00e2      	lsls	r2, r4, #3
 800227e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002282:	00d9      	lsls	r1, r3, #3
 8002284:	460b      	mov	r3, r1
 8002286:	4614      	mov	r4, r2
 8002288:	195b      	adds	r3, r3, r5
 800228a:	eb44 0406 	adc.w	r4, r4, r6
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	0262      	lsls	r2, r4, #9
 8002298:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800229c:	0259      	lsls	r1, r3, #9
 800229e:	460b      	mov	r3, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	4621      	mov	r1, r4
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f04f 0400 	mov.w	r4, #0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	f7fd ffa8 	bl	8000204 <__aeabi_uldivmod>
 80022b4:	4603      	mov	r3, r0
 80022b6:	460c      	mov	r4, r1
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e049      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022bc:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	f04f 0400 	mov.w	r4, #0
 80022c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	ea03 0501 	and.w	r5, r3, r1
 80022d2:	ea04 0602 	and.w	r6, r4, r2
 80022d6:	4629      	mov	r1, r5
 80022d8:	4632      	mov	r2, r6
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	f04f 0400 	mov.w	r4, #0
 80022e2:	0154      	lsls	r4, r2, #5
 80022e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022e8:	014b      	lsls	r3, r1, #5
 80022ea:	4619      	mov	r1, r3
 80022ec:	4622      	mov	r2, r4
 80022ee:	1b49      	subs	r1, r1, r5
 80022f0:	eb62 0206 	sbc.w	r2, r2, r6
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	f04f 0400 	mov.w	r4, #0
 80022fc:	0194      	lsls	r4, r2, #6
 80022fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002302:	018b      	lsls	r3, r1, #6
 8002304:	1a5b      	subs	r3, r3, r1
 8002306:	eb64 0402 	sbc.w	r4, r4, r2
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	00e2      	lsls	r2, r4, #3
 8002314:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002318:	00d9      	lsls	r1, r3, #3
 800231a:	460b      	mov	r3, r1
 800231c:	4614      	mov	r4, r2
 800231e:	195b      	adds	r3, r3, r5
 8002320:	eb44 0406 	adc.w	r4, r4, r6
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	02a2      	lsls	r2, r4, #10
 800232e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002332:	0299      	lsls	r1, r3, #10
 8002334:	460b      	mov	r3, r1
 8002336:	4614      	mov	r4, r2
 8002338:	4618      	mov	r0, r3
 800233a:	4621      	mov	r1, r4
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f04f 0400 	mov.w	r4, #0
 8002342:	461a      	mov	r2, r3
 8002344:	4623      	mov	r3, r4
 8002346:	f7fd ff5d 	bl	8000204 <__aeabi_uldivmod>
 800234a:	4603      	mov	r3, r0
 800234c:	460c      	mov	r4, r1
 800234e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002350:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	613b      	str	r3, [r7, #16]
      break;
 800236a:	e0ae      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002374:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002376:	4b57      	ldr	r3, [pc, #348]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d04a      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	099b      	lsrs	r3, r3, #6
 8002388:	f04f 0400 	mov.w	r4, #0
 800238c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	ea03 0501 	and.w	r5, r3, r1
 8002398:	ea04 0602 	and.w	r6, r4, r2
 800239c:	4629      	mov	r1, r5
 800239e:	4632      	mov	r2, r6
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	f04f 0400 	mov.w	r4, #0
 80023a8:	0154      	lsls	r4, r2, #5
 80023aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023ae:	014b      	lsls	r3, r1, #5
 80023b0:	4619      	mov	r1, r3
 80023b2:	4622      	mov	r2, r4
 80023b4:	1b49      	subs	r1, r1, r5
 80023b6:	eb62 0206 	sbc.w	r2, r2, r6
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	f04f 0400 	mov.w	r4, #0
 80023c2:	0194      	lsls	r4, r2, #6
 80023c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023c8:	018b      	lsls	r3, r1, #6
 80023ca:	1a5b      	subs	r3, r3, r1
 80023cc:	eb64 0402 	sbc.w	r4, r4, r2
 80023d0:	f04f 0100 	mov.w	r1, #0
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	00e2      	lsls	r2, r4, #3
 80023da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023de:	00d9      	lsls	r1, r3, #3
 80023e0:	460b      	mov	r3, r1
 80023e2:	4614      	mov	r4, r2
 80023e4:	195b      	adds	r3, r3, r5
 80023e6:	eb44 0406 	adc.w	r4, r4, r6
 80023ea:	f04f 0100 	mov.w	r1, #0
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	0262      	lsls	r2, r4, #9
 80023f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023f8:	0259      	lsls	r1, r3, #9
 80023fa:	460b      	mov	r3, r1
 80023fc:	4614      	mov	r4, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	4621      	mov	r1, r4
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f04f 0400 	mov.w	r4, #0
 8002408:	461a      	mov	r2, r3
 800240a:	4623      	mov	r3, r4
 800240c:	f7fd fefa 	bl	8000204 <__aeabi_uldivmod>
 8002410:	4603      	mov	r3, r0
 8002412:	460c      	mov	r4, r1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e049      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	ea03 0501 	and.w	r5, r3, r1
 800242e:	ea04 0602 	and.w	r6, r4, r2
 8002432:	4629      	mov	r1, r5
 8002434:	4632      	mov	r2, r6
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	f04f 0400 	mov.w	r4, #0
 800243e:	0154      	lsls	r4, r2, #5
 8002440:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002444:	014b      	lsls	r3, r1, #5
 8002446:	4619      	mov	r1, r3
 8002448:	4622      	mov	r2, r4
 800244a:	1b49      	subs	r1, r1, r5
 800244c:	eb62 0206 	sbc.w	r2, r2, r6
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	f04f 0400 	mov.w	r4, #0
 8002458:	0194      	lsls	r4, r2, #6
 800245a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	1a5b      	subs	r3, r3, r1
 8002462:	eb64 0402 	sbc.w	r4, r4, r2
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	00e2      	lsls	r2, r4, #3
 8002470:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002474:	00d9      	lsls	r1, r3, #3
 8002476:	460b      	mov	r3, r1
 8002478:	4614      	mov	r4, r2
 800247a:	195b      	adds	r3, r3, r5
 800247c:	eb44 0406 	adc.w	r4, r4, r6
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	02a2      	lsls	r2, r4, #10
 800248a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800248e:	0299      	lsls	r1, r3, #10
 8002490:	460b      	mov	r3, r1
 8002492:	4614      	mov	r4, r2
 8002494:	4618      	mov	r0, r3
 8002496:	4621      	mov	r1, r4
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f04f 0400 	mov.w	r4, #0
 800249e:	461a      	mov	r2, r3
 80024a0:	4623      	mov	r3, r4
 80024a2:	f7fd feaf 	bl	8000204 <__aeabi_uldivmod>
 80024a6:	4603      	mov	r3, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x334>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	0f1b      	lsrs	r3, r3, #28
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	613b      	str	r3, [r7, #16]
      break;
 80024c2:	e002      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x338>)
 80024c6:	613b      	str	r3, [r7, #16]
      break;
 80024c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ca:	693b      	ldr	r3, [r7, #16]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	007a1200 	.word	0x007a1200

080024e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8083 	beq.w	8002600 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024fa:	4b95      	ldr	r3, [pc, #596]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d019      	beq.n	800253a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002506:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002512:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251e:	d00c      	beq.n	800253a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002520:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d112      	bne.n	8002552 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252c:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d10b      	bne.n	8002552 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	4b85      	ldr	r3, [pc, #532]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d05b      	beq.n	80025fe <HAL_RCC_OscConfig+0x11e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d157      	bne.n	80025fe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e216      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x8a>
 800255c:	4b7c      	ldr	r3, [pc, #496]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7b      	ldr	r2, [pc, #492]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e01d      	b.n	80025a6 <HAL_RCC_OscConfig+0xc6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002572:	d10c      	bne.n	800258e <HAL_RCC_OscConfig+0xae>
 8002574:	4b76      	ldr	r3, [pc, #472]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a75      	ldr	r2, [pc, #468]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800257a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b73      	ldr	r3, [pc, #460]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a72      	ldr	r2, [pc, #456]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e00b      	b.n	80025a6 <HAL_RCC_OscConfig+0xc6>
 800258e:	4b70      	ldr	r3, [pc, #448]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6f      	ldr	r2, [pc, #444]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6d      	ldr	r3, [pc, #436]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6c      	ldr	r2, [pc, #432]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80025a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff f9f1 	bl	8001994 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b6:	f7ff f9ed 	bl	8001994 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1db      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0xd6>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff f9dd 	bl	8001994 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025de:	f7ff f9d9 	bl	8001994 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	; 0x64
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1c7      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f0:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0xfe>
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d06f      	beq.n	80026ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b00      	cmp	r3, #0
 8002616:	d017      	beq.n	8002648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002618:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002620:	2b08      	cmp	r3, #8
 8002622:	d105      	bne.n	8002630 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002624:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002630:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d11c      	bne.n	8002676 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263c:	4b44      	ldr	r3, [pc, #272]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d116      	bne.n	8002676 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002648:	4b41      	ldr	r3, [pc, #260]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_OscConfig+0x180>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e18f      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4938      	ldr	r1, [pc, #224]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002674:	e03a      	b.n	80026ec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d020      	beq.n	80026c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267e:	4b35      	ldr	r3, [pc, #212]	; (8002754 <HAL_RCC_OscConfig+0x274>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff f986 	bl	8001994 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268c:	f7ff f982 	bl	8001994 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e170      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4925      	ldr	r1, [pc, #148]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
 80026be:	e015      	b.n	80026ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x274>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff f965 	bl	8001994 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7ff f961 	bl	8001994 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e14f      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d037      	beq.n	8002768 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_RCC_OscConfig+0x278>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7ff f945 	bl	8001994 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7ff f941 	bl	8001994 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e12f      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_OscConfig+0x270>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x22e>
 800272c:	e01c      	b.n	8002768 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_OscConfig+0x278>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f92e 	bl	8001994 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	e00f      	b.n	800275c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f92a 	bl	8001994 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d908      	bls.n	800275c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e118      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	42470000 	.word	0x42470000
 8002758:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	4b8a      	ldr	r3, [pc, #552]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e9      	bne.n	800273c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8097 	beq.w	80028a4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b83      	ldr	r3, [pc, #524]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b7f      	ldr	r3, [pc, #508]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a7e      	ldr	r2, [pc, #504]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b7c      	ldr	r3, [pc, #496]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b79      	ldr	r3, [pc, #484]	; (800298c <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a75      	ldr	r2, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7ff f8e9 	bl	8001994 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7ff f8e5 	bl	8001994 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0d3      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b6c      	ldr	r3, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x4ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x31a>
 80027ec:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a65      	ldr	r2, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	e01c      	b.n	8002834 <HAL_RCC_OscConfig+0x354>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x33c>
 8002802:	4b61      	ldr	r3, [pc, #388]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a60      	ldr	r2, [pc, #384]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	4b5e      	ldr	r3, [pc, #376]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a5d      	ldr	r2, [pc, #372]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0x354>
 800281c:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a59      	ldr	r2, [pc, #356]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	4b57      	ldr	r3, [pc, #348]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a56      	ldr	r2, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800282e:	f023 0304 	bic.w	r3, r3, #4
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d015      	beq.n	8002868 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7ff f8aa 	bl	8001994 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002842:	e00a      	b.n	800285a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7ff f8a6 	bl	8001994 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e092      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285a:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0ee      	beq.n	8002844 <HAL_RCC_OscConfig+0x364>
 8002866:	e014      	b.n	8002892 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7ff f894 	bl	8001994 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002870:	f7ff f890 	bl	8001994 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e07c      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ee      	bne.n	8002870 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d068      	beq.n	800297e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d060      	beq.n	800297a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d145      	bne.n	800294c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_RCC_OscConfig+0x4b0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7ff f865 	bl	8001994 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7ff f861 	bl	8001994 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e04f      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	019b      	lsls	r3, r3, #6
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	071b      	lsls	r3, r3, #28
 8002918:	491b      	ldr	r1, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_RCC_OscConfig+0x4b0>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f836 	bl	8001994 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f832 	bl	8001994 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e020      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x44c>
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_RCC_OscConfig+0x4b0>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff f81f 	bl	8001994 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff f81b 	bl	8001994 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e009      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_OscConfig+0x4a8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x47a>
 8002978:	e001      	b.n	800297e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	40007000 	.word	0x40007000
 8002990:	42470060 	.word	0x42470060

08002994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e01d      	b.n	80029e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fde4 	bl	8001588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f000 f944 	bl	8002c60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d122      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d11b      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0202 	mvn.w	r2, #2
 8002a16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f8f8 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002a32:	e005      	b.n	8002a40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8ea 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8fb 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d122      	bne.n	8002a9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d11b      	bne.n	8002a9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0204 	mvn.w	r2, #4
 8002a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f8ce 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002a86:	e005      	b.n	8002a94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8c0 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8d1 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d122      	bne.n	8002aee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11b      	bne.n	8002aee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0208 	mvn.w	r2, #8
 8002abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f8a4 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f896 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8a7 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d122      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d11b      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0210 	mvn.w	r2, #16
 8002b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2208      	movs	r2, #8
 8002b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f87a 	bl	8002c22 <HAL_TIM_IC_CaptureCallback>
 8002b2e:	e005      	b.n	8002b3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f86c 	bl	8002c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f87d 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10e      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0201 	mvn.w	r2, #1
 8002b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f846 	bl	8002bfa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d10e      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f989 	bl	8002eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d10e      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d107      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f842 	bl	8002c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0220 	mvn.w	r2, #32
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f953 	bl	8002e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <TIM_Base_SetConfig+0x114>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d013      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d00f      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a3d      	ldr	r2, [pc, #244]	; (8002d78 <TIM_Base_SetConfig+0x118>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3c      	ldr	r2, [pc, #240]	; (8002d7c <TIM_Base_SetConfig+0x11c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d007      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3b      	ldr	r2, [pc, #236]	; (8002d80 <TIM_Base_SetConfig+0x120>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <TIM_Base_SetConfig+0x124>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d108      	bne.n	8002cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <TIM_Base_SetConfig+0x114>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02b      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d027      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <TIM_Base_SetConfig+0x118>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d023      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <TIM_Base_SetConfig+0x11c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01f      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <TIM_Base_SetConfig+0x120>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01b      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <TIM_Base_SetConfig+0x124>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d017      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <TIM_Base_SetConfig+0x128>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <TIM_Base_SetConfig+0x12c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00f      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <TIM_Base_SetConfig+0x130>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <TIM_Base_SetConfig+0x134>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <TIM_Base_SetConfig+0x138>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <TIM_Base_SetConfig+0x13c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <TIM_Base_SetConfig+0x114>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0xf8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <TIM_Base_SetConfig+0x124>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d103      	bne.n	8002d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	615a      	str	r2, [r3, #20]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40010400 	.word	0x40010400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800
 8002d94:	40001800 	.word	0x40001800
 8002d98:	40001c00 	.word	0x40001c00
 8002d9c:	40002000 	.word	0x40002000

08002da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e05a      	b.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d01d      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10c      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40010400 	.word	0x40010400
 8002e90:	40014000 	.word	0x40014000
 8002e94:	40001800 	.word	0x40001800

08002e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e03f      	b.n	8002f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fb94 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa69 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10d      	bne.n	8002fae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_UART_IRQHandler+0x52>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f996 	bl	80032d8 <UART_Receive_IT>
      return;
 8002fac:	e0d1      	b.n	8003152 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80b0 	beq.w	8003116 <HAL_UART_IRQHandler+0x1ba>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_UART_IRQHandler+0x70>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80a5 	beq.w	8003116 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_UART_IRQHandler+0x90>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_UART_IRQHandler+0xb0>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	f043 0202 	orr.w	r2, r3, #2
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_UART_IRQHandler+0xd0>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00f      	beq.n	8003056 <HAL_UART_IRQHandler+0xfa>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <HAL_UART_IRQHandler+0xee>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	f043 0208 	orr.w	r2, r3, #8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d078      	beq.n	8003150 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_UART_IRQHandler+0x11c>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f930 	bl	80032d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_UART_IRQHandler+0x144>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d031      	beq.n	8003104 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f879 	bl	8003198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d123      	bne.n	80030fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_UART_IRQHandler+0x1fc>)
 80030d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe fd78 	bl	8001bce <HAL_DMA_Abort_IT>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d016      	beq.n	8003112 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030ee:	4610      	mov	r0, r2
 80030f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f2:	e00e      	b.n	8003112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f845 	bl	8003184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fa:	e00a      	b.n	8003112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f841 	bl	8003184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	e006      	b.n	8003112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f83d 	bl	8003184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003110:	e01e      	b.n	8003150 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003112:	bf00      	nop
    return;
 8003114:	e01c      	b.n	8003150 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_UART_IRQHandler+0x1d6>
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f866 	bl	80031fc <UART_Transmit_IT>
    return;
 8003130:	e00f      	b.n	8003152 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_UART_IRQHandler+0x1f6>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8ae 	bl	80032a8 <UART_EndTransmit_IT>
    return;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003150:	bf00      	nop
  }
}
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	080031d5 	.word	0x080031d5

0800315c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ffc8 	bl	8003184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b21      	cmp	r3, #33	; 0x21
 800320e:	d144      	bne.n	800329a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003218:	d11a      	bne.n	8003250 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	621a      	str	r2, [r3, #32]
 8003242:	e00e      	b.n	8003262 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]
 800324e:	e008      	b.n	8003262 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	1c59      	adds	r1, r3, #1
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6211      	str	r1, [r2, #32]
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29b      	uxth	r3, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4619      	mov	r1, r3
 8003270:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003284:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003294:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800329a:	2302      	movs	r3, #2
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff47 	bl	800315c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b22      	cmp	r3, #34	; 0x22
 80032ea:	d171      	bne.n	80033d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d123      	bne.n	800333e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10e      	bne.n	8003322 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
 8003320:	e029      	b.n	8003376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	b29b      	uxth	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
 800333c:	e01b      	b.n	8003376 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6858      	ldr	r0, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6291      	str	r1, [r2, #40]	; 0x28
 8003356:	b2c2      	uxtb	r2, r0
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e00c      	b.n	8003376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	1c58      	adds	r0, r3, #1
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6288      	str	r0, [r1, #40]	; 0x28
 800336e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003386:	2b00      	cmp	r3, #0
 8003388:	d120      	bne.n	80033cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0220 	bic.w	r2, r2, #32
 8003398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fed4 	bl	8003170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e002      	b.n	80033d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800341e:	f023 030c 	bic.w	r3, r3, #12
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	430b      	orrs	r3, r1
 800342a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344a:	f040 818b 	bne.w	8003764 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4ac1      	ldr	r2, [pc, #772]	; (8003758 <UART_SetConfig+0x37c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d005      	beq.n	8003464 <UART_SetConfig+0x88>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4abf      	ldr	r2, [pc, #764]	; (800375c <UART_SetConfig+0x380>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f040 80bd 	bne.w	80035de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7fe fe88 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 8003468:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	461d      	mov	r5, r3
 800346e:	f04f 0600 	mov.w	r6, #0
 8003472:	46a8      	mov	r8, r5
 8003474:	46b1      	mov	r9, r6
 8003476:	eb18 0308 	adds.w	r3, r8, r8
 800347a:	eb49 0409 	adc.w	r4, r9, r9
 800347e:	4698      	mov	r8, r3
 8003480:	46a1      	mov	r9, r4
 8003482:	eb18 0805 	adds.w	r8, r8, r5
 8003486:	eb49 0906 	adc.w	r9, r9, r6
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003496:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800349a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800349e:	4688      	mov	r8, r1
 80034a0:	4691      	mov	r9, r2
 80034a2:	eb18 0005 	adds.w	r0, r8, r5
 80034a6:	eb49 0106 	adc.w	r1, r9, r6
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461d      	mov	r5, r3
 80034b0:	f04f 0600 	mov.w	r6, #0
 80034b4:	196b      	adds	r3, r5, r5
 80034b6:	eb46 0406 	adc.w	r4, r6, r6
 80034ba:	461a      	mov	r2, r3
 80034bc:	4623      	mov	r3, r4
 80034be:	f7fc fea1 	bl	8000204 <__aeabi_uldivmod>
 80034c2:	4603      	mov	r3, r0
 80034c4:	460c      	mov	r4, r1
 80034c6:	461a      	mov	r2, r3
 80034c8:	4ba5      	ldr	r3, [pc, #660]	; (8003760 <UART_SetConfig+0x384>)
 80034ca:	fba3 2302 	umull	r2, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	461d      	mov	r5, r3
 80034d8:	f04f 0600 	mov.w	r6, #0
 80034dc:	46a9      	mov	r9, r5
 80034de:	46b2      	mov	sl, r6
 80034e0:	eb19 0309 	adds.w	r3, r9, r9
 80034e4:	eb4a 040a 	adc.w	r4, sl, sl
 80034e8:	4699      	mov	r9, r3
 80034ea:	46a2      	mov	sl, r4
 80034ec:	eb19 0905 	adds.w	r9, r9, r5
 80034f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003508:	4689      	mov	r9, r1
 800350a:	4692      	mov	sl, r2
 800350c:	eb19 0005 	adds.w	r0, r9, r5
 8003510:	eb4a 0106 	adc.w	r1, sl, r6
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	461d      	mov	r5, r3
 800351a:	f04f 0600 	mov.w	r6, #0
 800351e:	196b      	adds	r3, r5, r5
 8003520:	eb46 0406 	adc.w	r4, r6, r6
 8003524:	461a      	mov	r2, r3
 8003526:	4623      	mov	r3, r4
 8003528:	f7fc fe6c 	bl	8000204 <__aeabi_uldivmod>
 800352c:	4603      	mov	r3, r0
 800352e:	460c      	mov	r4, r1
 8003530:	461a      	mov	r2, r3
 8003532:	4b8b      	ldr	r3, [pc, #556]	; (8003760 <UART_SetConfig+0x384>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a86      	ldr	r2, [pc, #536]	; (8003760 <UART_SetConfig+0x384>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003554:	4498      	add	r8, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	461d      	mov	r5, r3
 800355a:	f04f 0600 	mov.w	r6, #0
 800355e:	46a9      	mov	r9, r5
 8003560:	46b2      	mov	sl, r6
 8003562:	eb19 0309 	adds.w	r3, r9, r9
 8003566:	eb4a 040a 	adc.w	r4, sl, sl
 800356a:	4699      	mov	r9, r3
 800356c:	46a2      	mov	sl, r4
 800356e:	eb19 0905 	adds.w	r9, r9, r5
 8003572:	eb4a 0a06 	adc.w	sl, sl, r6
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800358a:	4689      	mov	r9, r1
 800358c:	4692      	mov	sl, r2
 800358e:	eb19 0005 	adds.w	r0, r9, r5
 8003592:	eb4a 0106 	adc.w	r1, sl, r6
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	461d      	mov	r5, r3
 800359c:	f04f 0600 	mov.w	r6, #0
 80035a0:	196b      	adds	r3, r5, r5
 80035a2:	eb46 0406 	adc.w	r4, r6, r6
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	f7fc fe2b 	bl	8000204 <__aeabi_uldivmod>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <UART_SetConfig+0x384>)
 80035b6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2164      	movs	r1, #100	; 0x64
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	3332      	adds	r3, #50	; 0x32
 80035c8:	4a65      	ldr	r2, [pc, #404]	; (8003760 <UART_SetConfig+0x384>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 0207 	and.w	r2, r3, #7
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4442      	add	r2, r8
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	e26f      	b.n	8003abe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035de:	f7fe fdb7 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 80035e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	461d      	mov	r5, r3
 80035e8:	f04f 0600 	mov.w	r6, #0
 80035ec:	46a8      	mov	r8, r5
 80035ee:	46b1      	mov	r9, r6
 80035f0:	eb18 0308 	adds.w	r3, r8, r8
 80035f4:	eb49 0409 	adc.w	r4, r9, r9
 80035f8:	4698      	mov	r8, r3
 80035fa:	46a1      	mov	r9, r4
 80035fc:	eb18 0805 	adds.w	r8, r8, r5
 8003600:	eb49 0906 	adc.w	r9, r9, r6
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003610:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003614:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003618:	4688      	mov	r8, r1
 800361a:	4691      	mov	r9, r2
 800361c:	eb18 0005 	adds.w	r0, r8, r5
 8003620:	eb49 0106 	adc.w	r1, r9, r6
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	461d      	mov	r5, r3
 800362a:	f04f 0600 	mov.w	r6, #0
 800362e:	196b      	adds	r3, r5, r5
 8003630:	eb46 0406 	adc.w	r4, r6, r6
 8003634:	461a      	mov	r2, r3
 8003636:	4623      	mov	r3, r4
 8003638:	f7fc fde4 	bl	8000204 <__aeabi_uldivmod>
 800363c:	4603      	mov	r3, r0
 800363e:	460c      	mov	r4, r1
 8003640:	461a      	mov	r2, r3
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <UART_SetConfig+0x384>)
 8003644:	fba3 2302 	umull	r2, r3, r3, r2
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	461d      	mov	r5, r3
 8003652:	f04f 0600 	mov.w	r6, #0
 8003656:	46a9      	mov	r9, r5
 8003658:	46b2      	mov	sl, r6
 800365a:	eb19 0309 	adds.w	r3, r9, r9
 800365e:	eb4a 040a 	adc.w	r4, sl, sl
 8003662:	4699      	mov	r9, r3
 8003664:	46a2      	mov	sl, r4
 8003666:	eb19 0905 	adds.w	r9, r9, r5
 800366a:	eb4a 0a06 	adc.w	sl, sl, r6
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800367a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800367e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003682:	4689      	mov	r9, r1
 8003684:	4692      	mov	sl, r2
 8003686:	eb19 0005 	adds.w	r0, r9, r5
 800368a:	eb4a 0106 	adc.w	r1, sl, r6
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	461d      	mov	r5, r3
 8003694:	f04f 0600 	mov.w	r6, #0
 8003698:	196b      	adds	r3, r5, r5
 800369a:	eb46 0406 	adc.w	r4, r6, r6
 800369e:	461a      	mov	r2, r3
 80036a0:	4623      	mov	r3, r4
 80036a2:	f7fc fdaf 	bl	8000204 <__aeabi_uldivmod>
 80036a6:	4603      	mov	r3, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <UART_SetConfig+0x384>)
 80036ae:	fba3 1302 	umull	r1, r3, r3, r2
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2164      	movs	r1, #100	; 0x64
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	3332      	adds	r3, #50	; 0x32
 80036c0:	4a27      	ldr	r2, [pc, #156]	; (8003760 <UART_SetConfig+0x384>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036ce:	4498      	add	r8, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	461d      	mov	r5, r3
 80036d4:	f04f 0600 	mov.w	r6, #0
 80036d8:	46a9      	mov	r9, r5
 80036da:	46b2      	mov	sl, r6
 80036dc:	eb19 0309 	adds.w	r3, r9, r9
 80036e0:	eb4a 040a 	adc.w	r4, sl, sl
 80036e4:	4699      	mov	r9, r3
 80036e6:	46a2      	mov	sl, r4
 80036e8:	eb19 0905 	adds.w	r9, r9, r5
 80036ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003704:	4689      	mov	r9, r1
 8003706:	4692      	mov	sl, r2
 8003708:	eb19 0005 	adds.w	r0, r9, r5
 800370c:	eb4a 0106 	adc.w	r1, sl, r6
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	461d      	mov	r5, r3
 8003716:	f04f 0600 	mov.w	r6, #0
 800371a:	196b      	adds	r3, r5, r5
 800371c:	eb46 0406 	adc.w	r4, r6, r6
 8003720:	461a      	mov	r2, r3
 8003722:	4623      	mov	r3, r4
 8003724:	f7fc fd6e 	bl	8000204 <__aeabi_uldivmod>
 8003728:	4603      	mov	r3, r0
 800372a:	460c      	mov	r4, r1
 800372c:	461a      	mov	r2, r3
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <UART_SetConfig+0x384>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a07      	ldr	r2, [pc, #28]	; (8003760 <UART_SetConfig+0x384>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 0207 	and.w	r2, r3, #7
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4442      	add	r2, r8
 8003754:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003756:	e1b2      	b.n	8003abe <UART_SetConfig+0x6e2>
 8003758:	40011000 	.word	0x40011000
 800375c:	40011400 	.word	0x40011400
 8003760:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4ad7      	ldr	r2, [pc, #860]	; (8003ac8 <UART_SetConfig+0x6ec>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d005      	beq.n	800377a <UART_SetConfig+0x39e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4ad6      	ldr	r2, [pc, #856]	; (8003acc <UART_SetConfig+0x6f0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	f040 80d1 	bne.w	800391c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800377a:	f7fe fcfd 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 800377e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	469a      	mov	sl, r3
 8003784:	f04f 0b00 	mov.w	fp, #0
 8003788:	46d0      	mov	r8, sl
 800378a:	46d9      	mov	r9, fp
 800378c:	eb18 0308 	adds.w	r3, r8, r8
 8003790:	eb49 0409 	adc.w	r4, r9, r9
 8003794:	4698      	mov	r8, r3
 8003796:	46a1      	mov	r9, r4
 8003798:	eb18 080a 	adds.w	r8, r8, sl
 800379c:	eb49 090b 	adc.w	r9, r9, fp
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037b4:	4688      	mov	r8, r1
 80037b6:	4691      	mov	r9, r2
 80037b8:	eb1a 0508 	adds.w	r5, sl, r8
 80037bc:	eb4b 0609 	adc.w	r6, fp, r9
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4619      	mov	r1, r3
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	0094      	lsls	r4, r2, #2
 80037d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037d8:	008b      	lsls	r3, r1, #2
 80037da:	461a      	mov	r2, r3
 80037dc:	4623      	mov	r3, r4
 80037de:	4628      	mov	r0, r5
 80037e0:	4631      	mov	r1, r6
 80037e2:	f7fc fd0f 	bl	8000204 <__aeabi_uldivmod>
 80037e6:	4603      	mov	r3, r0
 80037e8:	460c      	mov	r4, r1
 80037ea:	461a      	mov	r2, r3
 80037ec:	4bb8      	ldr	r3, [pc, #736]	; (8003ad0 <UART_SetConfig+0x6f4>)
 80037ee:	fba3 2302 	umull	r2, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	469b      	mov	fp, r3
 80037fc:	f04f 0c00 	mov.w	ip, #0
 8003800:	46d9      	mov	r9, fp
 8003802:	46e2      	mov	sl, ip
 8003804:	eb19 0309 	adds.w	r3, r9, r9
 8003808:	eb4a 040a 	adc.w	r4, sl, sl
 800380c:	4699      	mov	r9, r3
 800380e:	46a2      	mov	sl, r4
 8003810:	eb19 090b 	adds.w	r9, r9, fp
 8003814:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800382c:	4689      	mov	r9, r1
 800382e:	4692      	mov	sl, r2
 8003830:	eb1b 0509 	adds.w	r5, fp, r9
 8003834:	eb4c 060a 	adc.w	r6, ip, sl
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4619      	mov	r1, r3
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	f04f 0400 	mov.w	r4, #0
 800384a:	0094      	lsls	r4, r2, #2
 800384c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003850:	008b      	lsls	r3, r1, #2
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	4628      	mov	r0, r5
 8003858:	4631      	mov	r1, r6
 800385a:	f7fc fcd3 	bl	8000204 <__aeabi_uldivmod>
 800385e:	4603      	mov	r3, r0
 8003860:	460c      	mov	r4, r1
 8003862:	461a      	mov	r2, r3
 8003864:	4b9a      	ldr	r3, [pc, #616]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003866:	fba3 1302 	umull	r1, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2164      	movs	r1, #100	; 0x64
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a95      	ldr	r2, [pc, #596]	; (8003ad0 <UART_SetConfig+0x6f4>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003884:	4498      	add	r8, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	469b      	mov	fp, r3
 800388a:	f04f 0c00 	mov.w	ip, #0
 800388e:	46d9      	mov	r9, fp
 8003890:	46e2      	mov	sl, ip
 8003892:	eb19 0309 	adds.w	r3, r9, r9
 8003896:	eb4a 040a 	adc.w	r4, sl, sl
 800389a:	4699      	mov	r9, r3
 800389c:	46a2      	mov	sl, r4
 800389e:	eb19 090b 	adds.w	r9, r9, fp
 80038a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ba:	4689      	mov	r9, r1
 80038bc:	4692      	mov	sl, r2
 80038be:	eb1b 0509 	adds.w	r5, fp, r9
 80038c2:	eb4c 060a 	adc.w	r6, ip, sl
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4619      	mov	r1, r3
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	0094      	lsls	r4, r2, #2
 80038da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038de:	008b      	lsls	r3, r1, #2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	4631      	mov	r1, r6
 80038e8:	f7fc fc8c 	bl	8000204 <__aeabi_uldivmod>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b77      	ldr	r3, [pc, #476]	; (8003ad0 <UART_SetConfig+0x6f4>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4442      	add	r2, r8
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	e0d0      	b.n	8003abe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe fc18 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003920:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	469a      	mov	sl, r3
 8003926:	f04f 0b00 	mov.w	fp, #0
 800392a:	46d0      	mov	r8, sl
 800392c:	46d9      	mov	r9, fp
 800392e:	eb18 0308 	adds.w	r3, r8, r8
 8003932:	eb49 0409 	adc.w	r4, r9, r9
 8003936:	4698      	mov	r8, r3
 8003938:	46a1      	mov	r9, r4
 800393a:	eb18 080a 	adds.w	r8, r8, sl
 800393e:	eb49 090b 	adc.w	r9, r9, fp
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800394e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003952:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003956:	4688      	mov	r8, r1
 8003958:	4691      	mov	r9, r2
 800395a:	eb1a 0508 	adds.w	r5, sl, r8
 800395e:	eb4b 0609 	adc.w	r6, fp, r9
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f04f 0400 	mov.w	r4, #0
 8003974:	0094      	lsls	r4, r2, #2
 8003976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800397a:	008b      	lsls	r3, r1, #2
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	4628      	mov	r0, r5
 8003982:	4631      	mov	r1, r6
 8003984:	f7fc fc3e 	bl	8000204 <__aeabi_uldivmod>
 8003988:	4603      	mov	r3, r0
 800398a:	460c      	mov	r4, r1
 800398c:	461a      	mov	r2, r3
 800398e:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003990:	fba3 2302 	umull	r2, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	469b      	mov	fp, r3
 800399e:	f04f 0c00 	mov.w	ip, #0
 80039a2:	46d9      	mov	r9, fp
 80039a4:	46e2      	mov	sl, ip
 80039a6:	eb19 0309 	adds.w	r3, r9, r9
 80039aa:	eb4a 040a 	adc.w	r4, sl, sl
 80039ae:	4699      	mov	r9, r3
 80039b0:	46a2      	mov	sl, r4
 80039b2:	eb19 090b 	adds.w	r9, r9, fp
 80039b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039ce:	4689      	mov	r9, r1
 80039d0:	4692      	mov	sl, r2
 80039d2:	eb1b 0509 	adds.w	r5, fp, r9
 80039d6:	eb4c 060a 	adc.w	r6, ip, sl
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4619      	mov	r1, r3
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	f04f 0400 	mov.w	r4, #0
 80039ec:	0094      	lsls	r4, r2, #2
 80039ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039f2:	008b      	lsls	r3, r1, #2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4623      	mov	r3, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	4631      	mov	r1, r6
 80039fc:	f7fc fc02 	bl	8000204 <__aeabi_uldivmod>
 8003a00:	4603      	mov	r3, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a26:	4498      	add	r8, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	469b      	mov	fp, r3
 8003a2c:	f04f 0c00 	mov.w	ip, #0
 8003a30:	46d9      	mov	r9, fp
 8003a32:	46e2      	mov	sl, ip
 8003a34:	eb19 0309 	adds.w	r3, r9, r9
 8003a38:	eb4a 040a 	adc.w	r4, sl, sl
 8003a3c:	4699      	mov	r9, r3
 8003a3e:	46a2      	mov	sl, r4
 8003a40:	eb19 090b 	adds.w	r9, r9, fp
 8003a44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a5c:	4689      	mov	r9, r1
 8003a5e:	4692      	mov	sl, r2
 8003a60:	eb1b 0509 	adds.w	r5, fp, r9
 8003a64:	eb4c 060a 	adc.w	r6, ip, sl
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	f04f 0400 	mov.w	r4, #0
 8003a7a:	0094      	lsls	r4, r2, #2
 8003a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a80:	008b      	lsls	r3, r1, #2
 8003a82:	461a      	mov	r2, r3
 8003a84:	4623      	mov	r3, r4
 8003a86:	4628      	mov	r0, r5
 8003a88:	4631      	mov	r1, r6
 8003a8a:	f7fc fbbb 	bl	8000204 <__aeabi_uldivmod>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	460c      	mov	r4, r1
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003a96:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2164      	movs	r1, #100	; 0x64
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	; 0x32
 8003aa8:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4442      	add	r2, r8
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	e7ff      	b.n	8003abe <UART_SetConfig+0x6e2>
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40011400 	.word	0x40011400
 8003ad0:	51eb851f 	.word	0x51eb851f

08003ad4 <__libc_init_array>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	4e0d      	ldr	r6, [pc, #52]	; (8003b0c <__libc_init_array+0x38>)
 8003ad8:	4c0d      	ldr	r4, [pc, #52]	; (8003b10 <__libc_init_array+0x3c>)
 8003ada:	1ba4      	subs	r4, r4, r6
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	2500      	movs	r5, #0
 8003ae0:	42a5      	cmp	r5, r4
 8003ae2:	d109      	bne.n	8003af8 <__libc_init_array+0x24>
 8003ae4:	4e0b      	ldr	r6, [pc, #44]	; (8003b14 <__libc_init_array+0x40>)
 8003ae6:	4c0c      	ldr	r4, [pc, #48]	; (8003b18 <__libc_init_array+0x44>)
 8003ae8:	f000 f820 	bl	8003b2c <_init>
 8003aec:	1ba4      	subs	r4, r4, r6
 8003aee:	10a4      	asrs	r4, r4, #2
 8003af0:	2500      	movs	r5, #0
 8003af2:	42a5      	cmp	r5, r4
 8003af4:	d105      	bne.n	8003b02 <__libc_init_array+0x2e>
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afc:	4798      	blx	r3
 8003afe:	3501      	adds	r5, #1
 8003b00:	e7ee      	b.n	8003ae0 <__libc_init_array+0xc>
 8003b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b06:	4798      	blx	r3
 8003b08:	3501      	adds	r5, #1
 8003b0a:	e7f2      	b.n	8003af2 <__libc_init_array+0x1e>
 8003b0c:	08003b64 	.word	0x08003b64
 8003b10:	08003b64 	.word	0x08003b64
 8003b14:	08003b64 	.word	0x08003b64
 8003b18:	08003b68 	.word	0x08003b68

08003b1c <memset>:
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <_init>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr

08003b38 <_fini>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr
