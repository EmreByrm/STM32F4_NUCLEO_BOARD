
Step_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003910  08003910  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003910  08003910  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003910  08003910  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003924  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003924  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fba  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c1  00000000  00000000  00026ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b0  00000000  00000000  000282b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000508  00000000  00000000  00028868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001baf2  00000000  00000000  00028d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068d8  00000000  00000000  00044862  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6c54  00000000  00000000  0004b13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1d8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001560  00000000  00000000  000f1e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080038c8 	.word	0x080038c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080038c8 	.word	0x080038c8

080001d4 <Servo_ForwardDirection>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Servo_ForwardDirection()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	if(adcvalue > 700 && adcvalue <1100)
 80001d8:	4b7f      	ldr	r3, [pc, #508]	; (80003d8 <Servo_ForwardDirection+0x204>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80001e0:	f240 80f8 	bls.w	80003d4 <Servo_ForwardDirection+0x200>
 80001e4:	4b7c      	ldr	r3, [pc, #496]	; (80003d8 <Servo_ForwardDirection+0x204>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	f240 424b 	movw	r2, #1099	; 0x44b
 80001ec:	4293      	cmp	r3, r2
 80001ee:	f200 80f1 	bhi.w	80003d4 <Servo_ForwardDirection+0x200>
{
	if(i == 1)
 80001f2:	4b7a      	ldr	r3, [pc, #488]	; (80003dc <Servo_ForwardDirection+0x208>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d118      	bne.n	800022c <Servo_ForwardDirection+0x58>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000200:	4877      	ldr	r0, [pc, #476]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000202:	f002 f803 	bl	800220c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800020c:	4874      	ldr	r0, [pc, #464]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800020e:	f001 fffd 	bl	800220c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2104      	movs	r1, #4
 8000216:	4872      	ldr	r0, [pc, #456]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000218:	f001 fff8 	bl	800220c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2108      	movs	r1, #8
 8000220:	486f      	ldr	r0, [pc, #444]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000222:	f001 fff3 	bl	800220c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000226:	2001      	movs	r0, #1
 8000228:	f000 fcaa 	bl	8000b80 <HAL_Delay>
	}
	if(i == 2)
 800022c:	4b6b      	ldr	r3, [pc, #428]	; (80003dc <Servo_ForwardDirection+0x208>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d118      	bne.n	8000266 <Servo_ForwardDirection+0x92>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800023a:	4869      	ldr	r0, [pc, #420]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800023c:	f001 ffe6 	bl	800220c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000246:	4866      	ldr	r0, [pc, #408]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000248:	f001 ffe0 	bl	800220c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2104      	movs	r1, #4
 8000250:	4863      	ldr	r0, [pc, #396]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000252:	f001 ffdb 	bl	800220c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2108      	movs	r1, #8
 800025a:	4861      	ldr	r0, [pc, #388]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800025c:	f001 ffd6 	bl	800220c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000260:	2001      	movs	r0, #1
 8000262:	f000 fc8d 	bl	8000b80 <HAL_Delay>
	}
	if(i == 3)
 8000266:	4b5d      	ldr	r3, [pc, #372]	; (80003dc <Servo_ForwardDirection+0x208>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b03      	cmp	r3, #3
 800026c:	d118      	bne.n	80002a0 <Servo_ForwardDirection+0xcc>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000274:	485a      	ldr	r0, [pc, #360]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000276:	f001 ffc9 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000280:	4857      	ldr	r0, [pc, #348]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000282:	f001 ffc3 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	2104      	movs	r1, #4
 800028a:	4855      	ldr	r0, [pc, #340]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800028c:	f001 ffbe 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2108      	movs	r1, #8
 8000294:	4852      	ldr	r0, [pc, #328]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000296:	f001 ffb9 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800029a:	2001      	movs	r0, #1
 800029c:	f000 fc70 	bl	8000b80 <HAL_Delay>
		}
	if(i == 4)
 80002a0:	4b4e      	ldr	r3, [pc, #312]	; (80003dc <Servo_ForwardDirection+0x208>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d118      	bne.n	80002da <Servo_ForwardDirection+0x106>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ae:	484c      	ldr	r0, [pc, #304]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80002b0:	f001 ffac 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4849      	ldr	r0, [pc, #292]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80002bc:	f001 ffa6 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2104      	movs	r1, #4
 80002c4:	4846      	ldr	r0, [pc, #280]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80002c6:	f001 ffa1 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	4844      	ldr	r0, [pc, #272]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80002d0:	f001 ff9c 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 fc53 	bl	8000b80 <HAL_Delay>
		}
	if(i == 5)
 80002da:	4b40      	ldr	r3, [pc, #256]	; (80003dc <Servo_ForwardDirection+0x208>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b05      	cmp	r3, #5
 80002e0:	d118      	bne.n	8000314 <Servo_ForwardDirection+0x140>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e8:	483d      	ldr	r0, [pc, #244]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80002ea:	f001 ff8f 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f4:	483a      	ldr	r0, [pc, #232]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80002f6:	f001 ff89 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2104      	movs	r1, #4
 80002fe:	4838      	ldr	r0, [pc, #224]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000300:	f001 ff84 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2108      	movs	r1, #8
 8000308:	4835      	ldr	r0, [pc, #212]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800030a:	f001 ff7f 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800030e:	2001      	movs	r0, #1
 8000310:	f000 fc36 	bl	8000b80 <HAL_Delay>
		}
	if(i == 6)
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <Servo_ForwardDirection+0x208>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b06      	cmp	r3, #6
 800031a:	d118      	bne.n	800034e <Servo_ForwardDirection+0x17a>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000322:	482f      	ldr	r0, [pc, #188]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000324:	f001 ff72 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	482c      	ldr	r0, [pc, #176]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000330:	f001 ff6c 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2104      	movs	r1, #4
 8000338:	4829      	ldr	r0, [pc, #164]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800033a:	f001 ff67 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800033e:	2201      	movs	r2, #1
 8000340:	2108      	movs	r1, #8
 8000342:	4827      	ldr	r0, [pc, #156]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000344:	f001 ff62 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000348:	2001      	movs	r0, #1
 800034a:	f000 fc19 	bl	8000b80 <HAL_Delay>
		}
	if(i == 7)
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <Servo_ForwardDirection+0x208>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b07      	cmp	r3, #7
 8000354:	d118      	bne.n	8000388 <Servo_ForwardDirection+0x1b4>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035c:	4820      	ldr	r0, [pc, #128]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800035e:	f001 ff55 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000368:	481d      	ldr	r0, [pc, #116]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800036a:	f001 ff4f 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2104      	movs	r1, #4
 8000372:	481b      	ldr	r0, [pc, #108]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000374:	f001 ff4a 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2108      	movs	r1, #8
 800037c:	4818      	ldr	r0, [pc, #96]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 800037e:	f001 ff45 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fbfc 	bl	8000b80 <HAL_Delay>
		}
	if(i == 8)
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <Servo_ForwardDirection+0x208>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b08      	cmp	r3, #8
 800038e:	d11b      	bne.n	80003c8 <Servo_ForwardDirection+0x1f4>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	4812      	ldr	r0, [pc, #72]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 8000398:	f001 ff38 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a2:	480f      	ldr	r0, [pc, #60]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80003a4:	f001 ff32 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80003ae:	f001 ff2d 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2108      	movs	r1, #8
 80003b6:	480a      	ldr	r0, [pc, #40]	; (80003e0 <Servo_ForwardDirection+0x20c>)
 80003b8:	f001 ff28 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fbdf 	bl	8000b80 <HAL_Delay>
			i = 0;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <Servo_ForwardDirection+0x208>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <Servo_ForwardDirection+0x208>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b02      	ldr	r3, [pc, #8]	; (80003dc <Servo_ForwardDirection+0x208>)
 80003d2:	701a      	strb	r2, [r3, #0]
	}
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000002a 	.word	0x2000002a
 80003dc:	20000028 	.word	0x20000028
 80003e0:	48000800 	.word	0x48000800

080003e4 <Servo_BackDirection>:
void Servo_BackDirection()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	if(adcvalue >= 0 && adcvalue <300)
 80003e8:	4b7c      	ldr	r3, [pc, #496]	; (80005dc <Servo_BackDirection+0x1f8>)
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80003f0:	f080 80f1 	bcs.w	80005d6 <Servo_BackDirection+0x1f2>
	{
		if(i == 1)
 80003f4:	4b7a      	ldr	r3, [pc, #488]	; (80005e0 <Servo_BackDirection+0x1fc>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d11b      	bne.n	8000434 <Servo_BackDirection+0x50>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000402:	4878      	ldr	r0, [pc, #480]	; (80005e4 <Servo_BackDirection+0x200>)
 8000404:	f001 ff02 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040e:	4875      	ldr	r0, [pc, #468]	; (80005e4 <Servo_BackDirection+0x200>)
 8000410:	f001 fefc 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2104      	movs	r1, #4
 8000418:	4872      	ldr	r0, [pc, #456]	; (80005e4 <Servo_BackDirection+0x200>)
 800041a:	f001 fef7 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2108      	movs	r1, #8
 8000422:	4870      	ldr	r0, [pc, #448]	; (80005e4 <Servo_BackDirection+0x200>)
 8000424:	f001 fef2 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000428:	2001      	movs	r0, #1
 800042a:	f000 fba9 	bl	8000b80 <HAL_Delay>
			i = 9;
 800042e:	4b6c      	ldr	r3, [pc, #432]	; (80005e0 <Servo_BackDirection+0x1fc>)
 8000430:	2209      	movs	r2, #9
 8000432:	701a      	strb	r2, [r3, #0]
		}
		if(i == 2)
 8000434:	4b6a      	ldr	r3, [pc, #424]	; (80005e0 <Servo_BackDirection+0x1fc>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d118      	bne.n	800046e <Servo_BackDirection+0x8a>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000442:	4868      	ldr	r0, [pc, #416]	; (80005e4 <Servo_BackDirection+0x200>)
 8000444:	f001 fee2 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800044e:	4865      	ldr	r0, [pc, #404]	; (80005e4 <Servo_BackDirection+0x200>)
 8000450:	f001 fedc 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2104      	movs	r1, #4
 8000458:	4862      	ldr	r0, [pc, #392]	; (80005e4 <Servo_BackDirection+0x200>)
 800045a:	f001 fed7 	bl	800220c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2108      	movs	r1, #8
 8000462:	4860      	ldr	r0, [pc, #384]	; (80005e4 <Servo_BackDirection+0x200>)
 8000464:	f001 fed2 	bl	800220c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f000 fb89 	bl	8000b80 <HAL_Delay>
		}
		if(i == 3)
 800046e:	4b5c      	ldr	r3, [pc, #368]	; (80005e0 <Servo_BackDirection+0x1fc>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b03      	cmp	r3, #3
 8000474:	d118      	bne.n	80004a8 <Servo_BackDirection+0xc4>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047c:	4859      	ldr	r0, [pc, #356]	; (80005e4 <Servo_BackDirection+0x200>)
 800047e:	f001 fec5 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000488:	4856      	ldr	r0, [pc, #344]	; (80005e4 <Servo_BackDirection+0x200>)
 800048a:	f001 febf 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	2104      	movs	r1, #4
 8000492:	4854      	ldr	r0, [pc, #336]	; (80005e4 <Servo_BackDirection+0x200>)
 8000494:	f001 feba 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2108      	movs	r1, #8
 800049c:	4851      	ldr	r0, [pc, #324]	; (80005e4 <Servo_BackDirection+0x200>)
 800049e:	f001 feb5 	bl	800220c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fb6c 	bl	8000b80 <HAL_Delay>
			}
		if(i == 4)
 80004a8:	4b4d      	ldr	r3, [pc, #308]	; (80005e0 <Servo_BackDirection+0x1fc>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b04      	cmp	r3, #4
 80004ae:	d118      	bne.n	80004e2 <Servo_BackDirection+0xfe>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b6:	484b      	ldr	r0, [pc, #300]	; (80005e4 <Servo_BackDirection+0x200>)
 80004b8:	f001 fea8 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c2:	4848      	ldr	r0, [pc, #288]	; (80005e4 <Servo_BackDirection+0x200>)
 80004c4:	f001 fea2 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2104      	movs	r1, #4
 80004cc:	4845      	ldr	r0, [pc, #276]	; (80005e4 <Servo_BackDirection+0x200>)
 80004ce:	f001 fe9d 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2108      	movs	r1, #8
 80004d6:	4843      	ldr	r0, [pc, #268]	; (80005e4 <Servo_BackDirection+0x200>)
 80004d8:	f001 fe98 	bl	800220c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 fb4f 	bl	8000b80 <HAL_Delay>
			}
		if(i == 5)
 80004e2:	4b3f      	ldr	r3, [pc, #252]	; (80005e0 <Servo_BackDirection+0x1fc>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b05      	cmp	r3, #5
 80004e8:	d118      	bne.n	800051c <Servo_BackDirection+0x138>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f0:	483c      	ldr	r0, [pc, #240]	; (80005e4 <Servo_BackDirection+0x200>)
 80004f2:	f001 fe8b 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	4839      	ldr	r0, [pc, #228]	; (80005e4 <Servo_BackDirection+0x200>)
 80004fe:	f001 fe85 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2104      	movs	r1, #4
 8000506:	4837      	ldr	r0, [pc, #220]	; (80005e4 <Servo_BackDirection+0x200>)
 8000508:	f001 fe80 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2108      	movs	r1, #8
 8000510:	4834      	ldr	r0, [pc, #208]	; (80005e4 <Servo_BackDirection+0x200>)
 8000512:	f001 fe7b 	bl	800220c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fb32 	bl	8000b80 <HAL_Delay>
			}
		if(i == 6)
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <Servo_BackDirection+0x1fc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b06      	cmp	r3, #6
 8000522:	d118      	bne.n	8000556 <Servo_BackDirection+0x172>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052a:	482e      	ldr	r0, [pc, #184]	; (80005e4 <Servo_BackDirection+0x200>)
 800052c:	f001 fe6e 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000536:	482b      	ldr	r0, [pc, #172]	; (80005e4 <Servo_BackDirection+0x200>)
 8000538:	f001 fe68 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2104      	movs	r1, #4
 8000540:	4828      	ldr	r0, [pc, #160]	; (80005e4 <Servo_BackDirection+0x200>)
 8000542:	f001 fe63 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	4826      	ldr	r0, [pc, #152]	; (80005e4 <Servo_BackDirection+0x200>)
 800054c:	f001 fe5e 	bl	800220c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f000 fb15 	bl	8000b80 <HAL_Delay>
			}
		if(i == 7)
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <Servo_BackDirection+0x1fc>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b07      	cmp	r3, #7
 800055c:	d118      	bne.n	8000590 <Servo_BackDirection+0x1ac>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000564:	481f      	ldr	r0, [pc, #124]	; (80005e4 <Servo_BackDirection+0x200>)
 8000566:	f001 fe51 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	481c      	ldr	r0, [pc, #112]	; (80005e4 <Servo_BackDirection+0x200>)
 8000572:	f001 fe4b 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2104      	movs	r1, #4
 800057a:	481a      	ldr	r0, [pc, #104]	; (80005e4 <Servo_BackDirection+0x200>)
 800057c:	f001 fe46 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2108      	movs	r1, #8
 8000584:	4817      	ldr	r0, [pc, #92]	; (80005e4 <Servo_BackDirection+0x200>)
 8000586:	f001 fe41 	bl	800220c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 faf8 	bl	8000b80 <HAL_Delay>
			}
		if(i == 8)
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <Servo_BackDirection+0x1fc>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b08      	cmp	r3, #8
 8000596:	d118      	bne.n	80005ca <Servo_BackDirection+0x1e6>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	4811      	ldr	r0, [pc, #68]	; (80005e4 <Servo_BackDirection+0x200>)
 80005a0:	f001 fe34 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <Servo_BackDirection+0x200>)
 80005ac:	f001 fe2e 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <Servo_BackDirection+0x200>)
 80005b6:	f001 fe29 	bl	800220c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <Servo_BackDirection+0x200>)
 80005c0:	f001 fe24 	bl	800220c <HAL_GPIO_WritePin>
				HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fadb 	bl	8000b80 <HAL_Delay>

			}
			i--;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <Servo_BackDirection+0x1fc>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <Servo_BackDirection+0x1fc>)
 80005d4:	701a      	strb	r2, [r3, #0]
		}

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2000002a 	.word	0x2000002a
 80005e0:	20000028 	.word	0x20000028
 80005e4:	48000800 	.word	0x48000800

080005e8 <ADC_Calculate>:
void ADC_Calculate()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	if(HAL_ADC_PollForConversion(&hadc1, 10000) == HAL_OK)
 80005ec:	f242 7110 	movw	r1, #10000	; 0x2710
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <ADC_Calculate+0x28>)
 80005f2:	f000 fdf7 	bl	80011e4 <HAL_ADC_PollForConversion>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <ADC_Calculate+0x22>
	{
		adcvalue = HAL_ADC_GetValue(&hadc1);
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <ADC_Calculate+0x28>)
 80005fe:	f000 feeb 	bl	80013d8 <HAL_ADC_GetValue>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <ADC_Calculate+0x2c>)
 8000608:	801a      	strh	r2, [r3, #0]
	}
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000002c 	.word	0x2000002c
 8000614:	2000002a 	.word	0x2000002a

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fa4a 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f814 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f8e2 	bl	80007ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000628:	f000 f870 	bl	800070c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x30>)
 800062e:	f000 fcc3 	bl	8000fb8 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_Calculate();
 8000632:	f7ff ffd9 	bl	80005e8 <ADC_Calculate>
	  Servo_BackDirection();
 8000636:	f7ff fed5 	bl	80003e4 <Servo_BackDirection>
	  Servo_ForwardDirection();
 800063a:	f7ff fdcb 	bl	80001d4 <Servo_ForwardDirection>
	  HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 fa9e 	bl	8000b80 <HAL_Delay>
	  ADC_Calculate();
 8000644:	e7f5      	b.n	8000632 <main+0x1a>
 8000646:	bf00      	nop
 8000648:	2000002c 	.word	0x2000002c

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0a6      	sub	sp, #152	; 0x98
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f92c 	bl	80038b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2258      	movs	r2, #88	; 0x58
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f91e 	bl	80038b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000698:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800069c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fdc6 	bl	800223c <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f927 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fcc6 	bl	8003068 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e2:	f000 f911 	bl	8000908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fe9e 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006fe:	f000 f903 	bl	8000908 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3798      	adds	r7, #152	; 0x98
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000730:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000734:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800073e:	2208      	movs	r2, #8
 8000740:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800074a:	2201      	movs	r2, #1
 800074c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800075e:	2201      	movs	r2, #1
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000778:	2204      	movs	r2, #4
 800077a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800077e:	2200      	movs	r2, #0
 8000780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000784:	2200      	movs	r2, #0
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800078a:	f000 fa1b 	bl	8000bc4 <HAL_ADC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f8b8 	bl	8000908 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <MX_ADC1_Init+0xdc>)
 80007a4:	f001 f912 	bl	80019cc <HAL_ADCEx_MultiModeConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007ae:	f000 f8ab 	bl	8000908 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80007be:	2305      	movs	r3, #5
 80007c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_ADC1_Init+0xdc>)
 80007d0:	f000 fe10 	bl	80013f4 <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80007da:	f000 f895 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000002c 	.word	0x2000002c

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <MX_GPIO_Init+0x110>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a3d      	ldr	r2, [pc, #244]	; (80008fc <MX_GPIO_Init+0x110>)
 8000808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <MX_GPIO_Init+0x110>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	4b38      	ldr	r3, [pc, #224]	; (80008fc <MX_GPIO_Init+0x110>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a37      	ldr	r2, [pc, #220]	; (80008fc <MX_GPIO_Init+0x110>)
 8000820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <MX_GPIO_Init+0x110>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <MX_GPIO_Init+0x110>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a31      	ldr	r2, [pc, #196]	; (80008fc <MX_GPIO_Init+0x110>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <MX_GPIO_Init+0x110>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_GPIO_Init+0x110>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <MX_GPIO_Init+0x110>)
 8000850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_GPIO_Init+0x110>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f241 410c 	movw	r1, #5132	; 0x140c
 8000868:	4825      	ldr	r0, [pc, #148]	; (8000900 <MX_GPIO_Init+0x114>)
 800086a:	f001 fccf 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f001 fcc9 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_GPIO_Init+0x118>)
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_GPIO_Init+0x114>)
 8000890:	f001 fb32 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_12;
 8000894:	f241 430c 	movw	r3, #5132	; 0x140c
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <MX_GPIO_Init+0x114>)
 80008ae:	f001 fb23 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b2:	2308      	movs	r3, #8
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80008c2:	2303      	movs	r3, #3
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f001 fb12 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f001 fb03 	bl	8001ef8 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000800 	.word	0x48000800
 8000904:	10210000 	.word	0x10210000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094e:	2007      	movs	r0, #7
 8000950:	f001 fa9e 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000980:	d124      	bne.n	80009cc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_ADC_MspInit+0x74>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <HAL_ADC_MspInit+0x74>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_ADC_MspInit+0x74>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_ADC_MspInit+0x74>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <HAL_ADC_MspInit+0x74>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_ADC_MspInit+0x74>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 fa96 	bl	8001ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f888 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <SystemInit+0x28>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <SystemInit+0x28>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SystemInit+0x28>)
 8000a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a66:	e003      	b.n	8000a70 <LoopCopyDataInit>

08000a68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a6e:	3104      	adds	r1, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a78:	d3f6      	bcc.n	8000a68 <CopyDataInit>
	ldr	r2, =_sbss
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a7c:	e002      	b.n	8000a84 <LoopFillZerobss>

08000a7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a80:	f842 3b04 	str.w	r3, [r2], #4

08000a84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <LoopForever+0x16>)
	cmp	r2, r3
 8000a86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a88:	d3f9      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8a:	f7ff ffd3 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f002 feef 	bl	8003870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fdc1 	bl	8000618 <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a98:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000a9c:	08003918 	.word	0x08003918
	ldr	r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aa4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000aac:	20000080 	.word	0x20000080

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f001 f9e3 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff ff22 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f9ed 	bl	8001ede <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f001 f9c3 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	2000007c 	.word	0x2000007c

08000b68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	2000007c 	.word	0x2000007c

08000b80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_Delay+0x40>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09a      	sub	sp, #104	; 0x68
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e1e3      	b.n	8000fac <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d176      	bne.n	8000ce4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d152      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fea1 	bl	8000960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d13b      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f001 f81d 	bl	8001c6c <ADC_Disable>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d12f      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
 8000c44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d12b      	bne.n	8000ca4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c54:	f023 0302 	bic.w	r3, r3, #2
 8000c58:	f043 0202 	orr.w	r2, r3, #2
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c6e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c7e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c80:	4b92      	ldr	r3, [pc, #584]	; (8000ecc <HAL_ADC_Init+0x308>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a92      	ldr	r2, [pc, #584]	; (8000ed0 <HAL_ADC_Init+0x30c>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	0c9a      	lsrs	r2, r3, #18
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c96:	e002      	b.n	8000c9e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f9      	bne.n	8000c98 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cc0:	d110      	bne.n	8000ce4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f023 0312 	bic.w	r3, r3, #18
 8000cca:	f043 0210 	orr.w	r2, r3, #16
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f043 0201 	orr.w	r2, r3, #1
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f040 8150 	bne.w	8000f92 <HAL_ADC_Init+0x3ce>
 8000cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 814b 	bne.w	8000f92 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 8143 	bne.w	8000f92 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d14:	f043 0202 	orr.w	r2, r3, #2
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d24:	d004      	beq.n	8000d30 <HAL_ADC_Init+0x16c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a6a      	ldr	r2, [pc, #424]	; (8000ed4 <HAL_ADC_Init+0x310>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_ADC_Init+0x170>
 8000d30:	4b69      	ldr	r3, [pc, #420]	; (8000ed8 <HAL_ADC_Init+0x314>)
 8000d32:	e000      	b.n	8000d36 <HAL_ADC_Init+0x172>
 8000d34:	4b69      	ldr	r3, [pc, #420]	; (8000edc <HAL_ADC_Init+0x318>)
 8000d36:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d40:	d102      	bne.n	8000d48 <HAL_ADC_Init+0x184>
 8000d42:	4b64      	ldr	r3, [pc, #400]	; (8000ed4 <HAL_ADC_Init+0x310>)
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	e01a      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a61      	ldr	r2, [pc, #388]	; (8000ed4 <HAL_ADC_Init+0x310>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d103      	bne.n	8000d5a <HAL_ADC_Init+0x196>
 8000d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e011      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a60      	ldr	r2, [pc, #384]	; (8000ee0 <HAL_ADC_Init+0x31c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d102      	bne.n	8000d6a <HAL_ADC_Init+0x1a6>
 8000d64:	4b5f      	ldr	r3, [pc, #380]	; (8000ee4 <HAL_ADC_Init+0x320>)
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	e009      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a5d      	ldr	r2, [pc, #372]	; (8000ee4 <HAL_ADC_Init+0x320>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d102      	bne.n	8000d7a <HAL_ADC_Init+0x1b6>
 8000d74:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <HAL_ADC_Init+0x31c>)
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e001      	b.n	8000d7e <HAL_ADC_Init+0x1ba>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d108      	bne.n	8000d9e <HAL_ADC_Init+0x1da>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_Init+0x1da>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_ADC_Init+0x1dc>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d11c      	bne.n	8000dde <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000da4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d010      	beq.n	8000dcc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d107      	bne.n	8000dc6 <HAL_ADC_Init+0x202>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <HAL_ADC_Init+0x202>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_ADC_Init+0x204>
 8000dc6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d108      	bne.n	8000dde <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ddc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7e5b      	ldrb	r3, [r3, #25]
 8000de2:	035b      	lsls	r3, r3, #13
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000de8:	2a01      	cmp	r2, #1
 8000dea:	d002      	beq.n	8000df2 <HAL_ADC_Init+0x22e>
 8000dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df0:	e000      	b.n	8000df4 <HAL_ADC_Init+0x230>
 8000df2:	2200      	movs	r2, #0
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e04:	4313      	orrs	r3, r2
 8000e06:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d11b      	bne.n	8000e4a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7e5b      	ldrb	r3, [r3, #25]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d109      	bne.n	8000e2e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	045a      	lsls	r2, r3, #17
 8000e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e24:	4313      	orrs	r3, r2
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8000e2c:	e00d      	b.n	8000e4a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e36:	f043 0220 	orr.w	r2, r3, #32
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d054      	beq.n	8000efc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_ADC_Init+0x31c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d004      	beq.n	8000e66 <HAL_ADC_Init+0x2a2>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <HAL_ADC_Init+0x320>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d140      	bne.n	8000ee8 <HAL_ADC_Init+0x324>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000e6e:	d02a      	beq.n	8000ec6 <HAL_ADC_Init+0x302>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e78:	d022      	beq.n	8000ec0 <HAL_ADC_Init+0x2fc>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000e82:	d01a      	beq.n	8000eba <HAL_ADC_Init+0x2f6>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000e8c:	d012      	beq.n	8000eb4 <HAL_ADC_Init+0x2f0>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000e96:	d00a      	beq.n	8000eae <HAL_ADC_Init+0x2ea>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000ea0:	d002      	beq.n	8000ea8 <HAL_ADC_Init+0x2e4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	e023      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000ea8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000eac:	e020      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000eae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eb2:	e01d      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000eb4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000eb8:	e01a      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	e017      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000ec0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ec4:	e014      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000ec6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000eca:	e011      	b.n	8000ef0 <HAL_ADC_Init+0x32c>
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	431bde83 	.word	0x431bde83
 8000ed4:	50000100 	.word	0x50000100
 8000ed8:	50000300 	.word	0x50000300
 8000edc:	50000700 	.word	0x50000700
 8000ee0:	50000400 	.word	0x50000400
 8000ee4:	50000500 	.word	0x50000500
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d114      	bne.n	8000f34 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7e1b      	ldrb	r3, [r3, #24]
 8000f22:	039a      	lsls	r2, r3, #14
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f30:	4313      	orrs	r3, r2
 8000f32:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_ADC_Init+0x3f0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f44:	430b      	orrs	r3, r1
 8000f46:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10c      	bne.n	8000f6a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f023 010f 	bic.w	r1, r3, #15
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	1e5a      	subs	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
 8000f68:	e007      	b.n	8000f7a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 020f 	bic.w	r2, r2, #15
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f023 0303 	bic.w	r3, r3, #3
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f90:	e00a      	b.n	8000fa8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f023 0312 	bic.w	r3, r3, #18
 8000f9a:	f043 0210 	orr.w	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3768      	adds	r7, #104	; 0x68
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	fff0c007 	.word	0xfff0c007

08000fb8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 80f9 	bne.w	80011c6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Start+0x2a>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e0f4      	b.n	80011cc <HAL_ADC_Start+0x214>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fde0 	bl	8001bb0 <ADC_Enable>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80e0 	bne.w	80011bc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001018:	d004      	beq.n	8001024 <HAL_ADC_Start+0x6c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a6d      	ldr	r2, [pc, #436]	; (80011d4 <HAL_ADC_Start+0x21c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <HAL_ADC_Start+0x7a>
 8001024:	4b6c      	ldr	r3, [pc, #432]	; (80011d8 <HAL_ADC_Start+0x220>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	2b00      	cmp	r3, #0
 800102e:	d010      	beq.n	8001052 <HAL_ADC_Start+0x9a>
 8001030:	e005      	b.n	800103e <HAL_ADC_Start+0x86>
 8001032:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_ADC_Start+0x224>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <HAL_ADC_Start+0x9a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001046:	d004      	beq.n	8001052 <HAL_ADC_Start+0x9a>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a64      	ldr	r2, [pc, #400]	; (80011e0 <HAL_ADC_Start+0x228>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d115      	bne.n	800107e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d036      	beq.n	80010da <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001074:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800107c:	e02d      	b.n	80010da <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001092:	d004      	beq.n	800109e <HAL_ADC_Start+0xe6>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <HAL_ADC_Start+0x21c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10a      	bne.n	80010b4 <HAL_ADC_Start+0xfc>
 800109e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	e008      	b.n	80010c6 <HAL_ADC_Start+0x10e>
 80010b4:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <HAL_ADC_Start+0x228>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bf14      	ite	ne
 80010c0:	2301      	movne	r3, #1
 80010c2:	2300      	moveq	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e6:	d106      	bne.n	80010f6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f023 0206 	bic.w	r2, r3, #6
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	221c      	movs	r2, #28
 800110a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001114:	d004      	beq.n	8001120 <HAL_ADC_Start+0x168>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a2e      	ldr	r2, [pc, #184]	; (80011d4 <HAL_ADC_Start+0x21c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d106      	bne.n	800112e <HAL_ADC_Start+0x176>
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_ADC_Start+0x220>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	2b00      	cmp	r3, #0
 800112a:	d03e      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 800112c:	e005      	b.n	800113a <HAL_ADC_Start+0x182>
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_ADC_Start+0x224>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	2b00      	cmp	r3, #0
 8001138:	d037      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001142:	d004      	beq.n	800114e <HAL_ADC_Start+0x196>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_ADC_Start+0x21c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d106      	bne.n	800115c <HAL_ADC_Start+0x1a4>
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_ADC_Start+0x220>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2b05      	cmp	r3, #5
 8001158:	d027      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 800115a:	e005      	b.n	8001168 <HAL_ADC_Start+0x1b0>
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_ADC_Start+0x224>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	2b05      	cmp	r3, #5
 8001166:	d020      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001170:	d004      	beq.n	800117c <HAL_ADC_Start+0x1c4>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_ADC_Start+0x21c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <HAL_ADC_Start+0x1d2>
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_ADC_Start+0x220>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2b09      	cmp	r3, #9
 8001186:	d010      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 8001188:	e005      	b.n	8001196 <HAL_ADC_Start+0x1de>
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_ADC_Start+0x224>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2b09      	cmp	r3, #9
 8001194:	d009      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d004      	beq.n	80011aa <HAL_ADC_Start+0x1f2>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_ADC_Start+0x228>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10f      	bne.n	80011ca <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0204 	orr.w	r2, r2, #4
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e006      	b.n	80011ca <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80011c4:	e001      	b.n	80011ca <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011c6:	2302      	movs	r3, #2
 80011c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	50000100 	.word	0x50000100
 80011d8:	50000300 	.word	0x50000300
 80011dc:	50000700 	.word	0x50000700
 80011e0:	50000400 	.word	0x50000400

080011e4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d102      	bne.n	8001200 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011fa:	2308      	movs	r3, #8
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e03a      	b.n	8001276 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001208:	d004      	beq.n	8001214 <HAL_ADC_PollForConversion+0x30>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <HAL_ADC_PollForConversion+0x1e4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d101      	bne.n	8001218 <HAL_ADC_PollForConversion+0x34>
 8001214:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <HAL_ADC_PollForConversion+0x1e8>)
 8001216:	e000      	b.n	800121a <HAL_ADC_PollForConversion+0x36>
 8001218:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <HAL_ADC_PollForConversion+0x1ec>)
 800121a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	2b00      	cmp	r3, #0
 8001226:	d112      	bne.n	800124e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d11d      	bne.n	8001272 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f043 0220 	orr.w	r2, r3, #32
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0b8      	b.n	80013c0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f043 0220 	orr.w	r2, r3, #32
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e0a6      	b.n	80013c0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001272:	230c      	movs	r3, #12
 8001274:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800127e:	d004      	beq.n	800128a <HAL_ADC_PollForConversion+0xa6>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a50      	ldr	r2, [pc, #320]	; (80013c8 <HAL_ADC_PollForConversion+0x1e4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d106      	bne.n	8001298 <HAL_ADC_PollForConversion+0xb4>
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_ADC_PollForConversion+0x1e8>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	2b00      	cmp	r3, #0
 8001294:	d010      	beq.n	80012b8 <HAL_ADC_PollForConversion+0xd4>
 8001296:	e005      	b.n	80012a4 <HAL_ADC_PollForConversion+0xc0>
 8001298:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <HAL_ADC_PollForConversion+0x1ec>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d009      	beq.n	80012b8 <HAL_ADC_PollForConversion+0xd4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ac:	d004      	beq.n	80012b8 <HAL_ADC_PollForConversion+0xd4>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <HAL_ADC_PollForConversion+0x1f0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d104      	bne.n	80012c2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	e00f      	b.n	80012e2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ca:	d004      	beq.n	80012d6 <HAL_ADC_PollForConversion+0xf2>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a3d      	ldr	r2, [pc, #244]	; (80013c8 <HAL_ADC_PollForConversion+0x1e4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d102      	bne.n	80012dc <HAL_ADC_PollForConversion+0xf8>
 80012d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012da:	e000      	b.n	80012de <HAL_ADC_PollForConversion+0xfa>
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_ADC_PollForConversion+0x1f0>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80012e2:	f7ff fc41 	bl	8000b68 <HAL_GetTick>
 80012e6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012e8:	e01a      	b.n	8001320 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d016      	beq.n	8001320 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d007      	beq.n	8001308 <HAL_ADC_PollForConversion+0x124>
 80012f8:	f7ff fc36 	bl	8000b68 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d20b      	bcs.n	8001320 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f043 0204 	orr.w	r2, r3, #4
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e04f      	b.n	80013c0 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0dd      	beq.n	80012ea <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001344:	2b00      	cmp	r3, #0
 8001346:	d131      	bne.n	80013ac <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800134e:	2b00      	cmp	r3, #0
 8001350:	d12c      	bne.n	80013ac <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b08      	cmp	r3, #8
 800135e:	d125      	bne.n	80013ac <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d112      	bne.n	8001394 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d112      	bne.n	80013ac <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
 8001392:	e00b      	b.n	80013ac <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f043 0220 	orr.w	r2, r3, #32
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d103      	bne.n	80013be <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	50000100 	.word	0x50000100
 80013cc:	50000300 	.word	0x50000300
 80013d0:	50000700 	.word	0x50000700
 80013d4:	50000400 	.word	0x50000400

080013d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b09b      	sub	sp, #108	; 0x6c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x22>
 8001412:	2302      	movs	r3, #2
 8001414:	e2cb      	b.n	80019ae <HAL_ADC_ConfigChannel+0x5ba>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 82af 	bne.w	800198c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d81c      	bhi.n	8001470 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	461a      	mov	r2, r3
 800144a:	231f      	movs	r3, #31
 800144c:	4093      	lsls	r3, r2
 800144e:	43db      	mvns	r3, r3
 8001450:	4019      	ands	r1, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa00 f203 	lsl.w	r2, r0, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
 800146e:	e063      	b.n	8001538 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b09      	cmp	r3, #9
 8001476:	d81e      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	3b1e      	subs	r3, #30
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	4019      	ands	r1, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	3b1e      	subs	r3, #30
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
 80014b4:	e040      	b.n	8001538 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b0e      	cmp	r3, #14
 80014bc:	d81e      	bhi.n	80014fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	3b3c      	subs	r3, #60	; 0x3c
 80014d2:	221f      	movs	r2, #31
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	4019      	ands	r1, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	3b3c      	subs	r3, #60	; 0x3c
 80014ee:	fa00 f203 	lsl.w	r2, r0, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
 80014fa:	e01d      	b.n	8001538 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	3b5a      	subs	r3, #90	; 0x5a
 8001510:	221f      	movs	r2, #31
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	4019      	ands	r1, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	3b5a      	subs	r3, #90	; 0x5a
 800152c:	fa00 f203 	lsl.w	r2, r0, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80e5 	bne.w	8001712 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d91c      	bls.n	800158a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6999      	ldr	r1, [r3, #24]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3b1e      	subs	r3, #30
 8001562:	2207      	movs	r2, #7
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	4019      	ands	r1, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6898      	ldr	r0, [r3, #8]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	3b1e      	subs	r3, #30
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	e019      	b.n	80015be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6959      	ldr	r1, [r3, #20]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4019      	ands	r1, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6898      	ldr	r0, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	fa00 f203 	lsl.w	r2, r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	3b01      	subs	r3, #1
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d84f      	bhi.n	8001680 <HAL_ADC_ConfigChannel+0x28c>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	0800161b 	.word	0x0800161b
 80015f0:	0800163d 	.word	0x0800163d
 80015f4:	0800165f 	.word	0x0800165f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015fe:	4b9f      	ldr	r3, [pc, #636]	; (800187c <HAL_ADC_ConfigChannel+0x488>)
 8001600:	4013      	ands	r3, r2
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	0691      	lsls	r1, r2, #26
 8001608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800160a:	430a      	orrs	r2, r1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001616:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001618:	e07e      	b.n	8001718 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001620:	4b96      	ldr	r3, [pc, #600]	; (800187c <HAL_ADC_ConfigChannel+0x488>)
 8001622:	4013      	ands	r3, r2
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	0691      	lsls	r1, r2, #26
 800162a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800162c:	430a      	orrs	r2, r1
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001638:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800163a:	e06d      	b.n	8001718 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001642:	4b8e      	ldr	r3, [pc, #568]	; (800187c <HAL_ADC_ConfigChannel+0x488>)
 8001644:	4013      	ands	r3, r2
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	0691      	lsls	r1, r2, #26
 800164c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800164e:	430a      	orrs	r2, r1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800165a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800165c:	e05c      	b.n	8001718 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001664:	4b85      	ldr	r3, [pc, #532]	; (800187c <HAL_ADC_ConfigChannel+0x488>)
 8001666:	4013      	ands	r3, r2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	0691      	lsls	r1, r2, #26
 800166e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001670:	430a      	orrs	r2, r1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800167c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800167e:	e04b      	b.n	8001718 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	069b      	lsls	r3, r3, #26
 8001690:	429a      	cmp	r2, r3
 8001692:	d107      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	069b      	lsls	r3, r3, #26
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d107      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	069b      	lsls	r3, r3, #26
 80016d8:	429a      	cmp	r2, r3
 80016da:	d107      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	069b      	lsls	r3, r3, #26
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10a      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800170e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001710:	e001      	b.n	8001716 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001712:	bf00      	nop
 8001714:	e000      	b.n	8001718 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001716:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x344>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x344>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_ADC_ConfigChannel+0x346>
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8131 	bne.w	80019a2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d00f      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001766:	e049      	b.n	80017fc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	409a      	lsls	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b09      	cmp	r3, #9
 8001788:	d91c      	bls.n	80017c4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6999      	ldr	r1, [r3, #24]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	3b1b      	subs	r3, #27
 800179c:	2207      	movs	r2, #7
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	4019      	ands	r1, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6898      	ldr	r0, [r3, #8]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	3b1b      	subs	r3, #27
 80017b6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	e01b      	b.n	80017fc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6959      	ldr	r1, [r3, #20]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	2207      	movs	r2, #7
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	4019      	ands	r1, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6898      	ldr	r0, [r3, #8]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	fa00 f203 	lsl.w	r2, r0, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001804:	d004      	beq.n	8001810 <HAL_ADC_ConfigChannel+0x41c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_ADC_ConfigChannel+0x48c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x420>
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_ADC_ConfigChannel+0x490>)
 8001812:	e000      	b.n	8001816 <HAL_ADC_ConfigChannel+0x422>
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_ADC_ConfigChannel+0x494>)
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d105      	bne.n	800182c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001828:	2b00      	cmp	r3, #0
 800182a:	d015      	beq.n	8001858 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001830:	2b11      	cmp	r3, #17
 8001832:	d105      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001844:	2b12      	cmp	r3, #18
 8001846:	f040 80ac 	bne.w	80019a2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800184a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 80a5 	bne.w	80019a2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001860:	d102      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x474>
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_ADC_ConfigChannel+0x48c>)
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e023      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x4bc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_ADC_ConfigChannel+0x48c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10c      	bne.n	800188c <HAL_ADC_ConfigChannel+0x498>
 8001872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e01a      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x4bc>
 800187a:	bf00      	nop
 800187c:	83fff000 	.word	0x83fff000
 8001880:	50000100 	.word	0x50000100
 8001884:	50000300 	.word	0x50000300
 8001888:	50000700 	.word	0x50000700
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <HAL_ADC_ConfigChannel+0x5c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d102      	bne.n	800189c <HAL_ADC_ConfigChannel+0x4a8>
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_ADC_ConfigChannel+0x5cc>)
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e009      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x4bc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <HAL_ADC_ConfigChannel+0x5cc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d102      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x4b8>
 80018a6:	4b45      	ldr	r3, [pc, #276]	; (80019bc <HAL_ADC_ConfigChannel+0x5c8>)
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e001      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x4bc>
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x4dc>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x4dc>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x4de>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d150      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x504>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x504>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_ADC_ConfigChannel+0x506>
 80018f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d13c      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d11d      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x54e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800190e:	d118      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_ADC_ConfigChannel+0x5d0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <HAL_ADC_ConfigChannel+0x5d4>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0c9a      	lsrs	r2, r3, #18
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001932:	e002      	b.n	800193a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3b01      	subs	r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f9      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001940:	e02e      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b11      	cmp	r3, #17
 8001948:	d10b      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x56e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001952:	d106      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800195c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001960:	e01e      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d11a      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800196a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001974:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001976:	e013      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f043 0220 	orr.w	r2, r3, #32
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800198a:	e00a      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800199e:	e000      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	376c      	adds	r7, #108	; 0x6c
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	50000400 	.word	0x50000400
 80019c0:	50000500 	.word	0x50000500
 80019c4:	20000000 	.word	0x20000000
 80019c8:	431bde83 	.word	0x431bde83

080019cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b099      	sub	sp, #100	; 0x64
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e4:	d102      	bne.n	80019ec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80019e6:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	e01a      	b.n	8001a22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6a      	ldr	r2, [pc, #424]	; (8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d103      	bne.n	80019fe <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80019f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	e011      	b.n	8001a22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d102      	bne.n	8001a0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001a08:	4b66      	ldr	r3, [pc, #408]	; (8001ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e009      	b.n	8001a22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a64      	ldr	r2, [pc, #400]	; (8001ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d102      	bne.n	8001a1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001a18:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	e001      	b.n	8001a22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b0      	b.n	8001b8e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e0a9      	b.n	8001b8e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 808d 	bne.w	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 8086 	bne.w	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a68:	d004      	beq.n	8001a74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a4b      	ldr	r2, [pc, #300]	; (8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001a76:	e000      	b.n	8001a7a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001a7a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d040      	beq.n	8001b06 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a96:	035b      	lsls	r3, r3, #13
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a9e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d15c      	bne.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ae2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d14b      	bne.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001af0:	f023 030f 	bic.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6811      	ldr	r1, [r2, #0]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	6892      	ldr	r2, [r2, #8]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b02:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b04:	e03c      	b.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b10:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d108      	bne.n	8001b32 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001b32:	2300      	movs	r3, #0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d123      	bne.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001b54:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d112      	bne.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b62:	f023 030f 	bic.w	r3, r3, #15
 8001b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b68:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b6a:	e009      	b.n	8001b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f043 0220 	orr.w	r2, r3, #32
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001b7e:	e000      	b.n	8001b82 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b80:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3764      	adds	r7, #100	; 0x64
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	50000100 	.word	0x50000100
 8001ba0:	50000400 	.word	0x50000400
 8001ba4:	50000500 	.word	0x50000500
 8001ba8:	50000300 	.word	0x50000300
 8001bac:	50000700 	.word	0x50000700

08001bb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <ADC_Enable+0x2c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <ADC_Enable+0x2c>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <ADC_Enable+0x2e>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d13c      	bne.n	8001c5c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <ADC_Enable+0xb8>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00d      	beq.n	8001c0c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e028      	b.n	8001c5e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c1c:	f7fe ffa4 	bl	8000b68 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c22:	e014      	b.n	8001c4e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c24:	f7fe ffa0 	bl	8000b68 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d90d      	bls.n	8001c4e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e007      	b.n	8001c5e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d1e3      	bne.n	8001c24 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	8000003f 	.word	0x8000003f

08001c6c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <ADC_Disable+0x2c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <ADC_Disable+0x2c>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <ADC_Disable+0x2e>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030d 	and.w	r3, r3, #13
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10f      	bne.n	8001ccc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0202 	orr.w	r2, r2, #2
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cc4:	f7fe ff50 	bl	8000b68 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cca:	e022      	b.n	8001d12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f043 0210 	orr.w	r2, r3, #16
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e01c      	b.n	8001d22 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ce8:	f7fe ff3e 	bl	8000b68 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d90d      	bls.n	8001d12 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f043 0210 	orr.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e007      	b.n	8001d22 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d0e3      	beq.n	8001ce8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff47 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff5c 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff8e 	bl	8001de4 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5d 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffb0 	bl	8001e4c <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e160      	b.n	80021ca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8152 	beq.w	80021c4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d00b      	beq.n	8001f40 <HAL_GPIO_Init+0x48>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d007      	beq.n	8001f40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f34:	2b11      	cmp	r3, #17
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b12      	cmp	r3, #18
 8001f3e:	d130      	bne.n	8001fa2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f76:	2201      	movs	r2, #1
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0201 	and.w	r2, r3, #1
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0xea>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d123      	bne.n	800202a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	6939      	ldr	r1, [r7, #16]
 8002026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0203 	and.w	r2, r3, #3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80ac 	beq.w	80021c4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206c:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002084:	4a59      	ldr	r2, [pc, #356]	; (80021ec <HAL_GPIO_Init+0x2f4>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ae:	d025      	beq.n	80020fc <HAL_GPIO_Init+0x204>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4f      	ldr	r2, [pc, #316]	; (80021f0 <HAL_GPIO_Init+0x2f8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d01f      	beq.n	80020f8 <HAL_GPIO_Init+0x200>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a4e      	ldr	r2, [pc, #312]	; (80021f4 <HAL_GPIO_Init+0x2fc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d019      	beq.n	80020f4 <HAL_GPIO_Init+0x1fc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_GPIO_Init+0x300>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1f8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_GPIO_Init+0x304>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1f4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a4b      	ldr	r2, [pc, #300]	; (8002200 <HAL_GPIO_Init+0x308>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1f0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <HAL_GPIO_Init+0x30c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1ec>
 80020e0:	2306      	movs	r3, #6
 80020e2:	e00c      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020e4:	2307      	movs	r3, #7
 80020e6:	e00a      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020e8:	2305      	movs	r3, #5
 80020ea:	e008      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e006      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020f0:	2303      	movs	r3, #3
 80020f2:	e004      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_GPIO_Init+0x206>
 80020fc:	2300      	movs	r3, #0
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	f002 0203 	and.w	r2, r2, #3
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	4093      	lsls	r3, r2
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800210e:	4937      	ldr	r1, [pc, #220]	; (80021ec <HAL_GPIO_Init+0x2f4>)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_GPIO_Init+0x310>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002140:	4a31      	ldr	r2, [pc, #196]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_GPIO_Init+0x310>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_GPIO_Init+0x310>)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_GPIO_Init+0x310>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_GPIO_Init+0x310>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f ae97 	bne.w	8001f08 <HAL_GPIO_Init+0x10>
  }
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40010000 	.word	0x40010000
 80021f0:	48000400 	.word	0x48000400
 80021f4:	48000800 	.word	0x48000800
 80021f8:	48000c00 	.word	0x48000c00
 80021fc:	48001000 	.word	0x48001000
 8002200:	48001400 	.word	0x48001400
 8002204:	48001800 	.word	0x48001800
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002228:	e002      	b.n	8002230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002242:	af00      	add	r7, sp, #0
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f000 bf01 	b.w	8003058 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8160 	beq.w	8002526 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002266:	4bae      	ldr	r3, [pc, #696]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d00c      	beq.n	800228c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002272:	4bab      	ldr	r3, [pc, #684]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d159      	bne.n	8002332 <HAL_RCC_OscConfig+0xf6>
 800227e:	4ba8      	ldr	r3, [pc, #672]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228a:	d152      	bne.n	8002332 <HAL_RCC_OscConfig+0xf6>
 800228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002290:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d102      	bne.n	80022be <HAL_RCC_OscConfig+0x82>
 80022b8:	4b99      	ldr	r3, [pc, #612]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	e015      	b.n	80022ea <HAL_RCC_OscConfig+0xae>
 80022be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022da:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022e6:	4b8e      	ldr	r3, [pc, #568]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ee:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80022f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80022f6:	fa92 f2a2 	rbit	r2, r2
 80022fa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80022fe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8102 	beq.w	8002524 <HAL_RCC_OscConfig+0x2e8>
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80fc 	bne.w	8002524 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f000 be93 	b.w	8003058 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x110>
 800233e:	4b78      	ldr	r3, [pc, #480]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a77      	ldr	r2, [pc, #476]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e030      	b.n	80023ae <HAL_RCC_OscConfig+0x172>
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x134>
 8002356:	4b72      	ldr	r3, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a71      	ldr	r2, [pc, #452]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01e      	b.n	80023ae <HAL_RCC_OscConfig+0x172>
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x15a>
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002382:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a64      	ldr	r2, [pc, #400]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e00b      	b.n	80023ae <HAL_RCC_OscConfig+0x172>
 8002396:	4b62      	ldr	r3, [pc, #392]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a61      	ldr	r2, [pc, #388]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 800239c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a5e      	ldr	r2, [pc, #376]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 80023a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d059      	beq.n	800246c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fbd6 	bl	8000b68 <HAL_GetTick>
 80023bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c2:	f7fe fbd1 	bl	8000b68 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d902      	bls.n	80023d8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	f000 be40 	b.w	8003058 <HAL_RCC_OscConfig+0xe1c>
 80023d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80023ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_RCC_OscConfig+0x1ce>
 8002404:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x1fa>
 800240a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800241e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002422:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002426:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800243a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800243e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002442:	fa92 f2a2 	rbit	r2, r2
 8002446:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800244a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800244e:	fab2 f282 	clz	r2, r2
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f042 0220 	orr.w	r2, r2, #32
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f002 021f 	and.w	r2, r2, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0ab      	beq.n	80023c2 <HAL_RCC_OscConfig+0x186>
 800246a:	e05c      	b.n	8002526 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fb7c 	bl	8000b68 <HAL_GetTick>
 8002470:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002476:	f7fe fb77 	bl	8000b68 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d902      	bls.n	800248c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	f000 bde6 	b.w	8003058 <HAL_RCC_OscConfig+0xe1c>
 800248c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002490:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80024a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <HAL_RCC_OscConfig+0x282>
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x2ae>
 80024be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80024d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_RCC_OscConfig+0x2e4>)
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80024f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80024f6:	fa92 f2a2 	rbit	r2, r2
 80024fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80024fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002502:	fab2 f282 	clz	r2, r2
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	f042 0220 	orr.w	r2, r2, #32
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f002 021f 	and.w	r2, r2, #31
 8002512:	2101      	movs	r1, #1
 8002514:	fa01 f202 	lsl.w	r2, r1, r2
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ab      	bne.n	8002476 <HAL_RCC_OscConfig+0x23a>
 800251e:	e002      	b.n	8002526 <HAL_RCC_OscConfig+0x2ea>
 8002520:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8170 	beq.w	8002816 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002536:	4bd0      	ldr	r3, [pc, #832]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002542:	4bcd      	ldr	r3, [pc, #820]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b08      	cmp	r3, #8
 800254c:	d16d      	bne.n	800262a <HAL_RCC_OscConfig+0x3ee>
 800254e:	4bca      	ldr	r3, [pc, #808]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255a:	d166      	bne.n	800262a <HAL_RCC_OscConfig+0x3ee>
 800255c:	2302      	movs	r3, #2
 800255e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800256e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d102      	bne.n	800258c <HAL_RCC_OscConfig+0x350>
 8002586:	4bbc      	ldr	r3, [pc, #752]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	e013      	b.n	80025b4 <HAL_RCC_OscConfig+0x378>
 800258c:	2302      	movs	r3, #2
 800258e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800259e:	2302      	movs	r3, #2
 80025a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025b0:	4bb1      	ldr	r3, [pc, #708]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2202      	movs	r2, #2
 80025b6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80025ba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80025be:	fa92 f2a2 	rbit	r2, r2
 80025c2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80025c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025ca:	fab2 f282 	clz	r2, r2
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f002 021f 	and.w	r2, r2, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_RCC_OscConfig+0x3ba>
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d002      	beq.n	80025f6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f000 bd31 	b.w	8003058 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4ba0      	ldr	r3, [pc, #640]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	21f8      	movs	r1, #248	; 0xf8
 8002606:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800260e:	fa91 f1a1 	rbit	r1, r1
 8002612:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002616:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800261a:	fab1 f181 	clz	r1, r1
 800261e:	b2c9      	uxtb	r1, r1
 8002620:	408b      	lsls	r3, r1
 8002622:	4995      	ldr	r1, [pc, #596]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002628:	e0f5      	b.n	8002816 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8085 	beq.w	8002740 <HAL_RCC_OscConfig+0x504>
 8002636:	2301      	movs	r3, #1
 8002638:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002648:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002656:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	2301      	movs	r3, #1
 8002660:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe fa81 	bl	8000b68 <HAL_GetTick>
 8002666:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266c:	f7fe fa7c 	bl	8000b68 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	f000 bceb 	b.w	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002694:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_OscConfig+0x476>
 80026ac:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e013      	b.n	80026da <HAL_RCC_OscConfig+0x49e>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026d6:	4b68      	ldr	r3, [pc, #416]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2202      	movs	r2, #2
 80026dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80026e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80026ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0af      	beq.n	800266c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	21f8      	movs	r1, #248	; 0xf8
 800271c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002724:	fa91 f1a1 	rbit	r1, r1
 8002728:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800272c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002730:	fab1 f181 	clz	r1, r1
 8002734:	b2c9      	uxtb	r1, r1
 8002736:	408b      	lsls	r3, r1
 8002738:	494f      	ldr	r1, [pc, #316]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
 800273e:	e06a      	b.n	8002816 <HAL_RCC_OscConfig+0x5da>
 8002740:	2301      	movs	r3, #1
 8002742:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002752:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe f9fc 	bl	8000b68 <HAL_GetTick>
 8002770:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe f9f7 	bl	8000b68 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	f000 bc66 	b.w	8003058 <HAL_RCC_OscConfig+0xe1c>
 800278c:	2302      	movs	r3, #2
 800278e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800279e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d102      	bne.n	80027bc <HAL_RCC_OscConfig+0x580>
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	e013      	b.n	80027e4 <HAL_RCC_OscConfig+0x5a8>
 80027bc:	2302      	movs	r3, #2
 80027be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80027ce:	2302      	movs	r3, #2
 80027d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_RCC_OscConfig+0x63c>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2202      	movs	r2, #2
 80027e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80027ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80027ee:	fa92 f2a2 	rbit	r2, r2
 80027f2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80027f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027fa:	fab2 f282 	clz	r2, r2
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f042 0220 	orr.w	r2, r2, #32
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f002 021f 	and.w	r2, r2, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f202 	lsl.w	r2, r1, r2
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1af      	bne.n	8002776 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80da 	beq.w	80029da <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d069      	beq.n	8002904 <HAL_RCC_OscConfig+0x6c8>
 8002830:	2301      	movs	r3, #1
 8002832:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002842:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x640>)
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	461a      	mov	r2, r3
 8002856:	2301      	movs	r3, #1
 8002858:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe f985 	bl	8000b68 <HAL_GetTick>
 800285e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	e00d      	b.n	8002880 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe f980 	bl	8000b68 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d905      	bls.n	8002880 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e3ef      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002878:	40021000 	.word	0x40021000
 800287c:	10908120 	.word	0x10908120
 8002880:	2302      	movs	r3, #2
 8002882:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002898:	2202      	movs	r2, #2
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028b0:	2202      	movs	r2, #2
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c4:	4ba4      	ldr	r3, [pc, #656]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 80028c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028cc:	2102      	movs	r1, #2
 80028ce:	6019      	str	r1, [r3, #0]
 80028d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f1a3 	rbit	r1, r3
 80028da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028de:	6019      	str	r1, [r3, #0]
  return result;
 80028e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0b0      	beq.n	8002864 <HAL_RCC_OscConfig+0x628>
 8002902:	e06a      	b.n	80029da <HAL_RCC_OscConfig+0x79e>
 8002904:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800291a:	601a      	str	r2, [r3, #0]
  return result;
 800291c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002920:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x920>)
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	461a      	mov	r2, r3
 8002932:	2300      	movs	r3, #0
 8002934:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7fe f917 	bl	8000b68 <HAL_GetTick>
 800293a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293e:	e009      	b.n	8002954 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe f912 	bl	8000b68 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e381      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002954:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002958:	2202      	movs	r2, #2
 800295a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002988:	2202      	movs	r2, #2
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	fa93 f2a3 	rbit	r2, r3
 8002996:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800299a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	4b6e      	ldr	r3, [pc, #440]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 800299e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029a4:	2102      	movs	r1, #2
 80029a6:	6019      	str	r1, [r3, #0]
 80029a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f1a3 	rbit	r1, r3
 80029b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029b6:	6019      	str	r1, [r3, #0]
  return result;
 80029b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1b2      	bne.n	8002940 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8157 	beq.w	8002c98 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a55      	ldr	r2, [pc, #340]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <HAL_RCC_OscConfig+0x924>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d11a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <HAL_RCC_OscConfig+0x924>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a4b      	ldr	r2, [pc, #300]	; (8002b60 <HAL_RCC_OscConfig+0x924>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe f895 	bl	8000b68 <HAL_GetTick>
 8002a3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	e009      	b.n	8002a58 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe f890 	bl	8000b68 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	; 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e2ff      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_OscConfig+0x924>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ef      	beq.n	8002a44 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x840>
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a39      	ldr	r2, [pc, #228]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6213      	str	r3, [r2, #32]
 8002a7a:	e02f      	b.n	8002adc <HAL_RCC_OscConfig+0x8a0>
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x864>
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	6213      	str	r3, [r2, #32]
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a30      	ldr	r2, [pc, #192]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0x8a0>
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x888>
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x8a0>
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d06a      	beq.n	8002bbc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe f83f 	bl	8000b68 <HAL_GetTick>
 8002aea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe f83a 	bl	8000b68 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e2a7      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002b08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b24:	2202      	movs	r2, #2
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fa93 f2a3 	rbit	r2, r3
 8002b32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_OscConfig+0x928>
 8002b52:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <HAL_RCC_OscConfig+0x91c>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	e013      	b.n	8002b80 <HAL_RCC_OscConfig+0x944>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	10908120 	.word	0x10908120
 8002b60:	40007000 	.word	0x40007000
 8002b64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b68:	2202      	movs	r2, #2
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	fa93 f2a3 	rbit	r2, r3
 8002b76:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	4bc0      	ldr	r3, [pc, #768]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b84:	2102      	movs	r1, #2
 8002b86:	6011      	str	r1, [r2, #0]
 8002b88:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	fa92 f1a2 	rbit	r1, r2
 8002b92:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b96:	6011      	str	r1, [r2, #0]
  return result;
 8002b98:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	fab2 f282 	clz	r2, r2
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f002 021f 	and.w	r2, r2, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d09a      	beq.n	8002af0 <HAL_RCC_OscConfig+0x8b4>
 8002bba:	e063      	b.n	8002c84 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbc:	f7fd ffd4 	bl	8000b68 <HAL_GetTick>
 8002bc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc4:	e00b      	b.n	8002bde <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fd ffcf 	bl	8000b68 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e23c      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002bde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002be2:	2202      	movs	r2, #2
 8002be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	fa93 f2a3 	rbit	r2, r3
 8002bf0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fa93 f2a3 	rbit	r2, r3
 8002c08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c0c:	601a      	str	r2, [r3, #0]
  return result;
 8002c0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_OscConfig+0x9f2>
 8002c28:	4b95      	ldr	r3, [pc, #596]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	e00d      	b.n	8002c4a <HAL_RCC_OscConfig+0xa0e>
 8002c2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c32:	2202      	movs	r2, #2
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	4b8e      	ldr	r3, [pc, #568]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002c4e:	2102      	movs	r1, #2
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	fa92 f1a2 	rbit	r1, r2
 8002c5c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c60:	6011      	str	r1, [r2, #0]
  return result;
 8002c62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f002 021f 	and.w	r2, r2, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1a0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c84:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8c:	4b7c      	ldr	r3, [pc, #496]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a7b      	ldr	r2, [pc, #492]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 81d9 	beq.w	8003056 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca4:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	f000 81a6 	beq.w	8002ffe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f040 811e 	bne.w	8002efa <HAL_RCC_OscConfig+0xcbe>
 8002cbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002cc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cd6:	601a      	str	r2, [r3, #0]
  return result;
 8002cd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd ff38 	bl	8000b68 <HAL_GetTick>
 8002cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfc:	e009      	b.n	8002d12 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fd ff33 	bl	8000b68 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1a2      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002d12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d2a:	601a      	str	r2, [r3, #0]
  return result;
 8002d2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_RCC_OscConfig+0xb10>
 8002d46:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	e01b      	b.n	8002d84 <HAL_RCC_OscConfig+0xb48>
 8002d4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	fa93 f2a3 	rbit	r2, r3
 8002d60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d8c:	6011      	str	r1, [r2, #0]
 8002d8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	fa92 f1a2 	rbit	r1, r2
 8002d98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d9c:	6011      	str	r1, [r2, #0]
  return result;
 8002d9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	fab2 f282 	clz	r2, r2
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f042 0220 	orr.w	r2, r2, #32
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f002 021f 	and.w	r2, r2, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d19e      	bne.n	8002cfe <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f023 020f 	bic.w	r2, r3, #15
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	492c      	ldr	r1, [pc, #176]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a19      	ldr	r1, [r3, #32]
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	4925      	ldr	r1, [pc, #148]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
 8002df0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e08:	601a      	str	r2, [r3, #0]
  return result;
 8002e0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e0e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	461a      	mov	r2, r3
 8002e22:	2301      	movs	r3, #1
 8002e24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fd fe9f 	bl	8000b68 <HAL_GetTick>
 8002e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2e:	e009      	b.n	8002e44 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fd fe9a 	bl	8000b68 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e109      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002e44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e5c:	601a      	str	r2, [r3, #0]
  return result;
 8002e5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_RCC_OscConfig+0xc48>
 8002e78:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <HAL_RCC_OscConfig+0xc44>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	e01e      	b.n	8002ebc <HAL_RCC_OscConfig+0xc80>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_RCC_OscConfig+0xe28>)
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002ec0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ec4:	6011      	str	r1, [r2, #0]
 8002ec6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	fa92 f1a2 	rbit	r1, r2
 8002ed0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ed4:	6011      	str	r1, [r2, #0]
  return result;
 8002ed6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	fab2 f282 	clz	r2, r2
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f042 0220 	orr.w	r2, r2, #32
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f002 021f 	and.w	r2, r2, #31
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d09b      	beq.n	8002e30 <HAL_RCC_OscConfig+0xbf4>
 8002ef8:	e0ad      	b.n	8003056 <HAL_RCC_OscConfig+0xe1a>
 8002efa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	fa93 f2a3 	rbit	r2, r3
 8002f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f12:	601a      	str	r2, [r3, #0]
  return result;
 8002f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fd fe1a 	bl	8000b68 <HAL_GetTick>
 8002f34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	e009      	b.n	8002f4e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fd fe15 	bl	8000b68 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e084      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
 8002f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f66:	601a      	str	r2, [r3, #0]
  return result;
 8002f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_OscConfig+0xd4c>
 8002f82:	4b38      	ldr	r3, [pc, #224]	; (8003064 <HAL_RCC_OscConfig+0xe28>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e01b      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd84>
 8002f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	fa93 f2a3 	rbit	r2, r3
 8002f9c:	f107 0320 	add.w	r3, r7, #32
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f107 031c 	add.w	r3, r7, #28
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	fa93 f2a3 	rbit	r2, r3
 8002fb6:	f107 0318 	add.w	r3, r7, #24
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_OscConfig+0xe28>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f107 0214 	add.w	r2, r7, #20
 8002fc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	f107 0214 	add.w	r2, r7, #20
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fa92 f1a2 	rbit	r1, r2
 8002fd4:	f107 0210 	add.w	r2, r7, #16
 8002fd8:	6011      	str	r1, [r2, #0]
  return result;
 8002fda:	f107 0210 	add.w	r2, r7, #16
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	fab2 f282 	clz	r2, r2
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	f042 0220 	orr.w	r2, r2, #32
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	f002 021f 	and.w	r2, r2, #31
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d19e      	bne.n	8002f3a <HAL_RCC_OscConfig+0xcfe>
 8002ffc:	e02b      	b.n	8003056 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e025      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0xe28>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003014:	4b13      	ldr	r3, [pc, #76]	; (8003064 <HAL_RCC_OscConfig+0xe28>)
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800301c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003020:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	429a      	cmp	r2, r3
 800302c:	d111      	bne.n	8003052 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800302e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800303c:	429a      	cmp	r2, r3
 800303e:	d108      	bne.n	8003052 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003044:	f003 020f 	and.w	r2, r3, #15
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b09e      	sub	sp, #120	; 0x78
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e162      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b90      	ldr	r3, [pc, #576]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d910      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	498b      	ldr	r1, [pc, #556]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e14a      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	497f      	ldr	r1, [pc, #508]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80dc 	beq.w	8003294 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d13c      	bne.n	800315e <HAL_RCC_ClockConfig+0xf6>
 80030e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d102      	bne.n	800310e <HAL_RCC_ClockConfig+0xa6>
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	e00f      	b.n	800312e <HAL_RCC_ClockConfig+0xc6>
 800310e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003112:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	667b      	str	r3, [r7, #100]	; 0x64
 800311c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003120:	663b      	str	r3, [r7, #96]	; 0x60
 8003122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003132:	65ba      	str	r2, [r7, #88]	; 0x58
 8003134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003136:	fa92 f2a2 	rbit	r2, r2
 800313a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800313c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800313e:	fab2 f282 	clz	r2, r2
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f042 0220 	orr.w	r2, r2, #32
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f002 021f 	and.w	r2, r2, #31
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d17b      	bne.n	8003252 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0f3      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d13c      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x178>
 8003166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <HAL_RCC_ClockConfig+0x128>
 800318a:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e00f      	b.n	80031b0 <HAL_RCC_ClockConfig+0x148>
 8003190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003194:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	647b      	str	r3, [r7, #68]	; 0x44
 800319e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
 80031a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ac:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80031b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b8:	fa92 f2a2 	rbit	r2, r2
 80031bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c0:	fab2 f282 	clz	r2, r2
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	f042 0220 	orr.w	r2, r2, #32
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f002 021f 	and.w	r2, r2, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d13a      	bne.n	8003252 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b2      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
 80031e0:	2302      	movs	r3, #2
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_RCC_ClockConfig+0x1a0>
 8003202:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e00d      	b.n	8003224 <HAL_RCC_ClockConfig+0x1bc>
 8003208:	2302      	movs	r3, #2
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
 8003214:	2302      	movs	r3, #2
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2202      	movs	r2, #2
 8003226:	61ba      	str	r2, [r7, #24]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	fa92 f2a2 	rbit	r2, r2
 800322e:	617a      	str	r2, [r7, #20]
  return result;
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	fab2 f282 	clz	r2, r2
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f042 0220 	orr.w	r2, r2, #32
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f002 021f 	and.w	r2, r2, #31
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e079      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f023 0203 	bic.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	491a      	ldr	r1, [pc, #104]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003264:	f7fd fc80 	bl	8000b68 <HAL_GetTick>
 8003268:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	e00a      	b.n	8003282 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326c:	f7fd fc7c 	bl	8000b68 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e061      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_ClockConfig+0x260>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 020c 	and.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	429a      	cmp	r2, r3
 8003292:	d1eb      	bne.n	800326c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d214      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 0207 	bic.w	r2, r3, #7
 80032aa:	4906      	ldr	r1, [pc, #24]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HAL_RCC_ClockConfig+0x25c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e040      	b.n	8003346 <HAL_RCC_ClockConfig+0x2de>
 80032c4:	40022000 	.word	0x40022000
 80032c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	491a      	ldr	r1, [pc, #104]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4912      	ldr	r1, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800330a:	f000 f829 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800330e:	4601      	mov	r1, r0
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_ClockConfig+0x2e8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003318:	22f0      	movs	r2, #240	; 0xf0
 800331a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	fa92 f2a2 	rbit	r2, r2
 8003322:	60fa      	str	r2, [r7, #12]
  return result;
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	40d3      	lsrs	r3, r2
 800332e:	4a09      	ldr	r2, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x2ec>)
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	fa21 f303 	lsr.w	r3, r1, r3
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x2f0>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_RCC_ClockConfig+0x2f4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fbce 	bl	8000ae0 <HAL_InitTick>
  
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3778      	adds	r7, #120	; 0x78
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	080038e0 	.word	0x080038e0
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b08b      	sub	sp, #44	; 0x2c
 8003364:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800337a:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc4>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d002      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x30>
 800338a:	2b08      	cmp	r3, #8
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x36>
 800338e:	e03f      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003392:	623b      	str	r3, [r7, #32]
      break;
 8003394:	e03f      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800339c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	fa92 f2a2 	rbit	r2, r2
 80033a8:	607a      	str	r2, [r7, #4]
  return result;
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	40d3      	lsrs	r3, r2
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_RCC_GetSysClockFreq+0xcc>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	220f      	movs	r2, #15
 80033c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	fa92 f2a2 	rbit	r2, r2
 80033cc:	60fa      	str	r2, [r7, #12]
  return result;
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	40d3      	lsrs	r3, r2
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e8:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	e007      	b.n	800340a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033fa:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	623b      	str	r3, [r7, #32]
      break;
 800340e:	e002      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003412:	623b      	str	r3, [r7, #32]
      break;
 8003414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003416:	6a3b      	ldr	r3, [r7, #32]
}
 8003418:	4618      	mov	r0, r3
 800341a:	372c      	adds	r7, #44	; 0x2c
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40021000 	.word	0x40021000
 8003428:	007a1200 	.word	0x007a1200
 800342c:	080038f0 	.word	0x080038f0
 8003430:	08003900 	.word	0x08003900

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b092      	sub	sp, #72	; 0x48
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80d7 	beq.w	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003458:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10e      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003464:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	61d3      	str	r3, [r2, #28]
 8003470:	4b48      	ldr	r3, [pc, #288]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b45      	ldr	r3, [pc, #276]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b42      	ldr	r3, [pc, #264]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a41      	ldr	r2, [pc, #260]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7fd fb65 	bl	8000b68 <HAL_GetTick>
 800349e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fd fb61 	bl	8000b68 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1d6      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8084 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d07c      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e0:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	461a      	mov	r2, r3
 800350a:	2301      	movs	r3, #1
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	461a      	mov	r2, r3
 800352e:	2300      	movs	r3, #0
 8003530:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003532:	4a18      	ldr	r2, [pc, #96]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fd fb11 	bl	8000b68 <HAL_GetTick>
 8003546:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd fb0d 	bl	8000b68 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e180      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003560:	2302      	movs	r3, #2
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	2302      	movs	r3, #2
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	61fb      	str	r3, [r7, #28]
  return result;
 8003578:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d108      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800358e:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	e00d      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003594:	40021000 	.word	0x40021000
 8003598:	40007000 	.word	0x40007000
 800359c:	10908100 	.word	0x10908100
 80035a0:	2302      	movs	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	2202      	movs	r2, #2
 80035b2:	613a      	str	r2, [r7, #16]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	60fa      	str	r2, [r7, #12]
  return result;
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0b7      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035da:	4b95      	ldr	r3, [pc, #596]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4992      	ldr	r1, [pc, #584]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f4:	4b8e      	ldr	r3, [pc, #568]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	4a8d      	ldr	r2, [pc, #564]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80035fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360c:	4b88      	ldr	r3, [pc, #544]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f023 0203 	bic.w	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4985      	ldr	r1, [pc, #532]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800362a:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	497e      	ldr	r1, [pc, #504]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003648:	4b79      	ldr	r3, [pc, #484]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4976      	ldr	r1, [pc, #472]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f023 0210 	bic.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	496f      	ldr	r1, [pc, #444]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	4967      	ldr	r1, [pc, #412]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a2:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f023 0220 	bic.w	r2, r3, #32
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4960      	ldr	r1, [pc, #384]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c0:	4b5b      	ldr	r3, [pc, #364]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	4958      	ldr	r1, [pc, #352]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4951      	ldr	r1, [pc, #324]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036fc:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	4949      	ldr	r1, [pc, #292]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800371a:	4b45      	ldr	r3, [pc, #276]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4942      	ldr	r1, [pc, #264]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003738:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	493a      	ldr	r1, [pc, #232]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	4933      	ldr	r1, [pc, #204]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	492b      	ldr	r1, [pc, #172]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003792:	4b27      	ldr	r3, [pc, #156]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4924      	ldr	r1, [pc, #144]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	491c      	ldr	r1, [pc, #112]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	4915      	ldr	r1, [pc, #84]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	490d      	ldr	r1, [pc, #52]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	4906      	ldr	r1, [pc, #24]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003818:	4313      	orrs	r3, r2
 800381a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00c      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	490b      	ldr	r1, [pc, #44]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800383e:	4313      	orrs	r3, r2
 8003840:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385a:	4904      	ldr	r1, [pc, #16]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800385c:	4313      	orrs	r3, r2
 800385e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3748      	adds	r7, #72	; 0x48
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <__libc_init_array>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	4e0d      	ldr	r6, [pc, #52]	; (80038a8 <__libc_init_array+0x38>)
 8003874:	4c0d      	ldr	r4, [pc, #52]	; (80038ac <__libc_init_array+0x3c>)
 8003876:	1ba4      	subs	r4, r4, r6
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	2500      	movs	r5, #0
 800387c:	42a5      	cmp	r5, r4
 800387e:	d109      	bne.n	8003894 <__libc_init_array+0x24>
 8003880:	4e0b      	ldr	r6, [pc, #44]	; (80038b0 <__libc_init_array+0x40>)
 8003882:	4c0c      	ldr	r4, [pc, #48]	; (80038b4 <__libc_init_array+0x44>)
 8003884:	f000 f820 	bl	80038c8 <_init>
 8003888:	1ba4      	subs	r4, r4, r6
 800388a:	10a4      	asrs	r4, r4, #2
 800388c:	2500      	movs	r5, #0
 800388e:	42a5      	cmp	r5, r4
 8003890:	d105      	bne.n	800389e <__libc_init_array+0x2e>
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003898:	4798      	blx	r3
 800389a:	3501      	adds	r5, #1
 800389c:	e7ee      	b.n	800387c <__libc_init_array+0xc>
 800389e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038a2:	4798      	blx	r3
 80038a4:	3501      	adds	r5, #1
 80038a6:	e7f2      	b.n	800388e <__libc_init_array+0x1e>
 80038a8:	08003910 	.word	0x08003910
 80038ac:	08003910 	.word	0x08003910
 80038b0:	08003910 	.word	0x08003910
 80038b4:	08003914 	.word	0x08003914

080038b8 <memset>:
 80038b8:	4402      	add	r2, r0
 80038ba:	4603      	mov	r3, r0
 80038bc:	4293      	cmp	r3, r2
 80038be:	d100      	bne.n	80038c2 <memset+0xa>
 80038c0:	4770      	bx	lr
 80038c2:	f803 1b01 	strb.w	r1, [r3], #1
 80038c6:	e7f9      	b.n	80038bc <memset+0x4>

080038c8 <_init>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr

080038d4 <_fini>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr
